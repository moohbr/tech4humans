{"version":3,"sources":["../../../../../app/domain/use-cases/transaction/add-to-a-user/schemas.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../app/domain/models/bank/schemas/index.ts","../../../../../app/domain/models/user/schemas/index.ts","../../../../../app/domain/models/account/schemas/index.ts","../../../../../app/domain/models/transaction/schemas/index.ts"],"sourcesContent":["import { TransactionSchemas } from \"@models/transaction/schemas\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { z } from \"zod\";\n\nexport class AddTransactionToUserSchemas {\n  public static readonly requestSchema = z.object({\n    params: z.object({\n      sourceAccountId: AccountSchemas.accountIdSchema,\n      destinationAccountId: AccountSchemas.accountIdSchema,\n    }),\n    transaction: z.object({\n      type: TransactionSchemas.transactionTypeSchema,\n      amount: TransactionSchemas.amountSchema,\n    }),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    params: z.object({\n      sourceAccountId: AccountSchemas.accountIdSchema,\n      destinationAccountId: AccountSchemas.accountIdSchema,\n    }),\n    body: z.object({\n      transaction: z.object({\n        type: TransactionSchemas.transactionTypeSchema,\n        amount: TransactionSchemas.amountSchema,\n      }),\n    }),\n  });\n}","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupança\",\n  CREDITO = \"Crédito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"Débito\",\n  CREDITO = \"Crédito\",\n  TRANSFERENCIA = \"Transferência\",\n}\n","import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AccountSchemas {\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly accountIdSchema = z\n    .number()\n    .int(\"Account ID must be an integer\")\n    .positive(\"Account ID must be positive\");\n\n  public static readonly accountTypeSchema = z.nativeEnum(AccountType);\n\n  public static readonly balanceSchema = z\n    .number()\n    // .max(9999999999, \"Balance is too high\")\n    // .min(-9999999999, \"Balance is too low\")\n    .refine((val) => Number.isFinite(val), {\n      message: \"Balance must be a finite number\",\n    });\n\n  public static readonly createAccountSchema = z.object({\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    userId: UserSchemas.userIdSchema,\n    bankName: BankSchemas.nameSchema,\n  });\n\n  public static readonly accountEntitySchema = z.object({\n    id: this.accountIdSchema,\n    name: this.nameSchema,\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    createdAt: z.date(),\n  });\n}\n","import { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { z } from \"zod\";\n\nexport class TransactionSchemas {\n  public static readonly transactionIdSchema = z\n    .number()\n    .int(\"Transaction ID must be an integer\")\n    .positive(\"Transaction ID must be positive\");\n\n  public static readonly amountSchema = z\n    .number()\n    .refine((val) => Number.isFinite(val), {\n      message: \"Amount must be a finite number\",\n    });\n\n  public static readonly descriptionSchema = z\n    .string()\n    .min(2, \"Description must have at least 2 characters\")\n    .max(255, \"Description cannot exceed 255 characters\");\n\n  public static readonly accountIdSchema = AccountSchemas.accountIdSchema;\n\n  public static readonly transactionDateSchema = z.date();\n\n  public static readonly transactionTypeSchema = z.nativeEnum(TransactionType);\n\n  public static readonly createTransactionSchema = z.object({\n    amount: this.amountSchema,\n    description: this.descriptionSchema,\n    destinationAccountId: this.accountIdSchema,\n    sourceAccountId: this.accountIdSchema,\n    type: this.transactionTypeSchema,\n  });\n\n  public static readonly transactionEntitySchema = z.object({\n    id: this.transactionIdSchema,\n    amount: this.amountSchema,\n    description: this.descriptionSchema,\n    destinationAccountId: this.accountIdSchema,\n    sourceAccountId: this.accountIdSchema,\n    type: this.transactionTypeSchema,\n  });\n}"],"mappings":"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","names":["AccountType","TransactionType","BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","import_zod","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","import_zod","AccountSchemas","nameSchema","z","string","min","max","regex","accountIdSchema","number","int","positive","accountTypeSchema","nativeEnum","AccountType","balanceSchema","refine","val","Number","isFinite","message","createAccountSchema","object","type","balance","userId","UserSchemas","userIdSchema","bankName","BankSchemas","accountEntitySchema","id","name","createdAt","date","import_zod","TransactionSchemas","transactionIdSchema","z","number","int","positive","amountSchema","refine","val","Number","isFinite","message","descriptionSchema","string","min","max","accountIdSchema","AccountSchemas","transactionDateSchema","date","transactionTypeSchema","nativeEnum","TransactionType","createTransactionSchema","object","amount","description","destinationAccountId","sourceAccountId","type","transactionEntitySchema","id","import_zod","AddTransactionToUserSchemas","requestSchema","z","object","params","sourceAccountId","AccountSchemas","accountIdSchema","destinationAccountId","transaction","type","TransactionSchemas","transactionTypeSchema","amount","amountSchema","httpRequestSchema","body"]}