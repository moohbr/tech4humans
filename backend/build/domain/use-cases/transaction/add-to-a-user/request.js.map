{"version":3,"sources":["../../../../../app/domain/use-cases/transaction/add-to-a-user/request.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../app/domain/models/bank/schemas/index.ts","../../../../../app/domain/models/user/schemas/index.ts","../../../../../app/domain/models/account/schemas/index.ts","../../../../../app/domain/models/transaction/schemas/index.ts","../../../../../app/domain/use-cases/transaction/add-to-a-user/schemas.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/validation-error.ts","../../../../../app/domain/errors/account/invalid-account-id-error.ts","../../../../../app/domain/models/account/value-objects/id.ts","../../../../../app/domain/models/transaction/value-objects/type.ts","../../../../../app/domain/models/transaction/value-objects/amount.ts"],"sourcesContent":["import { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AddTransactionToUserSchemas } from \"@useCases/transaction/add-to-a-user/schemas\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { TransactionTypeVo } from \"@models/transaction/value-objects/type\";\nimport { TransactionAmount } from \"@models/transaction/value-objects/amount\";\n\nexport class AddTransactionToUserRequest {\n    constructor(\n        private readonly sourceAccountId: AccountId,\n        private readonly destinationAccountId: AccountId,\n        private readonly type: TransactionTypeVo,\n        private readonly amount: TransactionAmount,\n    ) {}\n\n    public static createFromRaw(raw: unknown): AddTransactionToUserRequest {\n        const parsed = AddTransactionToUserSchemas.httpRequestSchema.parse(raw);\n        \n        return new AddTransactionToUserRequest(\n            AccountId.create(parsed.params.sourceAccountId),\n            AccountId.create(parsed.params.destinationAccountId),\n            TransactionTypeVo.create(parsed.body.transaction.type),\n            TransactionAmount.create(parsed.body.transaction.amount)\n        );\n    }\n\n    // Return primitive values for schema validation\n    public getSourceAccountId(): number {\n        return this.sourceAccountId.getValue();\n    }\n\n    public getDestinationAccountId(): number {\n        return this.destinationAccountId.getValue();\n    }\n\n    public getType(): TransactionType {\n        return this.type.getValue();\n    }\n\n    public getAmount(): number {\n        return this.amount.getValue();\n    }\n\n    // Return value objects for domain logic\n    public getSourceAccountIdVO(): AccountId {\n        return this.sourceAccountId;\n    }\n\n    public getDestinationAccountIdVO(): AccountId {\n        return this.destinationAccountId;\n    }\n\n    public getTypeVO(): TransactionTypeVo {\n        return this.type;\n    }\n\n    public getAmountVO(): TransactionAmount {\n        return this.amount;\n    }\n}","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupança\",\n  CREDITO = \"Crédito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"Débito\",\n  CREDITO = \"Crédito\",\n  TRANSFERENCIA = \"Transferência\",\n}\n","import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AccountSchemas {\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly accountIdSchema = z\n    .number()\n    .int(\"Account ID must be an integer\")\n    .positive(\"Account ID must be positive\");\n\n  public static readonly accountTypeSchema = z.nativeEnum(AccountType);\n\n  public static readonly balanceSchema = z\n    .number()\n    // .max(9999999999, \"Balance is too high\")\n    // .min(-9999999999, \"Balance is too low\")\n    .refine((val) => Number.isFinite(val), {\n      message: \"Balance must be a finite number\",\n    });\n\n  public static readonly createAccountSchema = z.object({\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    userId: UserSchemas.userIdSchema,\n    bankName: BankSchemas.nameSchema,\n  });\n\n  public static readonly accountEntitySchema = z.object({\n    id: this.accountIdSchema,\n    name: this.nameSchema,\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    createdAt: z.date(),\n  });\n}\n","import { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { z } from \"zod\";\n\nexport class TransactionSchemas {\n  public static readonly transactionIdSchema = z\n    .number()\n    .int(\"Transaction ID must be an integer\")\n    .positive(\"Transaction ID must be positive\");\n\n  public static readonly amountSchema = z\n    .number()\n    .refine((val) => Number.isFinite(val), {\n      message: \"Amount must be a finite number\",\n    });\n\n  public static readonly descriptionSchema = z\n    .string()\n    .min(2, \"Description must have at least 2 characters\")\n    .max(255, \"Description cannot exceed 255 characters\");\n\n  public static readonly accountIdSchema = AccountSchemas.accountIdSchema;\n\n  public static readonly transactionDateSchema = z.date();\n\n  public static readonly transactionTypeSchema = z.nativeEnum(TransactionType);\n\n  public static readonly createTransactionSchema = z.object({\n    amount: this.amountSchema,\n    description: this.descriptionSchema,\n    destinationAccountId: this.accountIdSchema,\n    sourceAccountId: this.accountIdSchema,\n    type: this.transactionTypeSchema,\n  });\n\n  public static readonly transactionEntitySchema = z.object({\n    id: this.transactionIdSchema,\n    amount: this.amountSchema,\n    description: this.descriptionSchema,\n    destinationAccountId: this.accountIdSchema,\n    sourceAccountId: this.accountIdSchema,\n    type: this.transactionTypeSchema,\n  });\n}","import { TransactionSchemas } from \"@models/transaction/schemas\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { z } from \"zod\";\n\nexport class AddTransactionToUserSchemas {\n  public static readonly requestSchema = z.object({\n    params: z.object({\n      sourceAccountId: AccountSchemas.accountIdSchema,\n      destinationAccountId: AccountSchemas.accountIdSchema,\n    }),\n    transaction: z.object({\n      type: TransactionSchemas.transactionTypeSchema,\n      amount: TransactionSchemas.amountSchema,\n    }),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    params: z.object({\n      sourceAccountId: AccountSchemas.accountIdSchema,\n      destinationAccountId: AccountSchemas.accountIdSchema,\n    }),\n    body: z.object({\n      transaction: z.object({\n        type: TransactionSchemas.transactionTypeSchema,\n        amount: TransactionSchemas.amountSchema,\n      }),\n    }),\n  });\n}","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidAccountIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new AccountId before persistence');\n    Object.setPrototypeOf(this, InvalidAccountIdError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidAccountIdError } from \"@errors/account/invalid-account-id-error\";\n\nexport class AccountId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n    public static create(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createNew(): AccountId {\n    return new AccountId(null, true);\n  }\n\n  public static createFromDatabase(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): AccountId {\n    return new AccountId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidAccountIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: AccountId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"\";\n  }\n}\n","import { TransactionSchemas } from \"@models/transaction/schemas\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\n\nexport class TransactionTypeVo {\n  private constructor(private readonly value: TransactionType) {}\n\n  public static create(value: TransactionType): TransactionTypeVo {\n    const validatedType = TransactionSchemas.transactionTypeSchema.parse(value);\n    return new TransactionTypeVo(validatedType);\n  }\n\n  public getValue(): TransactionType {\n    return this.value;\n  }\n\n  public equals(other: TransactionTypeVo): boolean {\n    return this.value === other.value;\n  }\n}","import { TransactionSchemas } from \"@models/transaction/schemas\";\n\nexport class TransactionAmount {\n  private constructor(private readonly value: number) {}\n\n  public static create(value: number): TransactionAmount {\n    const validatedAmount = TransactionSchemas.amountSchema.parse(value);\n    return new TransactionAmount(validatedAmount);\n  }\n\n  public getValue(): number {\n    return this.value;\n  }\n\n  public equals(other: TransactionAmount): boolean {\n    return this.value === other.value;\n  }\n}"],"mappings":"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","names":["AccountType","TransactionType","BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","import_zod","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","import_zod","AccountSchemas","nameSchema","z","string","min","max","regex","accountIdSchema","number","int","positive","accountTypeSchema","nativeEnum","AccountType","balanceSchema","refine","val","Number","isFinite","message","createAccountSchema","object","type","balance","userId","UserSchemas","userIdSchema","bankName","BankSchemas","accountEntitySchema","id","name","createdAt","date","import_zod","TransactionSchemas","transactionIdSchema","z","number","int","positive","amountSchema","refine","val","Number","isFinite","message","descriptionSchema","string","min","max","accountIdSchema","AccountSchemas","transactionDateSchema","date","transactionTypeSchema","nativeEnum","TransactionType","createTransactionSchema","object","amount","description","destinationAccountId","sourceAccountId","type","transactionEntitySchema","id","import_zod","AddTransactionToUserSchemas","requestSchema","z","object","params","sourceAccountId","AccountSchemas","accountIdSchema","destinationAccountId","transaction","type","TransactionSchemas","transactionTypeSchema","amount","amountSchema","httpRequestSchema","body","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidAccountIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","AccountId","value","isNewId","create","id","validatedId","AccountSchemas","accountIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidAccountIdError","isNew","equals","other","toString","TransactionTypeVo","value","create","validatedType","TransactionSchemas","transactionTypeSchema","parse","getValue","equals","other","TransactionAmount","value","create","validatedAmount","TransactionSchemas","amountSchema","parse","getValue","equals","other","AddTransactionToUserRequest","constructor","sourceAccountId","destinationAccountId","type","amount","createFromRaw","raw","parsed","AddTransactionToUserSchemas","httpRequestSchema","parse","AccountId","create","params","TransactionTypeVo","body","transaction","TransactionAmount","getSourceAccountId","getValue","getDestinationAccountId","getType","getAmount","getSourceAccountIdVO","getDestinationAccountIdVO","getTypeVO","getAmountVO"]}