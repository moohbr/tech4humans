{"version":3,"sources":["../../../../../node_modules/tsup/assets/esm_shims.js","../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../app/domain/models/bank/schemas/index.ts","../../../../../app/domain/models/user/schemas/index.ts","../../../../../app/domain/models/account/schemas/index.ts","../../../../../app/domain/models/transaction/schemas/index.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/validation-error.ts","../../../../../app/domain/errors/transaction/invalid-transaction-id-error.ts","../../../../../app/domain/models/transaction/value-objects/id.ts","../../../../../app/domain/models/transaction/value-objects/amount.ts","../../../../../app/domain/models/transaction/value-objects/description.ts","../../../../../app/domain/errors/account/invalid-account-id-error.ts","../../../../../app/domain/models/account/value-objects/id.ts","../../../../../app/domain/models/transaction/value-objects/type.ts","../../../../../app/domain/models/transaction/entity/index.ts","../../../../../app/infrastructure/datasources/databases/typeorm/index.ts","../../../../../app/config/schemas.ts","../../../../../app/config/enums.ts","../../../../../app/infrastructure/logger/index.ts","../../../../../app/config/index.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/bank.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/account.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/user.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/transactions.ts","../../../../../app/domain/use-cases/transaction/add-to-a-user/index.ts","../../../../../app/domain/use-cases/transaction/add-to-a-user/response.ts","../../../../../app/domain/errors/not-found-error.ts","../../../../../app/domain/errors/account/account-not-found-error.ts","../../../../../app/domain/errors/transaction/insufficient-funds-error.ts","../../../../../app/domain/errors/transaction/invalid-transaction-type-error.ts","../../../../../app/domain/use-cases/transaction/add-to-a-user/index.spec.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupança\",\n  CREDITO = \"Crédito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"Débito\",\n  CREDITO = \"Crédito\",\n  TRANSFERENCIA = \"Transferência\",\n}\n","import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AccountSchemas {\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly accountIdSchema = z\n    .number()\n    .int(\"Account ID must be an integer\")\n    .positive(\"Account ID must be positive\");\n\n  public static readonly accountTypeSchema = z.nativeEnum(AccountType);\n\n  public static readonly balanceSchema = z\n    .number()\n    // .max(9999999999, \"Balance is too high\")\n    // .min(-9999999999, \"Balance is too low\")\n    .refine((val) => Number.isFinite(val), {\n      message: \"Balance must be a finite number\",\n    });\n\n  public static readonly createAccountSchema = z.object({\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    userId: UserSchemas.userIdSchema,\n    bankName: BankSchemas.nameSchema,\n  });\n\n  public static readonly accountEntitySchema = z.object({\n    id: this.accountIdSchema,\n    name: this.nameSchema,\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    createdAt: z.date(),\n  });\n}\n","import { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { z } from \"zod\";\n\nexport class TransactionSchemas {\n  public static readonly transactionIdSchema = z\n    .number()\n    .int(\"Transaction ID must be an integer\")\n    .positive(\"Transaction ID must be positive\");\n\n  public static readonly amountSchema = z\n    .number()\n    .refine((val) => Number.isFinite(val), {\n      message: \"Amount must be a finite number\",\n    });\n\n  public static readonly descriptionSchema = z\n    .string()\n    .min(2, \"Description must have at least 2 characters\")\n    .max(255, \"Description cannot exceed 255 characters\");\n\n  public static readonly accountIdSchema = AccountSchemas.accountIdSchema;\n\n  public static readonly transactionDateSchema = z.date();\n\n  public static readonly transactionTypeSchema = z.nativeEnum(TransactionType);\n\n  public static readonly createTransactionSchema = z.object({\n    amount: this.amountSchema,\n    description: this.descriptionSchema,\n    destinationAccountId: this.accountIdSchema,\n    sourceAccountId: this.accountIdSchema,\n    type: this.transactionTypeSchema,\n  });\n\n  public static readonly transactionEntitySchema = z.object({\n    id: this.transactionIdSchema,\n    amount: this.amountSchema,\n    description: this.descriptionSchema,\n    destinationAccountId: this.accountIdSchema,\n    sourceAccountId: this.accountIdSchema,\n    type: this.transactionTypeSchema,\n  });\n}","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidTransactionIdError extends ValidationError {\n  constructor(id: string) {\n    super(`Invalid transaction id: ${id}`);\n    Object.setPrototypeOf(this, InvalidTransactionIdError.prototype);\n  }\n}","import { InvalidTransactionIdError } from \"@errors/transaction/invalid-transaction-id-error\";\nimport { TransactionSchemas } from \"@models/transaction/schemas\";\n\nexport class TransactionId {\n    private constructor(\n      private readonly value: number | null,\n      private readonly isNewId: boolean = false,\n    ) {}\n  \n    public static create(id: number): TransactionId {\n      const validatedId = TransactionSchemas.transactionIdSchema.parse(id);\n      return new TransactionId(validatedId, false);\n    }\n  \n    public static createNew(): TransactionId {\n      return new TransactionId(null, true);\n    }\n  \n    public static createFromDatabase(id: number): TransactionId {\n      const validatedId = TransactionSchemas.transactionIdSchema.parse(id);\n      return new TransactionId(validatedId, false);\n    }\n  \n    public static createUnsafe(id: number): TransactionId {\n      return new TransactionId(id, false);\n    }\n  \n    public getValue(): number {\n      if (this.value === null) {\n        throw new InvalidTransactionIdError(\"new\");\n      }\n      return this.value;\n    }\n  \n    public isNew(): boolean {\n      return this.isNewId;\n    }\n  \n    public equals(other: TransactionId): boolean {\n      return this.value === other.value;\n    }\n  \n    public toString(): string {\n      return this.value?.toString() ?? \"new\";\n    }\n  }","import { TransactionSchemas } from \"@models/transaction/schemas\";\n\nexport class TransactionAmount {\n  private constructor(private readonly value: number) {}\n\n  public static create(value: number): TransactionAmount {\n    const validatedAmount = TransactionSchemas.amountSchema.parse(value);\n    return new TransactionAmount(validatedAmount);\n  }\n\n  public getValue(): number {\n    return this.value;\n  }\n\n  public equals(other: TransactionAmount): boolean {\n    return this.value === other.value;\n  }\n}","import { TransactionSchemas } from \"@models/transaction/schemas\";\n\nexport class TransactionDescription {\n  private constructor(private readonly value: string) {}\n\n  public static create(value: string): TransactionDescription {\n    const validatedDescription = TransactionSchemas.descriptionSchema.parse(value);\n    return new TransactionDescription(validatedDescription);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: TransactionDescription): boolean {\n    return this.value === other.value;\n  }\n}","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidAccountIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new AccountId before persistence');\n    Object.setPrototypeOf(this, InvalidAccountIdError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidAccountIdError } from \"@errors/account/invalid-account-id-error\";\n\nexport class AccountId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n    public static create(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createNew(): AccountId {\n    return new AccountId(null, true);\n  }\n\n  public static createFromDatabase(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): AccountId {\n    return new AccountId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidAccountIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: AccountId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"\";\n  }\n}\n","import { TransactionSchemas } from \"@models/transaction/schemas\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\n\nexport class TransactionTypeVo {\n  private constructor(private readonly value: TransactionType) {}\n\n  public static create(value: TransactionType): TransactionTypeVo {\n    const validatedType = TransactionSchemas.transactionTypeSchema.parse(value);\n    return new TransactionTypeVo(validatedType);\n  }\n\n  public getValue(): TransactionType {\n    return this.value;\n  }\n\n  public equals(other: TransactionTypeVo): boolean {\n    return this.value === other.value;\n  }\n}","\nimport { z } from \"zod\";\nimport { TransactionSchemas } from \"@models/transaction/schemas\";\nimport { TransactionId } from \"@models/transaction/value-objects/id\";\nimport { TransactionAmount } from \"@models/transaction/value-objects/amount\";\nimport { TransactionDescription } from \"@models/transaction/value-objects/description\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { TransactionTypeVo } from \"@models/transaction/value-objects/type\";\nimport { TransactionRawEntity } from \"@models/transaction/entity/types\";\n\nexport class TransactionEntity {\n  private constructor(\n    private readonly id: TransactionId | null,\n    private readonly amount: TransactionAmount,\n    private readonly description: TransactionDescription,\n    private readonly destinationAccountId: AccountId,\n    private readonly sourceAccountId: AccountId,\n    private readonly type: TransactionTypeVo,\n) {}\n\n  public static create(params: z.infer<typeof TransactionSchemas.createTransactionSchema>): TransactionEntity {\n    const validatedData = TransactionSchemas.createTransactionSchema.parse(params);\n    return new TransactionEntity(\n      null,\n      TransactionAmount.create(validatedData.amount),\n      TransactionDescription.create(validatedData.description),\n      AccountId.create(validatedData.destinationAccountId),\n      AccountId.create(validatedData.sourceAccountId),\n      TransactionTypeVo.create(validatedData.type),\n    );\n  }\n\n  public static createFromDatabase(params: z.infer<typeof TransactionSchemas.transactionEntitySchema>): TransactionEntity {\n    const validatedData = TransactionSchemas.transactionEntitySchema.parse(params);\n    return new TransactionEntity(\n      TransactionId.create(validatedData.id),\n      TransactionAmount.create(validatedData.amount),\n      TransactionDescription.create(validatedData.description),\n      AccountId.create(validatedData.destinationAccountId),\n      AccountId.create(validatedData.sourceAccountId),\n      TransactionTypeVo.create(validatedData.type),\n    );\n  }\n\n  public getId(): TransactionId | null {\n    return this.id;\n  }\n\n\n  public getDestinationAccountId(): AccountId {\n    return this.destinationAccountId;\n  }\n\n  public getSourceAccountId(): AccountId {\n    return this.sourceAccountId;\n  }\n  \n  public getAmount(): TransactionAmount {\n    return this.amount;\n  }\n\n  public getDescription(): TransactionDescription {\n    return this.description;\n  }\n\n  public getType(): TransactionTypeVo {\n    return this.type;\n  }\n\n  public toPersistence(): TransactionRawEntity {\n    return {\n      id: this.id?.getValue() ?? 0,\n      amount: this.amount.getValue(),\n      description: this.description.getValue(),\n      destinationAccountId: this.destinationAccountId.getValue(),\n      sourceAccountId: this.sourceAccountId.getValue(),\n      type: this.type.getValue(),\n    };\n  }\n\n  public toJSON(): TransactionRawEntity {\n    return {\n      id: this.id?.getValue() ?? 0,\n      amount: this.amount.getValue(),\n      description: this.description.getValue(),\n      destinationAccountId: this.destinationAccountId.getValue(),\n      sourceAccountId: this.sourceAccountId.getValue(),\n      type: this.type.getValue()\n    };\n  }\n\n  public static reconstruct(params: z.infer<typeof TransactionSchemas.transactionEntitySchema>): TransactionEntity {\n    return new TransactionEntity(\n      TransactionId.create(params.id),\n      TransactionAmount.create(params.amount),\n      TransactionDescription.create(params.description),\n      AccountId.create(params.destinationAccountId),\n      AccountId.create(params.sourceAccountId),\n      TransactionTypeVo.create(params.type),\n    );\n  }\n}\n\n","import \"reflect-metadata\";\nimport \"@config\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport path from \"path\";\nimport { DataSource } from \"typeorm\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\nconst migrationsPath = path.resolve(__dirname, \"../../../../../migrations/\");\n\nexport const AppDataSource = new DataSource({\n  type: \"sqlite\",\n  database: process.env.DATABASE_PATH,\n  synchronize: process.env.NODE_ENV === \"development\",\n  logging: process.env.NODE_ENV !== \"development\",\n  entities: [User, Bank, Account, Transaction],\n  migrations: [migrationsPath + \"/*{.ts,.js}\"],\n  migrationsTableName: \"migrations\",\n});\n","import fs from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\nimport { NODE_ENV } from \"./enums\";\n\nexport class ConfigSchemas {\n  private readonly databasePathSchema = z\n    .string()\n    .min(1)\n    .refine((val) => val.endsWith(\".sqlite\"), {\n      message: \"Database path must end with .sqlite\",\n    })\n    .refine((val) => fs.existsSync(path.resolve(val)), {\n      message: \"Database file does not exist\",\n    });\n\n  public readonly envSchema = z.object({\n    DATABASE_PATH: this.databasePathSchema.default(\"db.sqlite\"),\n    APP_PORT: z.coerce.number().default(8080),\n    APP_HOST: z.string().optional().default(\"0.0.0.0\"),\n    JWT_SECRET: z.string().optional().default(\"keyboard cat\"),\n    NODE_ENV: z.nativeEnum(NODE_ENV).default(NODE_ENV.DEV),\n    SESSION_SECRET: z.string().optional().default(\"keyboard cat\"),\n    OPENAI_API_KEY: z.string().default(\"\"),\n  });\n}\n","export enum NODE_ENV {\n  DEV = \"development\",\n  PROD = \"production\",\n  TEST = \"test\",\n}\n","import winston from \"winston\";\n\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf((info) => {\n    const { timestamp, level, message, stack, ...meta } = info;\n\n    const levelColors: Record<string, string> = {\n      error: \"\\x1b[31m\", // red\n      warn: \"\\x1b[33m\", // yellow\n      info: \"\\x1b[32m\", // green\n      debug: \"\\x1b[36m\", // cyan\n      verbose: \"\\x1b[35m\", // magenta\n    };\n\n    const resetColor = \"\\x1b[0m\";\n    const levelColor = levelColors[level] || \"\";\n\n    let logMessage = `${timestamp} [${levelColor}${level.toUpperCase()}${resetColor}]: ${message}`;\n\n    if (stack) {\n      logMessage += `\\n${stack}`;\n    }\n\n    const excludeFields = [\"timestamp\", \"level\", \"message\", \"stack\"];\n    const filteredMeta = Object.keys(meta)\n      .filter((key) => !excludeFields.includes(key))\n      .reduce(\n        (obj, key) => {\n          obj[key] = meta[key];\n          return obj;\n        },\n        {} as Record<string, unknown>,\n      );\n\n    const metaKeys = Object.keys(filteredMeta);\n    if (metaKeys.length > 0) {\n      const metaString = JSON.stringify(filteredMeta, null, 2);\n      logMessage += `\\n${metaString}`;\n    }\n\n    return logMessage;\n  }),\n);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || (isProduction ? \"warn\" : \"debug\"),\n  defaultMeta: {\n    service: \"tech4humans\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  transports: [\n    new winston.transports.Console({\n      format: consoleFormat,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n  ],\n  exitOnError: false,\n});\n\nexport const morganStream = {\n  write: (message: string) => {\n    logger.info(message.trim(), { component: \"http\" });\n  },\n};\n\nexport const logWithContext = {\n  database: (message: string, meta?: object) => {\n    logger.info(message, { component: \"database\", ...meta });\n  },\n\n  server: (message: string, meta?: object) => {\n    logger.info(message, { component: \"server\", ...meta });\n  },\n\n  auth: (message: string, meta?: object) => {\n    logger.info(message, { component: \"auth\", ...meta });\n  },\n\n  api: (message: string, meta?: object) => {\n    logger.info(message, { component: \"api\", ...meta });\n  },\n\n  error: (message: string, error?: Error, meta?: object) => {\n    logger.error(message, {\n      error: error?.message,\n      stack: error?.stack,\n      ...meta,\n    });\n  },\n};\n","import { ConfigSchemas } from \"./schemas\";\nimport { logger } from \"@infrastructure/logger\";\nimport { ValidationError } from \"@errors/validation-error\";\n\nconst result = new ConfigSchemas().envSchema.safeParse(process.env);\n\nif (!result.success) {\n  throw new ValidationError(\n    \"Invalid environment variables: \" +\n      JSON.stringify(result.error?.format(), null, 2),\n  );\n} else {\n  logger.info(\"Environment variables are valid\");\n}\n\nObject.entries(result.data).forEach(([key, value]) => {\n  if (value !== undefined) {\n    process.env[key] = String(value);\n  }\n});\n","import { Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"banks\" })\nexport class Bank {\n  @PrimaryColumn({ type: \"text\", unique: true })\n  name!: string;\n\n  @OneToMany(() => Account, (account) => account.bank, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n}\n","import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\n@Entity({ name: \"accounts\" })\nexport class Account {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\", enum: AccountType, default: AccountType.CORRENTE })\n  type!: AccountType;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2, default: 0 })\n  balance!: number;\n\n  @ManyToOne(() => User, (user) => user.accounts)\n  user!: User;\n\n  @ManyToOne(() => Bank, (bank) => bank.accounts)\n  bank!: Bank;\n\n  @OneToMany(() => Transaction, (t) => t.sourceAccount)\n  transactions!: Transaction[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"users\" })\nexport class User {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\" })\n  name!: string;\n\n  @Column({ type: \"text\", unique: true })\n  email!: string;\n\n  @Column({ type: \"text\", name: \"password_hash\" })\n  passwordHash!: string;\n\n  @OneToMany(() => Account, (account) => account.user, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import {\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"transactions\" })\nexport class Transaction {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({\n    type: \"text\",\n    enum: TransactionType,\n    default: TransactionType.DEBITO,\n  })\n  type!: TransactionType;\n\n  @ManyToOne(() => Account, { nullable: true })\n  sourceAccount!: Account;\n\n  @ManyToOne(() => Account, { nullable: true })\n  destinationAccount!: Account;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2 })\n  amount!: number;\n\n  @Column({ type: \"text\", nullable: true })\n  description!: string;\n\n  @Column({ type: \"datetime\", default: () => \"CURRENT_TIMESTAMP\" })\n  transactionDate!: Date;\n}\n","import { ZodError } from \"zod\";\nimport { AddTransactionToUserRequest } from \"@useCases/transaction/add-to-a-user/request\";\nimport { AddTransactionToUserResponse } from \"@useCases/transaction/add-to-a-user/response\";\nimport { AddTransactionToUserUseCaseInterface } from \"@useCases/transaction/add-to-a-user/interfaces\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { TransactionRepositoryInterface } from \"@models/transaction/repository/interfaces\";\nimport { TransactionEntity } from \"@models/transaction/entity\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { AccountNotFoundError } from \"@errors/account/account-not-found-error\";\nimport { InsufficientFundsError } from \"@errors/transaction/insufficient-funds-error\";\nimport { InvalidTransactionTypeError } from \"@errors/transaction/invalid-transaction-type-error\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\n\nexport class AddTransactionToUserUseCase implements AddTransactionToUserUseCaseInterface {\n  constructor(\n    private readonly accountRepository: AccountRepositoryInterface,\n    private readonly transactionRepository: TransactionRepositoryInterface,\n  ) {}\n\n  public async execute(request: AddTransactionToUserRequest): Promise<AddTransactionToUserResponse> {\n    try {\n      const transaction = await AppDataSource.transaction(async (manager) => {\n        const sourceAccount = await this.accountRepository.findById(request.getSourceAccountIdVO(), manager);\n        const destinationAccount = await this.accountRepository.findById(request.getDestinationAccountIdVO(), manager);\n\n        if (!sourceAccount) {\n          throw new AccountNotFoundError(request.getSourceAccountIdVO().getValue().toString());\n        }\n        \n        if (!destinationAccount) {\n          throw new AccountNotFoundError(request.getDestinationAccountIdVO().getValue().toString());\n        }\n\n        switch (request.getType()) {\n          case TransactionType.TRANSFERENCIA:\n            if (sourceAccount.getBalance() < request.getAmount()) {\n              throw new InsufficientFundsError();\n            }\n\n            const transferAmount = request.getAmount();\n            sourceAccount.decreaseBalance(transferAmount);\n            destinationAccount.increaseBalance(transferAmount);\n            break;\n          default:\n            throw new InvalidTransactionTypeError();\n        }\n\n        await this.accountRepository.update(request.getSourceAccountIdVO(), sourceAccount, manager);\n        await this.accountRepository.update(request.getDestinationAccountIdVO(), destinationAccount, manager);\n\n        const newTransaction = TransactionEntity.create({\n          type: request.getType(),\n          amount: request.getAmount(),\n          sourceAccountId: request.getSourceAccountId(),\n          destinationAccountId: request.getDestinationAccountId(),\n          description: `\n          ${request.getType()} from ${request.getSourceAccountId()} to ${request.getDestinationAccountId()} with amount ${request.getAmount()}`,\n        });\n        \n\n        return await this.transactionRepository.create(newTransaction, manager);\n      });\n\n      return AddTransactionToUserResponse.success(transaction);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): AddTransactionToUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return AddTransactionToUserResponse.validationFailure(errors);\n    }\n\n    if (error instanceof AccountNotFoundError) {\n      return AddTransactionToUserResponse.failure(\"\", [error.message]);\n    }\n\n    if (error instanceof InsufficientFundsError) {\n      return AddTransactionToUserResponse.failure(\"\", [error.message]);\n    }\n\n    if (error instanceof InvalidTransactionTypeError) {\n      return AddTransactionToUserResponse.failure(\"\", [error.message]);\n    }\n\n    if (error instanceof Error) {\n      if (error.message.includes(\"Description must have at least 2 characters\")) {\n        return AddTransactionToUserResponse.failure(\"\", [error.message]);\n      }\n      return AddTransactionToUserResponse.failure(error.message);\n    }\n\n    return AddTransactionToUserResponse.failure(\"Unknown error occurred\");\n  }\n}","import { TransactionEntity } from \"@models/transaction/entity\";\nimport { InvalidTransactionIdError } from \"@errors/transaction/invalid-transaction-id-error\";\n\nexport class AddTransactionToUserResponse {\n  private constructor(\n    private readonly transaction: TransactionEntity | null,\n    private readonly success: boolean,\n    private readonly message: string | TransactionEntity,\n    private readonly errors: string[] \n  ) {}\n\n  public static success(transaction: TransactionEntity): AddTransactionToUserResponse {\n    return new AddTransactionToUserResponse(transaction, true, transaction, []);\n  }\n\n  public static failure(\n    message: string,\n    errors: string[] = [],\n  ): AddTransactionToUserResponse {\n    const finalErrors = errors.length > 0 ? errors : (message ? [message] : []);\n    return new AddTransactionToUserResponse(null, false, message, finalErrors);\n  }\n\n  public static validationFailure(errors: string[]): AddTransactionToUserResponse {\n    return new AddTransactionToUserResponse(null, false, \"Validation failed\", errors);\n  }\n\n  public getTransaction(): TransactionEntity {\n    if (!this.transaction) {\n      throw new InvalidTransactionIdError(\"Cannot get transaction from failed response\");\n    }\n    return this.transaction;\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string | TransactionEntity {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}","import { DomainError } from \"./domain-error\";\n\nexport class NotFoundError extends DomainError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, NotFoundError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 404;\n  }\n} ","import { NotFoundError } from \"../not-found-error\";\n\nexport class AccountNotFoundError extends NotFoundError {\n  constructor(accountId?: string) {\n    super(accountId ? `Account with ID ${accountId} not found` : 'Account not found');\n    Object.setPrototypeOf(this, AccountNotFoundError.prototype);\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InsufficientFundsError extends ValidationError {\n  constructor() {\n    super('Insufficient funds');\n    Object.setPrototypeOf(this, InsufficientFundsError.prototype);\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidTransactionTypeError extends ValidationError {\n  constructor() {\n    super('Invalid transaction type');\n    Object.setPrototypeOf(this, InvalidTransactionTypeError.prototype);\n  }\n} ","import { AddTransactionToUserRequest } from \"@useCases/transaction/add-to-a-user/request\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { TransactionRepositoryInterface } from \"@models/transaction/repository/interfaces\";\nimport { TransactionEntity } from \"@models/transaction/entity\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AddTransactionToUserUseCase } from \".\";\n\njest.mock(\"@infrastructure/datasources/databases/typeorm\");\n\ndescribe(\"AddTransactionToUserUseCase\", () => {\n  let useCase: AddTransactionToUserUseCase;\n  let mockAccountRepository: jest.Mocked<AccountRepositoryInterface>;\n  let mockTransactionRepository: jest.Mocked<TransactionRepositoryInterface>;\n  let mockManager: any;\n  let mockRequest: jest.Mocked<AddTransactionToUserRequest>;\n\n  beforeEach(() => {\n    mockAccountRepository = {\n      findById: jest.fn(),\n      update: jest.fn(),\n    } as any;\n\n    mockTransactionRepository = {\n      create: jest.fn(),\n    } as any;\n\n    mockManager = {};\n\n    mockRequest = {\n      getSourceAccountIdVO: jest.fn(),\n      getDestinationAccountIdVO: jest.fn(),\n      getType: jest.fn(),\n      getAmount: jest.fn(),\n      getSourceAccountId: jest.fn(),\n      getDestinationAccountId: jest.fn(),\n    } as any;\n\n    (AppDataSource.transaction as jest.Mock) = jest.fn().mockImplementation(\n      (callback) => callback(mockManager)\n    );\n\n    useCase = new AddTransactionToUserUseCase(\n      mockAccountRepository,\n      mockTransactionRepository\n    );\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Successful Transaction\", () => {\n    it(\"should successfully transfer money between accounts\", async () => {\n      const sourceAccountId = AccountId.create(1);\n      const destinationAccountId = AccountId.create(2);\n\n      mockRequest.getSourceAccountIdVO.mockReturnValue(sourceAccountId);\n      mockRequest.getDestinationAccountIdVO.mockReturnValue(destinationAccountId);\n      mockRequest.getType.mockReturnValue(TransactionType.TRANSFERENCIA);\n      mockRequest.getAmount.mockReturnValue(100);\n      mockRequest.getSourceAccountId.mockReturnValue(1);\n      mockRequest.getDestinationAccountId.mockReturnValue(2);\n\n      const sourceAccount = {\n        getBalance: jest.fn().mockReturnValue(500),\n        decreaseBalance: jest.fn(),\n      } as any;\n\n      const destinationAccount = {\n        increaseBalance: jest.fn(),\n      } as any;\n\n      const createdTransaction = {\n        id: \"trans-789\",\n        type: TransactionType.TRANSFERENCIA,\n        amount: 100,\n      } as any;\n\n      mockAccountRepository.findById\n        .mockResolvedValueOnce(sourceAccount)\n        .mockResolvedValueOnce(destinationAccount);\n      mockTransactionRepository.create.mockResolvedValue(createdTransaction);\n\n      const result = await useCase.execute(mockRequest);\n\n      expect(result.isSuccess()).toBe(true);\n      expect(result.getMessage()).toEqual(createdTransaction);\n      expect(mockRequest.getSourceAccountIdVO).toHaveBeenCalledTimes(2);\n      expect(mockRequest.getDestinationAccountIdVO).toHaveBeenCalledTimes(2);\n      expect(mockRequest.getType).toHaveBeenCalledTimes(3);\n      expect(mockRequest.getAmount).toHaveBeenCalledTimes(4);\n      expect(sourceAccount.decreaseBalance).toHaveBeenCalledWith(100);\n      expect(destinationAccount.increaseBalance).toHaveBeenCalledWith(100);\n      expect(mockAccountRepository.update).toHaveBeenCalledTimes(2);\n      expect(mockTransactionRepository.create).toHaveBeenCalledWith(\n        expect.any(TransactionEntity),\n        mockManager\n      );\n    });\n  });\n\n  describe(\"Account Not Found Errors\", () => {\n    it(\"should return error when source account is not found\", async () => {\n      const sourceAccountId = AccountId.create(1);\n      const destinationAccountId = AccountId.create(2);\n\n      mockRequest.getSourceAccountIdVO.mockReturnValue(sourceAccountId);\n      mockRequest.getDestinationAccountIdVO.mockReturnValue(destinationAccountId);\n\n      const destinationAccount = {} as any;\n\n      mockAccountRepository.findById\n        .mockResolvedValueOnce(null)\n        .mockResolvedValueOnce(destinationAccount);\n\n      const result = await useCase.execute(mockRequest);\n\n      expect(result.isSuccess()).toBe(false);\n      expect(result.getErrors()).toContain(`Account with ID ${sourceAccountId.getValue()} not found`);\n      expect(mockAccountRepository.update).not.toHaveBeenCalled();\n      expect(mockTransactionRepository.create).not.toHaveBeenCalled();\n    });\n\n    it(\"should return error when destination account is not found\", async () => {\n      const sourceAccountId = AccountId.create(1);\n      const destinationAccountId = AccountId.create(2);\n\n      mockRequest.getSourceAccountIdVO.mockReturnValue(sourceAccountId);\n      mockRequest.getDestinationAccountIdVO.mockReturnValue(destinationAccountId);\n\n      const sourceAccount = {} as any;\n\n      mockAccountRepository.findById\n        .mockResolvedValueOnce(sourceAccount)\n        .mockResolvedValueOnce(null);\n\n      const result = await useCase.execute(mockRequest);\n\n      expect(result.isSuccess()).toBe(false);\n      expect(result.getErrors()).toContain(\n        `Account with ID ${destinationAccountId.getValue()} not found`\n      );\n      expect(mockAccountRepository.update).not.toHaveBeenCalled();\n      expect(mockTransactionRepository.create).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Insufficient Funds Error\", () => {\n    it(\"should return error when source account has insufficient funds\", async () => {\n      const sourceAccountId = AccountId.create(1);\n      const destinationAccountId = AccountId.create(2);\n\n      mockRequest.getSourceAccountIdVO.mockReturnValue(sourceAccountId);\n      mockRequest.getDestinationAccountIdVO.mockReturnValue(destinationAccountId);\n      mockRequest.getType.mockReturnValue(TransactionType.TRANSFERENCIA);\n      mockRequest.getAmount.mockReturnValue(1000);\n\n      const sourceAccount = {\n        getBalance: jest.fn().mockReturnValue(500),\n      } as any;\n\n      const destinationAccount = {} as any;\n\n      mockAccountRepository.findById\n        .mockResolvedValueOnce(sourceAccount)\n        .mockResolvedValueOnce(destinationAccount);\n\n      const result = await useCase.execute(mockRequest);\n\n      expect(result.isSuccess()).toBe(false);\n      expect(result.getErrors()).toContain(\"Insufficient funds\");\n      expect(mockAccountRepository.update).not.toHaveBeenCalled();\n      expect(mockTransactionRepository.create).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Invalid Transaction Type Error\", () => {\n    it(\"should return error for unsupported transaction type\", async () => {\n      const sourceAccountId = AccountId.create(1);\n      const destinationAccountId = AccountId.create(2);\n\n      mockRequest.getSourceAccountIdVO.mockReturnValue(sourceAccountId);\n      mockRequest.getDestinationAccountIdVO.mockReturnValue(destinationAccountId);\n      mockRequest.getType.mockReturnValue(\"INVALID_TYPE\" as any);\n\n      const sourceAccount = {\n        getBalance: jest.fn().mockReturnValue(500),\n      } as any;\n\n      const destinationAccount = {} as any;\n\n      mockAccountRepository.findById\n        .mockResolvedValueOnce(sourceAccount)\n        .mockResolvedValueOnce(destinationAccount);\n\n      const result = await useCase.execute(mockRequest);\n\n      expect(result.isSuccess()).toBe(false);\n      expect(result.getErrors()).toContain(\"Invalid transaction type\");\n      expect(mockAccountRepository.update).not.toHaveBeenCalled();\n      expect(mockTransactionRepository.create).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Database Transaction Rollback\", () => {\n    it(\"should rollback transaction when an error occurs\", async () => {\n      const sourceAccountId = AccountId.create(1);\n      const destinationAccountId = AccountId.create(2);\n\n      mockRequest.getSourceAccountIdVO.mockReturnValue(sourceAccountId);\n      mockRequest.getDestinationAccountIdVO.mockReturnValue(destinationAccountId);\n      mockRequest.getType.mockReturnValue(TransactionType.TRANSFERENCIA);\n      mockRequest.getAmount.mockReturnValue(100);\n\n      const sourceAccount = {\n        getBalance: jest.fn().mockReturnValue(500),\n        decreaseBalance: jest.fn(),\n      } as any;\n\n      const destinationAccount = {\n        increaseBalance: jest.fn(),\n      } as any;\n\n      mockAccountRepository.findById\n        .mockResolvedValueOnce(sourceAccount)\n        .mockResolvedValueOnce(destinationAccount);\n      mockAccountRepository.update.mockRejectedValue(\n        new Error(\"Update failed\")\n      );\n\n      const result = await useCase.execute(mockRequest);\n\n      expect(result.isSuccess()).toBe(false);\n      expect(result.getErrors()).toContain(\"Update failed\");\n      expect(AppDataSource.transaction).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Edge Cases\", () => {\n    it(\"should handle zero amount transactions\", async () => {\n      const sourceAccountId = AccountId.create(1);\n      const destinationAccountId = AccountId.create(2);\n\n      mockRequest.getSourceAccountIdVO.mockReturnValue(sourceAccountId);\n      mockRequest.getDestinationAccountIdVO.mockReturnValue(destinationAccountId);\n      mockRequest.getType.mockReturnValue(TransactionType.TRANSFERENCIA);\n      mockRequest.getAmount.mockReturnValue(0);\n      mockRequest.getSourceAccountId.mockReturnValue(1);\n      mockRequest.getDestinationAccountId.mockReturnValue(2);\n\n      const sourceAccount = {\n        getBalance: jest.fn().mockReturnValue(500),\n        decreaseBalance: jest.fn(),\n      } as any;\n\n      const destinationAccount = {\n        increaseBalance: jest.fn(),\n      } as any;\n\n      const createdTransaction = {\n        id: \"trans-789\",\n        type: TransactionType.TRANSFERENCIA,\n        amount: 0,\n      } as any;\n\n      mockAccountRepository.findById\n        .mockResolvedValueOnce(sourceAccount)\n        .mockResolvedValueOnce(destinationAccount);\n      mockTransactionRepository.create.mockResolvedValue(createdTransaction);\n\n      const result = await useCase.execute(mockRequest);\n\n      expect(result.isSuccess()).toBe(true);\n      expect(sourceAccount.decreaseBalance).toHaveBeenCalledWith(0);\n      expect(destinationAccount.increaseBalance).toHaveBeenCalledWith(0);\n    });\n\n    it(\"should handle same account transfer (source equals destination)\", async () => {\n      const accountId = AccountId.create(1);\n\n      mockRequest.getSourceAccountIdVO.mockReturnValue(accountId);\n      mockRequest.getDestinationAccountIdVO.mockReturnValue(accountId);\n      mockRequest.getType.mockReturnValue(TransactionType.TRANSFERENCIA);\n      mockRequest.getAmount.mockReturnValue(100);\n      mockRequest.getSourceAccountId.mockReturnValue(1);\n      mockRequest.getDestinationAccountId.mockReturnValue(1);\n\n      const account = {\n        getBalance: jest.fn().mockReturnValue(500),\n        decreaseBalance: jest.fn(),\n        increaseBalance: jest.fn(),\n      } as any;\n\n      const createdTransaction = {\n        id: \"trans-789\",\n        type: TransactionType.TRANSFERENCIA,\n        amount: 100,\n      } as any;\n\n      mockAccountRepository.findById\n        .mockResolvedValue(account); \n      mockTransactionRepository.create.mockResolvedValue(createdTransaction);\n\n      const result = await useCase.execute(mockRequest);\n\n      expect(result.isSuccess()).toBe(true);\n      expect(account.decreaseBalance).toHaveBeenCalledWith(100);\n      expect(account.increaseBalance).toHaveBeenCalledWith(100);\n    });\n  });\n});"],"mappings":"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","names":["path","fileURLToPath","getFilename","fileURLToPath","url","getDirname","path","dirname","__dirname","AccountType","TransactionType","z","BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","z","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","z","AccountSchemas","nameSchema","z","string","min","max","regex","accountIdSchema","number","int","positive","accountTypeSchema","nativeEnum","AccountType","balanceSchema","refine","val","Number","isFinite","message","createAccountSchema","object","type","balance","userId","UserSchemas","userIdSchema","bankName","BankSchemas","accountEntitySchema","id","name","createdAt","date","z","TransactionSchemas","transactionIdSchema","z","number","int","positive","amountSchema","refine","val","Number","isFinite","message","descriptionSchema","string","min","max","accountIdSchema","AccountSchemas","transactionDateSchema","date","transactionTypeSchema","nativeEnum","TransactionType","createTransactionSchema","object","amount","description","destinationAccountId","sourceAccountId","type","transactionEntitySchema","id","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidTransactionIdError","ValidationError","constructor","id","Object","setPrototypeOf","prototype","TransactionId","value","isNewId","create","id","validatedId","TransactionSchemas","transactionIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidTransactionIdError","isNew","equals","other","toString","TransactionAmount","value","create","validatedAmount","TransactionSchemas","amountSchema","parse","getValue","equals","other","TransactionDescription","value","create","validatedDescription","TransactionSchemas","descriptionSchema","parse","getValue","equals","other","InvalidAccountIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","AccountId","value","isNewId","create","id","validatedId","AccountSchemas","accountIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidAccountIdError","isNew","equals","other","toString","TransactionTypeVo","value","create","validatedType","TransactionSchemas","transactionTypeSchema","parse","getValue","equals","other","TransactionEntity","id","amount","description","destinationAccountId","sourceAccountId","type","create","params","validatedData","TransactionSchemas","createTransactionSchema","parse","TransactionAmount","TransactionDescription","AccountId","TransactionTypeVo","createFromDatabase","transactionEntitySchema","TransactionId","getId","getDestinationAccountId","getSourceAccountId","getAmount","getDescription","getType","toPersistence","getValue","toJSON","reconstruct","fs","path","z","NODE_ENV","ConfigSchemas","databasePathSchema","z","string","min","refine","val","endsWith","message","fs","existsSync","path","resolve","envSchema","object","DATABASE_PATH","default","APP_PORT","coerce","number","APP_HOST","optional","JWT_SECRET","NODE_ENV","nativeEnum","DEV","SESSION_SECRET","OPENAI_API_KEY","winston","consoleFormat","winston","format","combine","timestamp","errors","stack","printf","info","level","message","meta","levelColors","error","warn","debug","verbose","resetColor","levelColor","logMessage","toUpperCase","excludeFields","filteredMeta","Object","keys","filter","key","includes","reduce","obj","metaKeys","length","metaString","JSON","stringify","isProduction","process","env","NODE_ENV","logger","createLogger","LOG_LEVEL","defaultMeta","service","environment","transports","Console","handleExceptions","handleRejections","exitOnError","result","ConfigSchemas","envSchema","safeParse","process","env","success","ValidationError","JSON","stringify","error","format","logger","info","Object","entries","data","forEach","key","value","undefined","String","Entity","OneToMany","PrimaryColumn","Entity","PrimaryGeneratedColumn","Column","ManyToOne","OneToMany","CreateDateColumn","Column","CreateDateColumn","Entity","OneToMany","PrimaryGeneratedColumn","User","id","name","email","passwordHash","accounts","createdAt","type","unique","Account","account","user","onDelete","Column","Entity","ManyToOne","PrimaryGeneratedColumn","Transaction","id","type","sourceAccount","destinationAccount","amount","description","transactionDate","enum","TransactionType","default","DEBITO","Account","nullable","precision","scale","name","Account","id","type","balance","user","bank","transactions","createdAt","enum","AccountType","default","CORRENTE","precision","scale","User","accounts","Bank","Transaction","t","sourceAccount","name","Bank","name","accounts","type","unique","Account","account","bank","onDelete","path","DataSource","migrationsPath","path","resolve","__dirname","AppDataSource","DataSource","type","database","process","env","DATABASE_PATH","synchronize","NODE_ENV","logging","entities","User","Bank","Account","Transaction","migrations","migrationsTableName","ZodError","AddTransactionToUserResponse","transaction","success","message","errors","failure","finalErrors","length","validationFailure","getTransaction","InvalidTransactionIdError","isSuccess","getMessage","getErrors","hasErrors","NotFoundError","DomainError","constructor","message","Object","setPrototypeOf","prototype","getStatusCode","AccountNotFoundError","NotFoundError","constructor","accountId","Object","setPrototypeOf","prototype","InsufficientFundsError","ValidationError","constructor","Object","setPrototypeOf","prototype","InvalidTransactionTypeError","ValidationError","constructor","Object","setPrototypeOf","prototype","AddTransactionToUserUseCase","constructor","accountRepository","transactionRepository","execute","request","transaction","AppDataSource","manager","sourceAccount","findById","getSourceAccountIdVO","destinationAccount","getDestinationAccountIdVO","AccountNotFoundError","getValue","toString","getType","TransactionType","TRANSFERENCIA","getBalance","getAmount","InsufficientFundsError","transferAmount","decreaseBalance","increaseBalance","InvalidTransactionTypeError","update","newTransaction","TransactionEntity","create","type","amount","sourceAccountId","getSourceAccountId","destinationAccountId","getDestinationAccountId","description","AddTransactionToUserResponse","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","failure","Error","includes","jest","mock","describe","useCase","mockAccountRepository","mockTransactionRepository","mockManager","mockRequest","beforeEach","findById","fn","update","create","getSourceAccountIdVO","getDestinationAccountIdVO","getType","getAmount","getSourceAccountId","getDestinationAccountId","AppDataSource","transaction","mockImplementation","callback","AddTransactionToUserUseCase","afterEach","clearAllMocks","it","sourceAccountId","AccountId","destinationAccountId","mockReturnValue","TransactionType","TRANSFERENCIA","sourceAccount","getBalance","decreaseBalance","destinationAccount","increaseBalance","createdTransaction","id","type","amount","mockResolvedValueOnce","mockResolvedValue","result","execute","expect","isSuccess","toBe","getMessage","toEqual","toHaveBeenCalledTimes","toHaveBeenCalledWith","any","TransactionEntity","getErrors","toContain","getValue","not","toHaveBeenCalled","mockRejectedValue","Error","accountId","account"]}