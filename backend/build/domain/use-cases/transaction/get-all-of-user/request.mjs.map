{"version":3,"sources":["../../../../../app/domain/models/user/schemas/index.ts","../../../../../app/domain/use-cases/transaction/get-all-of-user/schemas.ts","../../../../../app/domain/use-cases/transaction/get-all-of-user/request.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { UserSchemas } from \"@models/user/schemas\";\nimport z from \"zod\";\n\nexport class GetAllOfUserSchemas {\n    public static readonly requestSchema = z.object({\n        userId: UserSchemas.userIdSchema,\n    });\n\n    public static readonly httpRequestSchema = z.object({\n        params: this.requestSchema,\n    });\n}","import { GetAllOfUserSchemas } from \"@useCases/transaction/get-all-of-user/schemas\";\n\nexport class GetAllOfUserRequest {\n    constructor(\n        private readonly userId: number,\n    ) {}\n\n    public static createFromRaw(raw: unknown): GetAllOfUserRequest {\n        const parsed = GetAllOfUserSchemas.requestSchema.parse(raw);\n        return new GetAllOfUserRequest(parsed.userId);\n    }\n\n    public getUserId(): number {\n        return this.userId;\n    }\n}   "],"mappings":";;;;AAAA,SAASA,SAAS;AAEX,IAAMC,cAAN,MAAMA;EAFb,OAEaA;;;EACX,OAAuBC,cAAcC,EAClCC,OAAM,EACNC,MAAM,sBAAA,EACNC,IAAI,GAAG,mBAAA,EACPC,IAAI,KAAK,oCAAA;EAEZ,OAAuBC,aAAaL,EACjCC,OAAM,EACNE,IAAI,GAAG,sCAAA,EACPC,IAAI,KAAK,mCAAA,EACTE,MAAM,oBAAoB,0CAAA;EAE7B,OAAuBC,eAAeP,EACnCQ,OAAM,EACNC,IAAI,4BAAA,EACJC,SAAS,0BAAA;EAEZ,OAAuBC,iBAAiBX,EACrCC,OAAM,EACNE,IAAI,GAAG,wCAAA,EACPG,MACC,wEACA,0EAAA;EAGJ,OAAuBM,mBAAmBZ,EAAEa,OAAO;IACjDC,MAAM,KAAKT;IACXH,OAAO,KAAKH;IACZgB,cAAcf,EAAEC,OAAM,EAAGE,IAAI,GAAG,2BAAA;EAClC,CAAA;EAEA,OAAuBa,mBAAmBhB,EAAEa,OAAO;IACjDI,IAAI,KAAKV;IACTO,MAAM,KAAKT;IACXH,OAAO,KAAKH;IACZmB,WAAWlB,EAAEmB,KAAI;IACjBJ,cAAcf,EAAEC,OAAM,EAAGE,IAAI,GAAG,2BAAA;EAClC,CAAA;AACF;;;ACxCA,OAAOiB,QAAO;AAEP,IAAMC,sBAAN,MAAMA;EAHb,OAGaA;;;EACT,OAAuBC,gBAAgBC,GAAEC,OAAO;IAC5CC,QAAQC,YAAYC;EACxB,CAAA;EAEA,OAAuBC,oBAAoBL,GAAEC,OAAO;IAChDK,QAAQ,KAAKP;EACjB,CAAA;AACJ;;;ACTO,IAAMQ,sBAAN,MAAMA,qBAAAA;EAFb,OAEaA;;;;EACTC,YACqBC,QACnB;SADmBA,SAAAA;EAClB;EAEH,OAAcC,cAAcC,KAAmC;AAC3D,UAAMC,SAASC,oBAAoBC,cAAcC,MAAMJ,GAAAA;AACvD,WAAO,IAAIJ,qBAAoBK,OAAOH,MAAM;EAChD;EAEOO,YAAoB;AACvB,WAAO,KAAKP;EAChB;AACJ;","names":["z","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","z","GetAllOfUserSchemas","requestSchema","z","object","userId","UserSchemas","userIdSchema","httpRequestSchema","params","GetAllOfUserRequest","constructor","userId","createFromRaw","raw","parsed","GetAllOfUserSchemas","requestSchema","parse","getUserId"]}