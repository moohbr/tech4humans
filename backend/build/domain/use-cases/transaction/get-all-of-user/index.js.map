{"version":3,"sources":["../../../../../app/domain/use-cases/transaction/get-all-of-user/index.ts","../../../../../app/domain/use-cases/transaction/get-all-of-user/response.ts","../../../../../app/domain/models/user/schemas/index.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/validation-error.ts","../../../../../app/domain/errors/user/invalid-user-id-error.ts","../../../../../app/domain/models/user/value-objects/id.ts","../../../../../app/domain/use-cases/transaction/get-all-of-user/schemas.ts"],"sourcesContent":["import { ZodError } from \"zod\";\nimport { GetAllOfUserRequest } from \"@useCases/transaction/get-all-of-user/request\";\nimport { GetAllOfUserResponse } from \"@useCases/transaction/get-all-of-user/response\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { GetAllOfUserUseCaseInterface } from \"@useCases/transaction/get-all-of-user/interfaces\";\nimport { GetAllOfUserSchemas } from \"@useCases/transaction/get-all-of-user/schemas\";\nimport { TransactionRepositoryInterface } from \"@models/transaction/repository/interfaces\";\n\nexport class GetAllOfUserUseCase implements GetAllOfUserUseCaseInterface {\n  constructor(\n    private readonly transactionRepository: TransactionRepositoryInterface,\n  ) {}\n\n  public async execute(request: GetAllOfUserRequest): Promise<GetAllOfUserResponse> {\n    try {\n      const validated = GetAllOfUserSchemas.httpRequestSchema.parse({\n        params: {\n          userId: request.getUserId(),\n        },\n      });\n\n      const userId = UserId.create(validated.params.userId);\n      const transactions = await this.transactionRepository.findByUserId(userId);\n      if (!transactions || transactions.length === 0) {\n        return GetAllOfUserResponse.failure(\"No transactions found\", []);\n      }     \n\n      return GetAllOfUserResponse.success(transactions);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): GetAllOfUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`\n      );\n      return GetAllOfUserResponse.failure(\"Failed to fetch transactions\", errors);\n    }\n\n    const message = error instanceof Error ? error.message : \"Unknown error\";\n    return GetAllOfUserResponse.failure(\"Failed to fetch transactions\", [message]);\n  }\n}\n","import { TransactionEntity } from \"@models/transaction/entity\";\n\nexport class GetAllOfUserResponse {\n    constructor(\n        private readonly transactions: TransactionEntity[],\n        private readonly success: boolean,\n        private readonly message: string,\n        private readonly errors: string[],\n      ) {}\n\n      public static success(transactions: TransactionEntity[]): GetAllOfUserResponse {\n        return new GetAllOfUserResponse(transactions, true, \"Transactions fetched successfully\", []);\n      }\n\n      public static failure(message: string, errors: string[]): GetAllOfUserResponse {\n        return new GetAllOfUserResponse([], false, message, errors);\n      }\n\n      public getTransactions(): TransactionEntity[] {\n        return this.transactions;\n      }\n\n      public isSuccess(): boolean {\n        return this.success;\n      }\n\n      public getMessage(): string {\n        return this.message;\n      }\n    \n      public getErrors(): string[] {\n        return this.errors;\n      }\n    \n      public hasErrors(): boolean {\n        return this.errors.length > 0;\n      }\n}   ","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new UserId before persistence');\n    Object.setPrototypeOf(this, InvalidUserIdError.prototype);\n  }\n} ","import { UserSchemas } from \"@models/user/schemas\";\nimport { InvalidUserIdError } from \"@errors/user/invalid-user-id-error\";\n\nexport class UserId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n  public static create(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createNew(): UserId {\n    return new UserId(null, true);\n  }\n\n  public static createFromDatabase(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): UserId {\n    return new UserId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidUserIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: UserId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"new\";\n  }\n}\n","import { UserSchemas } from \"@models/user/schemas\";\nimport z from \"zod\";\n\nexport class GetAllOfUserSchemas {\n    public static readonly requestSchema = z.object({\n        userId: UserSchemas.userIdSchema,\n    });\n\n    public static readonly httpRequestSchema = z.object({\n        params: this.requestSchema,\n    });\n}"],"mappings":"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","names":["import_zod","GetAllOfUserResponse","constructor","transactions","success","message","errors","failure","getTransactions","isSuccess","getMessage","getErrors","hasErrors","length","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidUserIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","UserId","value","isNewId","create","id","validatedId","UserSchemas","userIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidUserIdError","isNew","equals","other","toString","import_zod","GetAllOfUserSchemas","requestSchema","z","object","userId","UserSchemas","userIdSchema","httpRequestSchema","params","GetAllOfUserUseCase","constructor","transactionRepository","execute","request","validated","GetAllOfUserSchemas","httpRequestSchema","parse","params","userId","getUserId","UserId","create","transactions","findByUserId","length","GetAllOfUserResponse","failure","success","error","handleError","ZodError","errors","map","err","path","join","message","Error"]}