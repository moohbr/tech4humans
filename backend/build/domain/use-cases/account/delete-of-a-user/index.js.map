{"version":3,"sources":["../../../../../app/domain/use-cases/account/delete-of-a-user/index.ts","../../../../../app/infrastructure/datasources/databases/typeorm/index.ts","../../../../../app/config/schemas.ts","../../../../../app/config/enums.ts","../../../../../app/infrastructure/logger/index.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/validation-error.ts","../../../../../app/config/index.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/bank.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/account.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/user.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/transactions.ts","../../../../../app/domain/use-cases/account/delete-of-a-user/response.ts"],"sourcesContent":["import { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { ZodError } from \"zod\";\nimport { DeleteAccountOfUserRequest } from \"@useCases/account/delete-of-a-user/request\";\nimport { DeleteAccountOfUserUseCaseInterface } from \"@useCases/account/delete-of-a-user/interfaces\";\nimport { DeleteAccountOfUserResponse } from \"@useCases/account/delete-of-a-user/response\";\n\nexport class DeleteAccountOfUserUseCase implements DeleteAccountOfUserUseCaseInterface {\n  constructor(\n    private readonly accountRepository: AccountRepositoryInterface,\n  ) {}\n\n  public async execute(request: DeleteAccountOfUserRequest): Promise<DeleteAccountOfUserResponse> {\n    try {\n      const accountId = request.getAccountIdVO();\n      \n      await AppDataSource.transaction(async (manager) => {\n        await this.accountRepository.delete(accountId, manager);\n      });\n  \n      return DeleteAccountOfUserResponse.success();\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): DeleteAccountOfUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return DeleteAccountOfUserResponse.validationFailure(errors);\n    }\n\n    const message = error instanceof Error ? error.message : \"Unknown error occurred\";\n    return DeleteAccountOfUserResponse.failure(message);\n  }\n}\n","import \"reflect-metadata\";\nimport \"@config\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport path from \"path\";\nimport { DataSource } from \"typeorm\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\nconst migrationsPath = path.resolve(__dirname, \"../../../../../migrations/\");\n\nexport const AppDataSource = new DataSource({\n  type: \"sqlite\",\n  database: process.env.DATABASE_PATH,\n  synchronize: process.env.NODE_ENV === \"development\",\n  logging: process.env.NODE_ENV !== \"development\",\n  entities: [User, Bank, Account, Transaction],\n  migrations: [migrationsPath + \"/*{.ts,.js}\"],\n  migrationsTableName: \"migrations\",\n});\n","import fs from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\nimport { NODE_ENV } from \"./enums\";\n\nexport class ConfigSchemas {\n  private readonly databasePathSchema = z\n    .string()\n    .min(1)\n    .refine((val) => val.endsWith(\".sqlite\"), {\n      message: \"Database path must end with .sqlite\",\n    })\n    .refine((val) => fs.existsSync(path.resolve(val)), {\n      message: \"Database file does not exist\",\n    });\n\n  public readonly envSchema = z.object({\n    DATABASE_PATH: this.databasePathSchema.default(\"db.sqlite\"),\n    APP_PORT: z.coerce.number().default(8080),\n    APP_HOST: z.string().optional().default(\"0.0.0.0\"),\n    JWT_SECRET: z.string().optional().default(\"keyboard cat\"),\n    NODE_ENV: z.nativeEnum(NODE_ENV).default(NODE_ENV.DEV),\n    SESSION_SECRET: z.string().optional().default(\"keyboard cat\"),\n    OPENAI_API_KEY: z.string().default(\"\"),\n  });\n}\n","export enum NODE_ENV {\n  DEV = \"development\",\n  PROD = \"production\",\n  TEST = \"test\",\n}\n","import winston from \"winston\";\n\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf((info) => {\n    const { timestamp, level, message, stack, ...meta } = info;\n\n    const levelColors: Record<string, string> = {\n      error: \"\\x1b[31m\", // red\n      warn: \"\\x1b[33m\", // yellow\n      info: \"\\x1b[32m\", // green\n      debug: \"\\x1b[36m\", // cyan\n      verbose: \"\\x1b[35m\", // magenta\n    };\n\n    const resetColor = \"\\x1b[0m\";\n    const levelColor = levelColors[level] || \"\";\n\n    let logMessage = `${timestamp} [${levelColor}${level.toUpperCase()}${resetColor}]: ${message}`;\n\n    if (stack) {\n      logMessage += `\\n${stack}`;\n    }\n\n    const excludeFields = [\"timestamp\", \"level\", \"message\", \"stack\"];\n    const filteredMeta = Object.keys(meta)\n      .filter((key) => !excludeFields.includes(key))\n      .reduce(\n        (obj, key) => {\n          obj[key] = meta[key];\n          return obj;\n        },\n        {} as Record<string, unknown>,\n      );\n\n    const metaKeys = Object.keys(filteredMeta);\n    if (metaKeys.length > 0) {\n      const metaString = JSON.stringify(filteredMeta, null, 2);\n      logMessage += `\\n${metaString}`;\n    }\n\n    return logMessage;\n  }),\n);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || (isProduction ? \"warn\" : \"debug\"),\n  defaultMeta: {\n    service: \"tech4humans\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  transports: [\n    new winston.transports.Console({\n      format: consoleFormat,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n  ],\n  exitOnError: false,\n});\n\nexport const morganStream = {\n  write: (message: string) => {\n    logger.info(message.trim(), { component: \"http\" });\n  },\n};\n\nexport const logWithContext = {\n  database: (message: string, meta?: object) => {\n    logger.info(message, { component: \"database\", ...meta });\n  },\n\n  server: (message: string, meta?: object) => {\n    logger.info(message, { component: \"server\", ...meta });\n  },\n\n  auth: (message: string, meta?: object) => {\n    logger.info(message, { component: \"auth\", ...meta });\n  },\n\n  api: (message: string, meta?: object) => {\n    logger.info(message, { component: \"api\", ...meta });\n  },\n\n  error: (message: string, error?: Error, meta?: object) => {\n    logger.error(message, {\n      error: error?.message,\n      stack: error?.stack,\n      ...meta,\n    });\n  },\n};\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ConfigSchemas } from \"./schemas\";\nimport { logger } from \"@infrastructure/logger\";\nimport { ValidationError } from \"@errors/validation-error\";\n\nconst result = new ConfigSchemas().envSchema.safeParse(process.env);\n\nif (!result.success) {\n  throw new ValidationError(\n    \"Invalid environment variables: \" +\n      JSON.stringify(result.error?.format(), null, 2),\n  );\n} else {\n  logger.info(\"Environment variables are valid\");\n}\n\nObject.entries(result.data).forEach(([key, value]) => {\n  if (value !== undefined) {\n    process.env[key] = String(value);\n  }\n});\n","import { Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"banks\" })\nexport class Bank {\n  @PrimaryColumn({ type: \"text\", unique: true })\n  name!: string;\n\n  @OneToMany(() => Account, (account) => account.bank, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n}\n","import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\n@Entity({ name: \"accounts\" })\nexport class Account {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\", enum: AccountType, default: AccountType.CORRENTE })\n  type!: AccountType;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2, default: 0 })\n  balance!: number;\n\n  @ManyToOne(() => User, (user) => user.accounts)\n  user!: User;\n\n  @ManyToOne(() => Bank, (bank) => bank.accounts)\n  bank!: Bank;\n\n  @OneToMany(() => Transaction, (t) => t.sourceAccount)\n  transactions!: Transaction[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupan√ßa\",\n  CREDITO = \"Cr√©dito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"D√©bito\",\n  CREDITO = \"Cr√©dito\",\n  TRANSFERENCIA = \"Transfer√™ncia\",\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"users\" })\nexport class User {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\" })\n  name!: string;\n\n  @Column({ type: \"text\", unique: true })\n  email!: string;\n\n  @Column({ type: \"text\", name: \"password_hash\" })\n  passwordHash!: string;\n\n  @OneToMany(() => Account, (account) => account.user, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import {\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"transactions\" })\nexport class Transaction {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({\n    type: \"text\",\n    enum: TransactionType,\n    default: TransactionType.DEBITO,\n  })\n  type!: TransactionType;\n\n  @ManyToOne(() => Account, { nullable: true })\n  sourceAccount!: Account;\n\n  @ManyToOne(() => Account, { nullable: true })\n  destinationAccount!: Account;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2 })\n  amount!: number;\n\n  @Column({ type: \"text\", nullable: true })\n  description!: string;\n\n  @Column({ type: \"datetime\", default: () => \"CURRENT_TIMESTAMP\" })\n  transactionDate!: Date;\n}\n","export class DeleteAccountOfUserResponse {\n    private constructor(\n      private readonly success: boolean,\n      private readonly error?: string,\n      private readonly validationErrors?: string[]\n    ) {}\n  \n    public static success(): DeleteAccountOfUserResponse {\n      return new DeleteAccountOfUserResponse(true);\n    }\n  \n    public static failure(error: string): DeleteAccountOfUserResponse {\n      return new DeleteAccountOfUserResponse(false, error);\n    }\n  \n    public static validationFailure(errors: string[]): DeleteAccountOfUserResponse {\n      return new DeleteAccountOfUserResponse(false, undefined, errors);\n    }\n  \n    public isSuccess(): boolean {\n      return this.success;\n    }\n  \n    public getError(): string | undefined {\n      return this.error;\n    }\n  \n    public getValidationErrors(): string[] | undefined {\n      return this.validationErrors;\n    }\n  }\n  "],"mappings":"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","names":["NODE_ENV","ConfigSchemas","databasePathSchema","z","string","min","refine","val","endsWith","message","fs","existsSync","path","resolve","envSchema","object","DATABASE_PATH","default","APP_PORT","coerce","number","APP_HOST","optional","JWT_SECRET","NODE_ENV","nativeEnum","DEV","SESSION_SECRET","OPENAI_API_KEY","consoleFormat","winston","format","combine","timestamp","errors","stack","printf","info","level","message","meta","levelColors","error","warn","debug","verbose","resetColor","levelColor","logMessage","toUpperCase","excludeFields","filteredMeta","Object","keys","filter","key","includes","reduce","obj","metaKeys","length","metaString","JSON","stringify","isProduction","process","env","NODE_ENV","logger","createLogger","LOG_LEVEL","defaultMeta","service","environment","transports","Console","handleExceptions","handleRejections","exitOnError","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","result","ConfigSchemas","envSchema","safeParse","process","env","success","ValidationError","JSON","stringify","error","format","logger","info","Object","entries","data","forEach","key","value","undefined","String","import_typeorm","import_typeorm","AccountType","TransactionType","User","id","name","email","passwordHash","accounts","createdAt","type","unique","Account","account","user","onDelete","import_typeorm","Transaction","id","type","sourceAccount","destinationAccount","amount","description","transactionDate","enum","TransactionType","default","DEBITO","Account","nullable","precision","scale","name","Account","id","type","balance","user","bank","transactions","createdAt","enum","AccountType","default","CORRENTE","precision","scale","User","accounts","Bank","Transaction","t","sourceAccount","name","Bank","name","accounts","type","unique","Account","account","bank","onDelete","import_path","import_typeorm","migrationsPath","path","resolve","__dirname","AppDataSource","DataSource","type","database","process","env","DATABASE_PATH","synchronize","NODE_ENV","logging","entities","User","Bank","Account","Transaction","migrations","migrationsTableName","import_zod","DeleteAccountOfUserResponse","success","error","validationErrors","failure","validationFailure","errors","undefined","isSuccess","getError","getValidationErrors","DeleteAccountOfUserUseCase","constructor","accountRepository","execute","request","accountId","getAccountIdVO","AppDataSource","transaction","manager","delete","DeleteAccountOfUserResponse","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error","failure"]}