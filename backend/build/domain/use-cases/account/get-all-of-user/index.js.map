{"version":3,"sources":["../../../../../app/domain/use-cases/account/get-all-of-user/index.ts","../../../../../app/domain/use-cases/account/get-all-of-user/response.ts"],"sourcesContent":["import { ZodError } from \"zod\";\nimport { GetAllAccountsOfUserRequest } from \"@useCases/account/get-all-of-user/request\";\nimport { GetAllAccountsOfUserResponse } from \"@useCases/account/get-all-of-user/response\";\nimport { GetAllAccountsOfUserUseCaseInterface } from \"@useCases/account/get-all-of-user/interfaces\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\n\nexport class GetAllAccountsOfUserUseCase implements GetAllAccountsOfUserUseCaseInterface {\n  constructor(\n    private readonly accountRepository: AccountRepositoryInterface,\n  ) {}\n\n  public async execute(request: GetAllAccountsOfUserRequest): Promise<GetAllAccountsOfUserResponse> {\n    try {\n      const userId = request.getUserIdVO();\n      \n      const accounts = await this.accountRepository.findByUserId(userId);\n      \n      if (!accounts || accounts.length === 0) {\n        return GetAllAccountsOfUserResponse.failure(\"No accounts found\");\n      }\n\n      return GetAllAccountsOfUserResponse.success(accounts);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): GetAllAccountsOfUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return GetAllAccountsOfUserResponse.validationFailure(errors);\n    }\n\n    const message = error instanceof Error ? error.message : \"Unknown error occurred\";\n    return GetAllAccountsOfUserResponse.failure(message);\n  }\n}","import { AccountEntity } from \"@models/account/entity\";\n\nexport class GetAllAccountsOfUserResponse {\n  private constructor(\n    private readonly success: boolean,\n    private readonly data?: AccountEntity[],\n    private readonly error?: string,\n    private readonly validationErrors?: string[]\n  ) {}\n\n  public static success(data: AccountEntity[]): GetAllAccountsOfUserResponse {\n    return new GetAllAccountsOfUserResponse(true, data);\n  }\n\n  public static failure(error: string): GetAllAccountsOfUserResponse {\n    return new GetAllAccountsOfUserResponse(false, undefined, error);\n  }\n\n  public static validationFailure(errors: string[]): GetAllAccountsOfUserResponse {\n    return new GetAllAccountsOfUserResponse(false, undefined, undefined, errors);\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getData(): AccountEntity[] | undefined {\n    return this.data;\n  }\n\n  public getError(): string | undefined {\n    return this.error;\n  }\n\n  public getValidationErrors(): string[] | undefined {\n    return this.validationErrors;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA,iBAAyB;;;ACElB,IAAMA,+BAAN,MAAMA,8BAAAA;EAAb,OAAaA;;;;;;;EACX,YACmBC,SACAC,MACAC,OACAC,kBACjB;SAJiBH,UAAAA;SACAC,OAAAA;SACAC,QAAAA;SACAC,mBAAAA;EAChB;EAEH,OAAcH,QAAQC,MAAqD;AACzE,WAAO,IAAIF,8BAA6B,MAAME,IAAAA;EAChD;EAEA,OAAcG,QAAQF,OAA6C;AACjE,WAAO,IAAIH,8BAA6B,OAAOM,QAAWH,KAAAA;EAC5D;EAEA,OAAcI,kBAAkBC,QAAgD;AAC9E,WAAO,IAAIR,8BAA6B,OAAOM,QAAWA,QAAWE,MAAAA;EACvE;EAEOC,YAAqB;AAC1B,WAAO,KAAKR;EACd;EAEOS,UAAuC;AAC5C,WAAO,KAAKR;EACd;EAEOS,WAA+B;AACpC,WAAO,KAAKR;EACd;EAEOS,sBAA4C;AACjD,WAAO,KAAKR;EACd;AACF;;;AD/BO,IAAMS,8BAAN,MAAMA;EANb,OAMaA;;;;EACXC,YACmBC,mBACjB;SADiBA,oBAAAA;EAChB;EAEH,MAAaC,QAAQC,SAA6E;AAChG,QAAI;AACF,YAAMC,SAASD,QAAQE,YAAW;AAElC,YAAMC,WAAW,MAAM,KAAKL,kBAAkBM,aAAaH,MAAAA;AAE3D,UAAI,CAACE,YAAYA,SAASE,WAAW,GAAG;AACtC,eAAOC,6BAA6BC,QAAQ,mBAAA;MAC9C;AAEA,aAAOD,6BAA6BE,QAAQL,QAAAA;IAC9C,SAASM,OAAO;AACd,aAAO,KAAKC,YAAYD,KAAAA;IAC1B;EACF;EAEQC,YAAYD,OAA8C;AAChE,QAAIA,iBAAiBE,qBAAU;AAC7B,YAAMC,SAASH,MAAMG,OAAOC,IAC1B,CAACC,QAAQ,GAAGA,IAAIC,KAAKC,KAAK,GAAA,CAAA,KAASF,IAAIG,OAAO,EAAE;AAElD,aAAOX,6BAA6BY,kBAAkBN,MAAAA;IACxD;AAEA,UAAMK,UAAUR,iBAAiBU,QAAQV,MAAMQ,UAAU;AACzD,WAAOX,6BAA6BC,QAAQU,OAAAA;EAC9C;AACF;","names":["GetAllAccountsOfUserResponse","success","data","error","validationErrors","failure","undefined","validationFailure","errors","isSuccess","getData","getError","getValidationErrors","GetAllAccountsOfUserUseCase","constructor","accountRepository","execute","request","userId","getUserIdVO","accounts","findByUserId","length","GetAllAccountsOfUserResponse","failure","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error"]}