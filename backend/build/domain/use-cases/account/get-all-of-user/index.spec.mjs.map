{"version":3,"sources":["../../../../../app/domain/models/user/schemas/index.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/validation-error.ts","../../../../../app/domain/errors/user/invalid-user-id-error.ts","../../../../../app/domain/models/user/value-objects/id.ts","../../../../../app/domain/use-cases/account/get-all-of-user/schemas.ts","../../../../../app/domain/use-cases/account/get-all-of-user/request.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../app/domain/models/bank/schemas/index.ts","../../../../../app/domain/models/account/schemas/index.ts","../../../../../app/domain/models/account/value-objects/type.ts","../../../../../app/domain/errors/account/invalid-balance-error.ts","../../../../../app/domain/models/account/value-objects/balance.ts","../../../../../app/domain/errors/account/invalid-account-id-error.ts","../../../../../app/domain/models/account/value-objects/id.ts","../../../../../app/domain/models/bank/value-objects/name.ts","../../../../../app/domain/models/account/entity/index.ts","../../../../../app/domain/use-cases/account/get-all-of-user/index.ts","../../../../../app/domain/use-cases/account/get-all-of-user/response.ts","../../../../../app/domain/use-cases/account/get-all-of-user/index.spec.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new UserId before persistence');\n    Object.setPrototypeOf(this, InvalidUserIdError.prototype);\n  }\n} ","import { UserSchemas } from \"@models/user/schemas\";\nimport { InvalidUserIdError } from \"@errors/user/invalid-user-id-error\";\n\nexport class UserId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n  public static create(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createNew(): UserId {\n    return new UserId(null, true);\n  }\n\n  public static createFromDatabase(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): UserId {\n    return new UserId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidUserIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: UserId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"new\";\n  }\n}\n","import { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class GetAllAccountsOfUserSchemas {\n  public static readonly requestSchema = z.object({\n    userId: UserSchemas.userIdSchema,\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    params: this.requestSchema,\n  });\n}\n","import { UserId } from \"@models/user/value-objects/id\";\nimport { GetAllAccountsOfUserSchemas } from \"@useCases/account/get-all-of-user/schemas\";\n\nexport class GetAllAccountsOfUserRequest {\n  constructor(\n    private readonly userId: UserId\n  ) {}\n\n  public getUserId(): number {\n    return this.userId.getValue();\n  }\n\n  public getUserIdVO(): UserId {\n    return this.userId;\n  }\n\n  public static createFromRaw(raw: unknown): GetAllAccountsOfUserRequest {\n    const parsed = GetAllAccountsOfUserSchemas.httpRequestSchema.parse(raw);\n    return new GetAllAccountsOfUserRequest(\n      UserId.create(parsed.params.userId)\n    );\n  }\n}","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupança\",\n  CREDITO = \"Crédito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"Débito\",\n  CREDITO = \"Crédito\",\n  TRANSFERENCIA = \"Transferência\",\n}\n","import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AccountSchemas {\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly accountIdSchema = z\n    .number()\n    .int(\"Account ID must be an integer\")\n    .positive(\"Account ID must be positive\");\n\n  public static readonly accountTypeSchema = z.nativeEnum(AccountType);\n\n  public static readonly balanceSchema = z\n    .number()\n    // .max(9999999999, \"Balance is too high\")\n    // .min(-9999999999, \"Balance is too low\")\n    .refine((val) => Number.isFinite(val), {\n      message: \"Balance must be a finite number\",\n    });\n\n  public static readonly createAccountSchema = z.object({\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    userId: UserSchemas.userIdSchema,\n    bankName: BankSchemas.nameSchema,\n  });\n\n  public static readonly accountEntitySchema = z.object({\n    id: this.accountIdSchema,\n    name: this.nameSchema,\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    createdAt: z.date(),\n  });\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountSchemas } from \"@models/account/schemas\";\n\nexport class AccountTypeVO {\n  private constructor(private value: AccountType) {}\n\n  public static create(type: unknown): AccountTypeVO {\n    const validatedType = AccountSchemas.accountTypeSchema.parse(type);\n    return new AccountTypeVO(validatedType);\n  }\n\n  public getValue(): AccountType {\n    return this.value;\n  }\n  \n  public setValue(value: AccountType): void {\n    this.value = value;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidBalanceError extends ValidationError {\n  constructor(value: unknown) {\n    super(`Balance must be a finite number. Got: ${value}`);\n    Object.setPrototypeOf(this, InvalidBalanceError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidBalanceError } from \"@errors/account/invalid-balance-error\";\n\nexport class AccountBalance {\n  private constructor(private value: number) {\n    if (!Number.isFinite(value)) {\n      throw new InvalidBalanceError(value);\n    }\n  }\n\n  public static create(type: unknown): AccountBalance {\n    const validatedType = AccountSchemas.balanceSchema.parse(type);\n    return new AccountBalance(validatedType);\n  }\n\n  public getValue(): number {\n    return this.value;\n  }\n\n  public isNegative(): boolean {\n    return this.value < 0;\n  }\n\n  public isPositive(): boolean {\n    return this.value > 0;\n  }\n\n  public isZero(): boolean {\n    return this.value === 0;\n  }\n\n  public increase(amount: number): void {\n    this.value += amount;\n  }\n\n  public decrease(amount: number): void {\n    this.value -= amount;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidAccountIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new AccountId before persistence');\n    Object.setPrototypeOf(this, InvalidAccountIdError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidAccountIdError } from \"@errors/account/invalid-account-id-error\";\n\nexport class AccountId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n    public static create(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createNew(): AccountId {\n    return new AccountId(null, true);\n  }\n\n  public static createFromDatabase(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): AccountId {\n    return new AccountId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidAccountIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: AccountId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"\";\n  }\n}\n","import { BankSchemas } from \"@models/bank/schemas\";\n\nexport class BankName {\n  private constructor(private readonly value: string) {}\n\n  public static create(value: string): BankName {\n    const validated = BankSchemas.nameSchema.parse(value);\n    return new BankName(validated);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: BankName): boolean {\n    return this.value === other.value;\n  }\n}","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountTypeVO } from \"@models/account/value-objects/type\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { AccountBalance } from \"@models/account/value-objects/balance\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { BankName } from \"@models/bank/value-objects/name\";\nimport { AccountRawEntity } from \"./types\";\n\nexport class AccountEntity {\n  private constructor(\n    private readonly id: AccountId,\n    private readonly type: AccountTypeVO,\n    private readonly balance: AccountBalance,\n    private readonly createdAt: Date,\n    private readonly userId: UserId,\n    private readonly bankName: BankName,\n  ) {}\n\n  public static create(\n    type: AccountType,\n    balance: number,\n    userId: number,\n    bankName: string,\n  ): AccountEntity {\n    const validated = AccountSchemas.createAccountSchema.parse({\n      type,\n      balance,\n      userId,\n      bankName,\n    });\n\n    return new AccountEntity(\n      AccountId.createNew(),\n      AccountTypeVO.create(validated.type),\n      AccountBalance.create(validated.balance),\n      new Date(),\n      UserId.create(userId),\n      BankName.create(bankName),\n    );\n  }\n\n  public static reconstruct(\n    id: number,\n    type: AccountType,\n    balance: number,\n    createdAt: Date,\n    userId: number,\n      bankName: string,\n  ): AccountEntity {\n    const validated = AccountSchemas.accountEntitySchema.parse({\n      id,\n      type,\n      balance,\n      createdAt,\n    });\n\n    return new AccountEntity(\n      AccountId.create(validated.id),\n      AccountTypeVO.create(validated.type),\n      AccountBalance.create(validated.balance),\n      validated.createdAt,\n      UserId.create(userId),\n      BankName.create(bankName),\n    );\n  }\n\n  public toPersistence(): AccountRawEntity  {\n    return {\n      id: this.id.getValue(),\n      type: this.type.getValue(),\n      balance: this.balance.getValue(),\n      createdAt: this.createdAt,\n      userId: this.userId.getValue(),\n      bankName: this.bankName.getValue(),\n    };\n  }\n\n  public toJSON(): AccountRawEntity {\n    return {\n      id: this.id.getValue(),\n      type: this.type.getValue(),\n      balance: this.balance.getValue(),\n      createdAt: this.createdAt,\n      userId: this.userId.getValue(),\n      bankName: this.bankName.getValue(),\n    };\n  }\n\n  public increaseBalance(amount: number): void {\n    this.balance.increase(amount);\n  }\n\n  public decreaseBalance(amount: number): void {\n    this.balance.decrease(amount);\n  }\n\n  public getBalance(): number {\n    return this.balance.getValue();\n  }\n\n  public getUserId(): number {\n    return this.userId.getValue();\n  }\n\n  public setType(type: AccountType): void {\n    this.type.setValue(type);\n  }\n}\n","import { ZodError } from \"zod\";\nimport { GetAllAccountsOfUserRequest } from \"@useCases/account/get-all-of-user/request\";\nimport { GetAllAccountsOfUserResponse } from \"@useCases/account/get-all-of-user/response\";\nimport { GetAllAccountsOfUserUseCaseInterface } from \"@useCases/account/get-all-of-user/interfaces\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\n\nexport class GetAllAccountsOfUserUseCase implements GetAllAccountsOfUserUseCaseInterface {\n  constructor(\n    private readonly accountRepository: AccountRepositoryInterface,\n  ) {}\n\n  public async execute(request: GetAllAccountsOfUserRequest): Promise<GetAllAccountsOfUserResponse> {\n    try {\n      const userId = request.getUserIdVO();\n      \n      const accounts = await this.accountRepository.findByUserId(userId);\n      \n      if (!accounts || accounts.length === 0) {\n        return GetAllAccountsOfUserResponse.failure(\"No accounts found\");\n      }\n\n      return GetAllAccountsOfUserResponse.success(accounts);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): GetAllAccountsOfUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return GetAllAccountsOfUserResponse.validationFailure(errors);\n    }\n\n    const message = error instanceof Error ? error.message : \"Unknown error occurred\";\n    return GetAllAccountsOfUserResponse.failure(message);\n  }\n}","import { AccountEntity } from \"@models/account/entity\";\n\nexport class GetAllAccountsOfUserResponse {\n  private constructor(\n    private readonly success: boolean,\n    private readonly data?: AccountEntity[],\n    private readonly error?: string,\n    private readonly validationErrors?: string[]\n  ) {}\n\n  public static success(data: AccountEntity[]): GetAllAccountsOfUserResponse {\n    return new GetAllAccountsOfUserResponse(true, data);\n  }\n\n  public static failure(error: string): GetAllAccountsOfUserResponse {\n    return new GetAllAccountsOfUserResponse(false, undefined, error);\n  }\n\n  public static validationFailure(errors: string[]): GetAllAccountsOfUserResponse {\n    return new GetAllAccountsOfUserResponse(false, undefined, undefined, errors);\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getData(): AccountEntity[] | undefined {\n    return this.data;\n  }\n\n  public getError(): string | undefined {\n    return this.error;\n  }\n\n  public getValidationErrors(): string[] | undefined {\n    return this.validationErrors;\n  }\n}\n","import { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { GetAllAccountsOfUserRequest } from \"@useCases/account/get-all-of-user/request\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { AccountEntity } from \"@models/account/entity\";\nimport { GetAllAccountsOfUserUseCase } from \".\";\nimport { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\n\nconst mockAccountRepository: jest.Mocked<AccountRepositoryInterface> = {\n  withTransaction: jest.fn(),\n  create: jest.fn(),\n  findByUserId: jest.fn(),\n  findById: jest.fn(),\n  update: jest.fn(),\n  delete: jest.fn(),\n};\n\ndescribe(\"GetAllAccountsOfUserUseCase\", () => {\n  const useCase = new GetAllAccountsOfUserUseCase(mockAccountRepository);\n  \n  const userId = UserId.create(1);\n  const request = new GetAllAccountsOfUserRequest(userId);\n\n  const mockAccounts = [\n    AccountEntity.create(\n      AccountType.POUPANCA, \n      1000,\n      userId.getValue(),\n      \"Bank A\",\n    ),\n    AccountEntity.create(\n      AccountType.CORRENTE,\n      2000,\n      userId.getValue(),\n      \"Bank B\",\n    )\n  ];\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it(\"should return accounts successfully when user has accounts\", async () => {\n    mockAccountRepository.findByUserId.mockResolvedValue(mockAccounts);\n\n    const response = await useCase.execute(request);\n\n    expect(response.isSuccess()).toBe(true);\n    expect(response.getData()).toEqual(mockAccounts);\n    expect(mockAccountRepository.findByUserId).toHaveBeenCalledWith(userId);\n  });\n\n  it(\"should return failure when user has no accounts (null)\", async () => {\n    mockAccountRepository.findByUserId.mockResolvedValue(null);\n\n    const response = await useCase.execute(request);\n\n    expect(response.isSuccess()).toBe(false);\n    expect(response.getError()).toMatch(/No accounts found/);\n  });\n\n  it(\"should handle validation failure for missing user ID\", async () => {\n    try {\n      const invalidRequest = GetAllAccountsOfUserRequest.createFromRaw({\n        params: {},\n      });\n      \n      fail(\"Expected validation error for missing userId\");\n      \n    } catch (error) {\n      expect(error).toBeDefined();\n    }\n  });\n});"],"mappings":"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","names":["z","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidUserIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","UserId","value","isNewId","create","id","validatedId","UserSchemas","userIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidUserIdError","isNew","equals","other","toString","z","GetAllAccountsOfUserSchemas","requestSchema","z","object","userId","UserSchemas","userIdSchema","httpRequestSchema","params","GetAllAccountsOfUserRequest","constructor","userId","getUserId","getValue","getUserIdVO","createFromRaw","raw","parsed","GetAllAccountsOfUserSchemas","httpRequestSchema","parse","UserId","create","params","AccountType","z","BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","z","AccountSchemas","nameSchema","z","string","min","max","regex","accountIdSchema","number","int","positive","accountTypeSchema","nativeEnum","AccountType","balanceSchema","refine","val","Number","isFinite","message","createAccountSchema","object","type","balance","userId","UserSchemas","userIdSchema","bankName","BankSchemas","accountEntitySchema","id","name","createdAt","date","AccountTypeVO","value","create","type","validatedType","AccountSchemas","accountTypeSchema","parse","getValue","setValue","InvalidBalanceError","ValidationError","constructor","value","Object","setPrototypeOf","prototype","AccountBalance","value","Number","isFinite","InvalidBalanceError","create","type","validatedType","AccountSchemas","balanceSchema","parse","getValue","isNegative","isPositive","isZero","increase","amount","decrease","InvalidAccountIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","AccountId","value","isNewId","create","id","validatedId","AccountSchemas","accountIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidAccountIdError","isNew","equals","other","toString","BankName","value","create","validated","BankSchemas","nameSchema","parse","getValue","equals","other","AccountEntity","id","type","balance","createdAt","userId","bankName","create","validated","AccountSchemas","createAccountSchema","parse","AccountId","createNew","AccountTypeVO","AccountBalance","Date","UserId","BankName","reconstruct","accountEntitySchema","toPersistence","getValue","toJSON","increaseBalance","amount","increase","decreaseBalance","decrease","getBalance","getUserId","setType","setValue","ZodError","GetAllAccountsOfUserResponse","success","data","error","validationErrors","failure","undefined","validationFailure","errors","isSuccess","getData","getError","getValidationErrors","GetAllAccountsOfUserUseCase","constructor","accountRepository","execute","request","userId","getUserIdVO","accounts","findByUserId","length","GetAllAccountsOfUserResponse","failure","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error","mockAccountRepository","withTransaction","jest","fn","create","findByUserId","findById","update","delete","describe","useCase","GetAllAccountsOfUserUseCase","userId","UserId","request","GetAllAccountsOfUserRequest","mockAccounts","AccountEntity","AccountType","POUPANCA","getValue","CORRENTE","beforeEach","clearAllMocks","it","mockResolvedValue","response","execute","expect","isSuccess","toBe","getData","toEqual","toHaveBeenCalledWith","getError","toMatch","invalidRequest","createFromRaw","params","fail","error","toBeDefined"]}