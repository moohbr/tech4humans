{"version":3,"sources":["../../../../../node_modules/tsup/assets/esm_shims.js","../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../app/domain/models/bank/schemas/index.ts","../../../../../app/domain/models/user/schemas/index.ts","../../../../../app/domain/models/account/schemas/index.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/validation-error.ts","../../../../../app/domain/errors/account/invalid-account-id-error.ts","../../../../../app/domain/models/account/value-objects/id.ts","../../../../../app/domain/models/account/value-objects/type.ts","../../../../../app/domain/use-cases/account/update-of-a-user/schemas.ts","../../../../../app/domain/use-cases/account/update-of-a-user/request.ts","../../../../../app/domain/errors/user/invalid-user-id-error.ts","../../../../../app/domain/models/user/value-objects/id.ts","../../../../../app/domain/errors/account/invalid-balance-error.ts","../../../../../app/domain/models/account/value-objects/balance.ts","../../../../../app/domain/models/bank/value-objects/name.ts","../../../../../app/domain/models/account/entity/index.ts","../../../../../app/domain/use-cases/account/update-of-a-user/response.ts","../../../../../app/infrastructure/datasources/databases/typeorm/index.ts","../../../../../app/config/schemas.ts","../../../../../app/config/enums.ts","../../../../../app/infrastructure/logger/index.ts","../../../../../app/config/index.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/bank.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/account.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/user.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/transactions.ts","../../../../../app/domain/errors/not-found-error.ts","../../../../../app/domain/errors/account/account-not-found-error.ts","../../../../../app/domain/use-cases/account/update-of-a-user/index.ts","../../../../../app/domain/use-cases/account/update-of-a-user/index.spec.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupança\",\n  CREDITO = \"Crédito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"Débito\",\n  CREDITO = \"Crédito\",\n  TRANSFERENCIA = \"Transferência\",\n}\n","import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AccountSchemas {\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly accountIdSchema = z\n    .number()\n    .int(\"Account ID must be an integer\")\n    .positive(\"Account ID must be positive\");\n\n  public static readonly accountTypeSchema = z.nativeEnum(AccountType);\n\n  public static readonly balanceSchema = z\n    .number()\n    // .max(9999999999, \"Balance is too high\")\n    // .min(-9999999999, \"Balance is too low\")\n    .refine((val) => Number.isFinite(val), {\n      message: \"Balance must be a finite number\",\n    });\n\n  public static readonly createAccountSchema = z.object({\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    userId: UserSchemas.userIdSchema,\n    bankName: BankSchemas.nameSchema,\n  });\n\n  public static readonly accountEntitySchema = z.object({\n    id: this.accountIdSchema,\n    name: this.nameSchema,\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    createdAt: z.date(),\n  });\n}\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidAccountIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new AccountId before persistence');\n    Object.setPrototypeOf(this, InvalidAccountIdError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidAccountIdError } from \"@errors/account/invalid-account-id-error\";\n\nexport class AccountId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n    public static create(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createNew(): AccountId {\n    return new AccountId(null, true);\n  }\n\n  public static createFromDatabase(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): AccountId {\n    return new AccountId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidAccountIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: AccountId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"\";\n  }\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountSchemas } from \"@models/account/schemas\";\n\nexport class AccountTypeVO {\n  private constructor(private value: AccountType) {}\n\n  public static create(type: unknown): AccountTypeVO {\n    const validatedType = AccountSchemas.accountTypeSchema.parse(type);\n    return new AccountTypeVO(validatedType);\n  }\n\n  public getValue(): AccountType {\n    return this.value;\n  }\n  \n  public setValue(value: AccountType): void {\n    this.value = value;\n  }\n}\n","import { AccountSchemas } from \"@models/account/schemas\";\nimport { z } from \"zod\";\n\nexport class UpdateAccountOfUserSchemas {\n  public static readonly requestSchema = z.object({\n    accountId: AccountSchemas.accountIdSchema,\n    account: z.object({\n      type: AccountSchemas.accountTypeSchema.optional(),\n    }),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    params: z.object({\n      accountId: AccountSchemas.accountIdSchema,\n    }),\n    body: this.requestSchema,\n  });\n}\n","import { AccountId } from \"@models/account/value-objects/id\";\nimport { AccountTypeVO } from \"@models/account/value-objects/type\";\nimport { UpdateAccountOfUserSchemas } from \"@useCases/account/update-of-a-user/schemas\";\n\nexport class UpdateAccountOfUserRequest {\n  constructor(\n    private readonly accountId: AccountId,\n    private readonly accountType?: AccountTypeVO,\n  ) {}\n\n  public getAccountId(): number {\n    return this.accountId.getValue();\n  }\n\n  public getAccountIdVO(): AccountId {\n    return this.accountId;\n  }\n\n  public getAccountType(): AccountTypeVO {\n    if (!this.accountType) {\n      throw new Error(\"Account type not provided\");\n    }\n    return this.accountType;\n  }\n\n  public hasAccountType(): boolean {\n    return this.accountType !== undefined;\n  }\n\n  public static createFromRaw(raw: unknown): UpdateAccountOfUserRequest {\n    const parsed = UpdateAccountOfUserSchemas.httpRequestSchema.parse(raw);\n    \n    const accountType = parsed.body.account.type \n      ? AccountTypeVO.create(parsed.body.account.type) \n      : undefined;\n\n    return new UpdateAccountOfUserRequest(\n      AccountId.create(parsed.params.accountId),\n      accountType\n    );\n  }\n}","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new UserId before persistence');\n    Object.setPrototypeOf(this, InvalidUserIdError.prototype);\n  }\n} ","import { UserSchemas } from \"@models/user/schemas\";\nimport { InvalidUserIdError } from \"@errors/user/invalid-user-id-error\";\n\nexport class UserId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n  public static create(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createNew(): UserId {\n    return new UserId(null, true);\n  }\n\n  public static createFromDatabase(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): UserId {\n    return new UserId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidUserIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: UserId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"new\";\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidBalanceError extends ValidationError {\n  constructor(value: unknown) {\n    super(`Balance must be a finite number. Got: ${value}`);\n    Object.setPrototypeOf(this, InvalidBalanceError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidBalanceError } from \"@errors/account/invalid-balance-error\";\n\nexport class AccountBalance {\n  private constructor(private value: number) {\n    if (!Number.isFinite(value)) {\n      throw new InvalidBalanceError(value);\n    }\n  }\n\n  public static create(type: unknown): AccountBalance {\n    const validatedType = AccountSchemas.balanceSchema.parse(type);\n    return new AccountBalance(validatedType);\n  }\n\n  public getValue(): number {\n    return this.value;\n  }\n\n  public isNegative(): boolean {\n    return this.value < 0;\n  }\n\n  public isPositive(): boolean {\n    return this.value > 0;\n  }\n\n  public isZero(): boolean {\n    return this.value === 0;\n  }\n\n  public increase(amount: number): void {\n    this.value += amount;\n  }\n\n  public decrease(amount: number): void {\n    this.value -= amount;\n  }\n}\n","import { BankSchemas } from \"@models/bank/schemas\";\n\nexport class BankName {\n  private constructor(private readonly value: string) {}\n\n  public static create(value: string): BankName {\n    const validated = BankSchemas.nameSchema.parse(value);\n    return new BankName(validated);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: BankName): boolean {\n    return this.value === other.value;\n  }\n}","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountTypeVO } from \"@models/account/value-objects/type\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { AccountBalance } from \"@models/account/value-objects/balance\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { BankName } from \"@models/bank/value-objects/name\";\nimport { AccountRawEntity } from \"./types\";\n\nexport class AccountEntity {\n  private constructor(\n    private readonly id: AccountId,\n    private readonly type: AccountTypeVO,\n    private readonly balance: AccountBalance,\n    private readonly createdAt: Date,\n    private readonly userId: UserId,\n    private readonly bankName: BankName,\n  ) {}\n\n  public static create(\n    type: AccountType,\n    balance: number,\n    userId: number,\n    bankName: string,\n  ): AccountEntity {\n    const validated = AccountSchemas.createAccountSchema.parse({\n      type,\n      balance,\n      userId,\n      bankName,\n    });\n\n    return new AccountEntity(\n      AccountId.createNew(),\n      AccountTypeVO.create(validated.type),\n      AccountBalance.create(validated.balance),\n      new Date(),\n      UserId.create(userId),\n      BankName.create(bankName),\n    );\n  }\n\n  public static reconstruct(\n    id: number,\n    type: AccountType,\n    balance: number,\n    createdAt: Date,\n    userId: number,\n      bankName: string,\n  ): AccountEntity {\n    const validated = AccountSchemas.accountEntitySchema.parse({\n      id,\n      type,\n      balance,\n      createdAt,\n    });\n\n    return new AccountEntity(\n      AccountId.create(validated.id),\n      AccountTypeVO.create(validated.type),\n      AccountBalance.create(validated.balance),\n      validated.createdAt,\n      UserId.create(userId),\n      BankName.create(bankName),\n    );\n  }\n\n  public toPersistence(): AccountRawEntity  {\n    return {\n      id: this.id.getValue(),\n      type: this.type.getValue(),\n      balance: this.balance.getValue(),\n      createdAt: this.createdAt,\n      userId: this.userId.getValue(),\n      bankName: this.bankName.getValue(),\n    };\n  }\n\n  public toJSON(): AccountRawEntity {\n    return {\n      id: this.id.getValue(),\n      type: this.type.getValue(),\n      balance: this.balance.getValue(),\n      createdAt: this.createdAt,\n      userId: this.userId.getValue(),\n      bankName: this.bankName.getValue(),\n    };\n  }\n\n  public increaseBalance(amount: number): void {\n    this.balance.increase(amount);\n  }\n\n  public decreaseBalance(amount: number): void {\n    this.balance.decrease(amount);\n  }\n\n  public getBalance(): number {\n    return this.balance.getValue();\n  }\n\n  public getUserId(): number {\n    return this.userId.getValue();\n  }\n\n  public setType(type: AccountType): void {\n    this.type.setValue(type);\n  }\n}\n","import { AccountEntity } from \"@models/account/entity\";\n\nexport class UpdateAccountOfUserResponse {\n  private constructor(\n    private readonly success: boolean,\n    private readonly data?: AccountEntity,\n    private readonly error?: string,\n    private readonly validationErrors?: string[]\n  ) {}\n\n  public static success(data: AccountEntity): UpdateAccountOfUserResponse {\n    return new UpdateAccountOfUserResponse(true, data);\n  }\n\n  public static failure(error: string): UpdateAccountOfUserResponse {\n    return new UpdateAccountOfUserResponse(false, undefined, error);\n  }\n\n  public static validationFailure(errors: string[]): UpdateAccountOfUserResponse {\n    return new UpdateAccountOfUserResponse(false, undefined, undefined, errors);\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getData(): AccountEntity | undefined {\n    return this.data;\n  }\n\n  public getError(): string | undefined {\n    return this.error;\n  }\n\n  public getValidationErrors(): string[] | undefined {\n    return this.validationErrors;\n  }\n}\n","import \"reflect-metadata\";\nimport \"@config\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport path from \"path\";\nimport { DataSource } from \"typeorm\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\nconst migrationsPath = path.resolve(__dirname, \"../../../../../migrations/\");\n\nexport const AppDataSource = new DataSource({\n  type: \"sqlite\",\n  database: process.env.DATABASE_PATH,\n  synchronize: process.env.NODE_ENV === \"development\",\n  logging: process.env.NODE_ENV !== \"development\",\n  entities: [User, Bank, Account, Transaction],\n  migrations: [migrationsPath + \"/*{.ts,.js}\"],\n  migrationsTableName: \"migrations\",\n});\n","import fs from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\nimport { NODE_ENV } from \"./enums\";\n\nexport class ConfigSchemas {\n  private readonly databasePathSchema = z\n    .string()\n    .min(1)\n    .refine((val) => val.endsWith(\".sqlite\"), {\n      message: \"Database path must end with .sqlite\",\n    })\n    .refine((val) => fs.existsSync(path.resolve(val)), {\n      message: \"Database file does not exist\",\n    });\n\n  public readonly envSchema = z.object({\n    DATABASE_PATH: this.databasePathSchema.default(\"db.sqlite\"),\n    APP_PORT: z.coerce.number().default(8080),\n    APP_HOST: z.string().optional().default(\"0.0.0.0\"),\n    JWT_SECRET: z.string().optional().default(\"keyboard cat\"),\n    NODE_ENV: z.nativeEnum(NODE_ENV).default(NODE_ENV.DEV),\n    SESSION_SECRET: z.string().optional().default(\"keyboard cat\"),\n    OPENAI_API_KEY: z.string().default(\"\"),\n  });\n}\n","export enum NODE_ENV {\n  DEV = \"development\",\n  PROD = \"production\",\n  TEST = \"test\",\n}\n","import winston from \"winston\";\n\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf((info) => {\n    const { timestamp, level, message, stack, ...meta } = info;\n\n    const levelColors: Record<string, string> = {\n      error: \"\\x1b[31m\", // red\n      warn: \"\\x1b[33m\", // yellow\n      info: \"\\x1b[32m\", // green\n      debug: \"\\x1b[36m\", // cyan\n      verbose: \"\\x1b[35m\", // magenta\n    };\n\n    const resetColor = \"\\x1b[0m\";\n    const levelColor = levelColors[level] || \"\";\n\n    let logMessage = `${timestamp} [${levelColor}${level.toUpperCase()}${resetColor}]: ${message}`;\n\n    if (stack) {\n      logMessage += `\\n${stack}`;\n    }\n\n    const excludeFields = [\"timestamp\", \"level\", \"message\", \"stack\"];\n    const filteredMeta = Object.keys(meta)\n      .filter((key) => !excludeFields.includes(key))\n      .reduce(\n        (obj, key) => {\n          obj[key] = meta[key];\n          return obj;\n        },\n        {} as Record<string, unknown>,\n      );\n\n    const metaKeys = Object.keys(filteredMeta);\n    if (metaKeys.length > 0) {\n      const metaString = JSON.stringify(filteredMeta, null, 2);\n      logMessage += `\\n${metaString}`;\n    }\n\n    return logMessage;\n  }),\n);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || (isProduction ? \"warn\" : \"debug\"),\n  defaultMeta: {\n    service: \"tech4humans\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  transports: [\n    new winston.transports.Console({\n      format: consoleFormat,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n  ],\n  exitOnError: false,\n});\n\nexport const morganStream = {\n  write: (message: string) => {\n    logger.info(message.trim(), { component: \"http\" });\n  },\n};\n\nexport const logWithContext = {\n  database: (message: string, meta?: object) => {\n    logger.info(message, { component: \"database\", ...meta });\n  },\n\n  server: (message: string, meta?: object) => {\n    logger.info(message, { component: \"server\", ...meta });\n  },\n\n  auth: (message: string, meta?: object) => {\n    logger.info(message, { component: \"auth\", ...meta });\n  },\n\n  api: (message: string, meta?: object) => {\n    logger.info(message, { component: \"api\", ...meta });\n  },\n\n  error: (message: string, error?: Error, meta?: object) => {\n    logger.error(message, {\n      error: error?.message,\n      stack: error?.stack,\n      ...meta,\n    });\n  },\n};\n","import { ConfigSchemas } from \"./schemas\";\nimport { logger } from \"@infrastructure/logger\";\nimport { ValidationError } from \"@errors/validation-error\";\n\nconst result = new ConfigSchemas().envSchema.safeParse(process.env);\n\nif (!result.success) {\n  throw new ValidationError(\n    \"Invalid environment variables: \" +\n      JSON.stringify(result.error?.format(), null, 2),\n  );\n} else {\n  logger.info(\"Environment variables are valid\");\n}\n\nObject.entries(result.data).forEach(([key, value]) => {\n  if (value !== undefined) {\n    process.env[key] = String(value);\n  }\n});\n","import { Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"banks\" })\nexport class Bank {\n  @PrimaryColumn({ type: \"text\", unique: true })\n  name!: string;\n\n  @OneToMany(() => Account, (account) => account.bank, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n}\n","import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\n@Entity({ name: \"accounts\" })\nexport class Account {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\", enum: AccountType, default: AccountType.CORRENTE })\n  type!: AccountType;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2, default: 0 })\n  balance!: number;\n\n  @ManyToOne(() => User, (user) => user.accounts)\n  user!: User;\n\n  @ManyToOne(() => Bank, (bank) => bank.accounts)\n  bank!: Bank;\n\n  @OneToMany(() => Transaction, (t) => t.sourceAccount)\n  transactions!: Transaction[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"users\" })\nexport class User {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\" })\n  name!: string;\n\n  @Column({ type: \"text\", unique: true })\n  email!: string;\n\n  @Column({ type: \"text\", name: \"password_hash\" })\n  passwordHash!: string;\n\n  @OneToMany(() => Account, (account) => account.user, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import {\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"transactions\" })\nexport class Transaction {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({\n    type: \"text\",\n    enum: TransactionType,\n    default: TransactionType.DEBITO,\n  })\n  type!: TransactionType;\n\n  @ManyToOne(() => Account, { nullable: true })\n  sourceAccount!: Account;\n\n  @ManyToOne(() => Account, { nullable: true })\n  destinationAccount!: Account;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2 })\n  amount!: number;\n\n  @Column({ type: \"text\", nullable: true })\n  description!: string;\n\n  @Column({ type: \"datetime\", default: () => \"CURRENT_TIMESTAMP\" })\n  transactionDate!: Date;\n}\n","import { DomainError } from \"./domain-error\";\n\nexport class NotFoundError extends DomainError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, NotFoundError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 404;\n  }\n} ","import { NotFoundError } from \"../not-found-error\";\n\nexport class AccountNotFoundError extends NotFoundError {\n  constructor(accountId?: string) {\n    super(accountId ? `Account with ID ${accountId} not found` : 'Account not found');\n    Object.setPrototypeOf(this, AccountNotFoundError.prototype);\n  }\n} ","import { UpdateAccountOfUserRequest } from \"@useCases/account/update-of-a-user/request\";\nimport { UpdateAccountOfUserResponse } from \"@useCases/account/update-of-a-user/response\";\nimport { UpdateAccountOfUserUseCaseInterface } from \"@useCases/account/update-of-a-user/interfaces\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { AccountNotFoundError } from \"@errors/account/account-not-found-error\";\n\nexport class UpdateAccountOfUserUseCase implements UpdateAccountOfUserUseCaseInterface {\n  constructor(\n    private readonly accountRepository: AccountRepositoryInterface,\n  ) {}\n\n  public async execute(request: UpdateAccountOfUserRequest): Promise<UpdateAccountOfUserResponse> {\n    try {\n      const account = await AppDataSource.transaction(async (manager) => {\n        const account = await this.accountRepository.findById(request.getAccountIdVO(), manager);\n        \n        if (!account) {\n          throw new AccountNotFoundError(request.getAccountId().toString());\n        }\n\n        // Only update type if provided\n        if (request.hasAccountType()) {\n          account.setType(request.getAccountType().getValue());\n        }\n\n        await this.accountRepository.update(request.getAccountIdVO(), account, manager);\n        return account;\n      });\n\n      return UpdateAccountOfUserResponse.success(account);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): UpdateAccountOfUserResponse {\n    const message = error instanceof Error ? error.message : \"Unknown error occurred\";\n    return UpdateAccountOfUserResponse.failure(message);\n  }\n}","import { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { UpdateAccountOfUserRequest } from \"@useCases/account/update-of-a-user/request\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { AccountEntity } from \"@models/account/entity\";\nimport { UpdateAccountOfUserUseCase } from \".\";\nimport { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { AccountTypeVO } from \"@models/account/value-objects/type\";\n\njest.mock(\"@infrastructure/datasources/databases/typeorm\", () => ({\n  AppDataSource: {\n    transaction: jest.fn(),\n  },\n}));\n\nconst mockAccountRepository: jest.Mocked<AccountRepositoryInterface> = {\n  withTransaction: jest.fn(),\n  create: jest.fn(),\n  findByUserId: jest.fn(),\n  findById: jest.fn(),\n  update: jest.fn(),\n  delete: jest.fn(),\n};\n\ndescribe(\"UpdateAccountOfUserUseCase\", () => {\n  const useCase = new UpdateAccountOfUserUseCase(mockAccountRepository);\n  const accountId = AccountId.create(123);\n  const requestWithType = new UpdateAccountOfUserRequest(accountId, AccountTypeVO.create(AccountType.POUPANCA));\n  const requestWithoutType = new UpdateAccountOfUserRequest(accountId);\n\n  const mockAccount = AccountEntity.create(\n    AccountType.CORRENTE,\n    1000,\n    1,\n    \"Bank A\",\n  );\n\n  const mockManager = {};\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it(\"should successfully update account type\", async () => {\n    mockAccountRepository.findById.mockResolvedValue(mockAccount);\n    mockAccountRepository.update.mockResolvedValue(mockAccount);\n    (AppDataSource.transaction as jest.Mock).mockImplementation(async (callback) => {\n      return callback(mockManager);\n    });\n\n    const response = await useCase.execute(requestWithType);\n\n    expect(response.isSuccess()).toBe(true);\n    expect(response.getData()).toBe(mockAccount);\n    expect(mockAccountRepository.findById).toHaveBeenCalledWith(accountId, mockManager);\n    expect(mockAccountRepository.update).toHaveBeenCalledWith(accountId, mockAccount, mockManager);\n  });\n\n  it(\"should handle account not found\", async () => {\n    mockAccountRepository.findById.mockResolvedValue(null);\n    (AppDataSource.transaction as jest.Mock).mockImplementation(async (callback) => {\n      return callback(mockManager);\n    });\n\n    const response = await useCase.execute(requestWithType);\n\n    expect(response.isSuccess()).toBe(false);\n    expect(response.getError()).toMatch(`Account with ID ${accountId.getValue()} not found`);\n    expect(mockAccountRepository.update).not.toHaveBeenCalled();\n  });\n\n  it(\"should handle request without account type (partial update)\", async () => {\n    mockAccountRepository.findById.mockResolvedValue(mockAccount);\n    mockAccountRepository.update.mockResolvedValue(mockAccount);\n    (AppDataSource.transaction as jest.Mock).mockImplementation(async (callback) => {\n      return callback(mockManager);\n    });\n\n    const response = await useCase.execute(requestWithoutType);\n\n    expect(response.isSuccess()).toBe(true);\n    expect(response.getData()).toBe(mockAccount);\n    expect(mockAccountRepository.findById).toHaveBeenCalledWith(accountId, mockManager);\n    expect(mockAccountRepository.update).toHaveBeenCalledWith(accountId, mockAccount, mockManager);\n  });\n\n  it(\"should handle validation failure for missing account ID\", async () => {\n    try {\n      const invalidRequest = UpdateAccountOfUserRequest.createFromRaw({\n        params: {},\n        body: {\n          account: {\n            type: AccountType.POUPANCA,\n          },\n        },\n      });\n      fail(\"Expected validation error for missing accountId\");\n    } catch (error) {\n      expect(error).toBeDefined();\n    }\n  });\n\n  it(\"should handle validation failure for invalid account type\", async () => {\n    try {\n      const invalidRequest = UpdateAccountOfUserRequest.createFromRaw({\n        params: {\n          accountId: \"123\",\n        },\n        body: {\n          account: {\n            type: \"INVALID_TYPE\",\n          },\n        },\n      });\n      fail(\"Expected validation error for invalid account type\");\n    } catch (error) {\n      expect(error).toBeDefined();\n    }\n  });\n});"],"mappings":"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","names":["path","fileURLToPath","getFilename","fileURLToPath","url","getDirname","path","dirname","__dirname","AccountType","TransactionType","z","BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","z","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","z","AccountSchemas","nameSchema","z","string","min","max","regex","accountIdSchema","number","int","positive","accountTypeSchema","nativeEnum","AccountType","balanceSchema","refine","val","Number","isFinite","message","createAccountSchema","object","type","balance","userId","UserSchemas","userIdSchema","bankName","BankSchemas","accountEntitySchema","id","name","createdAt","date","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidAccountIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","AccountId","value","isNewId","create","id","validatedId","AccountSchemas","accountIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidAccountIdError","isNew","equals","other","toString","AccountTypeVO","value","create","type","validatedType","AccountSchemas","accountTypeSchema","parse","getValue","setValue","z","UpdateAccountOfUserSchemas","requestSchema","z","object","accountId","AccountSchemas","accountIdSchema","account","type","accountTypeSchema","optional","httpRequestSchema","params","body","UpdateAccountOfUserRequest","constructor","accountId","accountType","getAccountId","getValue","getAccountIdVO","getAccountType","Error","hasAccountType","undefined","createFromRaw","raw","parsed","UpdateAccountOfUserSchemas","httpRequestSchema","parse","body","account","type","AccountTypeVO","create","AccountId","params","InvalidUserIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","UserId","value","isNewId","create","id","validatedId","UserSchemas","userIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidUserIdError","isNew","equals","other","toString","InvalidBalanceError","ValidationError","constructor","value","Object","setPrototypeOf","prototype","AccountBalance","value","Number","isFinite","InvalidBalanceError","create","type","validatedType","AccountSchemas","balanceSchema","parse","getValue","isNegative","isPositive","isZero","increase","amount","decrease","BankName","value","create","validated","BankSchemas","nameSchema","parse","getValue","equals","other","AccountEntity","id","type","balance","createdAt","userId","bankName","create","validated","AccountSchemas","createAccountSchema","parse","AccountId","createNew","AccountTypeVO","AccountBalance","Date","UserId","BankName","reconstruct","accountEntitySchema","toPersistence","getValue","toJSON","increaseBalance","amount","increase","decreaseBalance","decrease","getBalance","getUserId","setType","setValue","UpdateAccountOfUserResponse","success","data","error","validationErrors","failure","undefined","validationFailure","errors","isSuccess","getData","getError","getValidationErrors","fs","path","z","NODE_ENV","ConfigSchemas","databasePathSchema","z","string","min","refine","val","endsWith","message","fs","existsSync","path","resolve","envSchema","object","DATABASE_PATH","default","APP_PORT","coerce","number","APP_HOST","optional","JWT_SECRET","NODE_ENV","nativeEnum","DEV","SESSION_SECRET","OPENAI_API_KEY","winston","consoleFormat","winston","format","combine","timestamp","errors","stack","printf","info","level","message","meta","levelColors","error","warn","debug","verbose","resetColor","levelColor","logMessage","toUpperCase","excludeFields","filteredMeta","Object","keys","filter","key","includes","reduce","obj","metaKeys","length","metaString","JSON","stringify","isProduction","process","env","NODE_ENV","logger","createLogger","LOG_LEVEL","defaultMeta","service","environment","transports","Console","handleExceptions","handleRejections","exitOnError","result","ConfigSchemas","envSchema","safeParse","process","env","success","ValidationError","JSON","stringify","error","format","logger","info","Object","entries","data","forEach","key","value","undefined","String","Entity","OneToMany","PrimaryColumn","Entity","PrimaryGeneratedColumn","Column","ManyToOne","OneToMany","CreateDateColumn","Column","CreateDateColumn","Entity","OneToMany","PrimaryGeneratedColumn","User","id","name","email","passwordHash","accounts","createdAt","type","unique","Account","account","user","onDelete","Column","Entity","ManyToOne","PrimaryGeneratedColumn","Transaction","id","type","sourceAccount","destinationAccount","amount","description","transactionDate","enum","TransactionType","default","DEBITO","Account","nullable","precision","scale","name","Account","id","type","balance","user","bank","transactions","createdAt","enum","AccountType","default","CORRENTE","precision","scale","User","accounts","Bank","Transaction","t","sourceAccount","name","Bank","name","accounts","type","unique","Account","account","bank","onDelete","path","DataSource","migrationsPath","path","resolve","__dirname","AppDataSource","DataSource","type","database","process","env","DATABASE_PATH","synchronize","NODE_ENV","logging","entities","User","Bank","Account","Transaction","migrations","migrationsTableName","NotFoundError","DomainError","constructor","message","Object","setPrototypeOf","prototype","getStatusCode","AccountNotFoundError","NotFoundError","constructor","accountId","Object","setPrototypeOf","prototype","UpdateAccountOfUserUseCase","constructor","accountRepository","execute","request","account","AppDataSource","transaction","manager","findById","getAccountIdVO","AccountNotFoundError","getAccountId","toString","hasAccountType","setType","getAccountType","getValue","update","UpdateAccountOfUserResponse","success","error","handleError","message","Error","failure","jest","mock","AppDataSource","transaction","fn","mockAccountRepository","withTransaction","create","findByUserId","findById","update","delete","describe","useCase","UpdateAccountOfUserUseCase","accountId","AccountId","requestWithType","UpdateAccountOfUserRequest","AccountTypeVO","AccountType","POUPANCA","requestWithoutType","mockAccount","AccountEntity","CORRENTE","mockManager","beforeEach","clearAllMocks","it","mockResolvedValue","mockImplementation","callback","response","execute","expect","isSuccess","toBe","getData","toHaveBeenCalledWith","getError","toMatch","getValue","not","toHaveBeenCalled","invalidRequest","createFromRaw","params","body","account","type","fail","error","toBeDefined"]}