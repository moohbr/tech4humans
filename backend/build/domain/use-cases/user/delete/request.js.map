{"version":3,"sources":["../../../../../app/domain/use-cases/user/delete/request.ts","../../../../../app/domain/use-cases/user/delete/schemas.ts","../../../../../app/domain/models/user/schemas/index.ts"],"sourcesContent":["import { DeleteUserSchemas } from \"@useCases/user/delete/schemas\";\n\nexport class DeleteUserRequest {\n  constructor(private readonly id: number) {}\n\n  public static createFromRaw(raw: unknown): DeleteUserRequest {\n    const parsed = DeleteUserSchemas.requestSchema.parse(raw);\n    return new DeleteUserRequest(parsed.id);\n  }\n\n  public getId(): number {\n    return this.id;\n  }\n}\n","import { z } from \"zod\";\nimport { UserSchemas } from \"@models/user/schemas\";\n\nexport class DeleteUserSchemas {\n  public static readonly requestSchema = z.object({\n    id: UserSchemas.userIdSchema,\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    params: this.requestSchema,\n  });\n}\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;ACAA,IAAAA,cAAkB;;;ACAlB,iBAAkB;AAEX,IAAMC,cAAN,MAAMA;EAFb,OAEaA;;;EACX,OAAuBC,cAAcC,aAClCC,OAAM,EACNC,MAAM,sBAAA,EACNC,IAAI,GAAG,mBAAA,EACPC,IAAI,KAAK,oCAAA;EAEZ,OAAuBC,aAAaL,aACjCC,OAAM,EACNE,IAAI,GAAG,sCAAA,EACPC,IAAI,KAAK,mCAAA,EACTE,MAAM,oBAAoB,0CAAA;EAE7B,OAAuBC,eAAeP,aACnCQ,OAAM,EACNC,IAAI,4BAAA,EACJC,SAAS,0BAAA;EAEZ,OAAuBC,iBAAiBX,aACrCC,OAAM,EACNE,IAAI,GAAG,wCAAA,EACPG,MACC,wEACA,0EAAA;EAGJ,OAAuBM,mBAAmBZ,aAAEa,OAAO;IACjDC,MAAM,KAAKT;IACXH,OAAO,KAAKH;IACZgB,cAAcf,aAAEC,OAAM,EAAGE,IAAI,GAAG,2BAAA;EAClC,CAAA;EAEA,OAAuBa,mBAAmBhB,aAAEa,OAAO;IACjDI,IAAI,KAAKV;IACTO,MAAM,KAAKT;IACXH,OAAO,KAAKH;IACZmB,WAAWlB,aAAEmB,KAAI;IACjBJ,cAAcf,aAAEC,OAAM,EAAGE,IAAI,GAAG,2BAAA;EAClC,CAAA;AACF;;;ADtCO,IAAMiB,oBAAN,MAAMA;EAHb,OAGaA;;;EACX,OAAuBC,gBAAgBC,cAAEC,OAAO;IAC9CC,IAAIC,YAAYC;EAClB,CAAA;EAEA,OAAuBC,oBAAoBL,cAAEC,OAAO;IAClDK,QAAQ,KAAKP;EACf,CAAA;AACF;;;ADTO,IAAMQ,oBAAN,MAAMA,mBAAAA;EAFb,OAEaA;;;;EACXC,YAA6BC,IAAY;SAAZA,KAAAA;EAAa;EAE1C,OAAcC,cAAcC,KAAiC;AAC3D,UAAMC,SAASC,kBAAkBC,cAAcC,MAAMJ,GAAAA;AACrD,WAAO,IAAIJ,mBAAkBK,OAAOH,EAAE;EACxC;EAEOO,QAAgB;AACrB,WAAO,KAAKP;EACd;AACF;","names":["import_zod","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","DeleteUserSchemas","requestSchema","z","object","id","UserSchemas","userIdSchema","httpRequestSchema","params","DeleteUserRequest","constructor","id","createFromRaw","raw","parsed","DeleteUserSchemas","requestSchema","parse","getId"]}