{"version":3,"sources":["../../../../../app/domain/use-cases/user/create/index.spec.ts","../../../../../app/domain/use-cases/user/create/index.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/validation-error.ts","../../../../../app/domain/errors/user/invalid-user-response-error.ts","../../../../../app/domain/use-cases/user/create/response.ts","../../../../../app/domain/errors/user/invalid-password-error.ts","../../../../../app/domain/models/user/value-objects/password.ts","../../../../../app/domain/errors/user/invalid-email-error.ts","../../../../../app/domain/models/user/value-objects/email.ts","../../../../../app/domain/models/user/schemas/index.ts","../../../../../app/domain/models/user/value-objects/name.ts","../../../../../app/domain/errors/user/invalid-user-id-error.ts","../../../../../app/domain/models/user/value-objects/id.ts","../../../../../app/domain/models/user/entity/index.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../app/domain/models/bank/schemas/index.ts","../../../../../app/domain/models/account/schemas/index.ts","../../../../../app/domain/models/account/value-objects/type.ts","../../../../../app/domain/errors/account/invalid-balance-error.ts","../../../../../app/domain/models/account/value-objects/balance.ts","../../../../../app/domain/errors/account/invalid-account-id-error.ts","../../../../../app/domain/models/account/value-objects/id.ts","../../../../../app/domain/models/bank/value-objects/name.ts","../../../../../app/domain/models/account/entity/index.ts","../../../../../app/infrastructure/datasources/databases/typeorm/index.ts","../../../../../app/config/schemas.ts","../../../../../app/config/enums.ts","../../../../../app/infrastructure/logger/index.ts","../../../../../app/config/index.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/bank.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/account.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/user.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/transactions.ts","../../../../../app/domain/errors/not-found-error.ts","../../../../../app/domain/errors/bank/bank-not-found-error.ts","../../../../../app/domain/errors/conflict-error.ts","../../../../../app/domain/errors/user/user-already-exists-error.ts","../../../../../app/domain/use-cases/user/create/schemas.ts","../../../../../app/domain/use-cases/user/create/request.ts"],"sourcesContent":["import { ZodError } from \"zod\";\nimport { CreateUserUseCase } from \"./index\";\nimport { CreateUserRequest } from \"./request\";\nimport { CreateUserResponse } from \"./response\";\nimport { UserRepositoryInterface } from \"@models/user/repository/interfaces\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { BankRepositoryInterface } from \"@models/bank/repository/interfaces\";\nimport { UserEntity } from \"@models/user/entity\";\nimport { AccountEntity } from \"@models/account/entity\";\nimport { BankEntity } from \"@models/bank/entity\";\nimport { UserAlreadyExistsError } from \"@errors/user/user-already-exists-error\";\nimport { BankNotFoundError } from \"@errors/bank/bank-not-found-error\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { CreateUserSchemas } from \"./schemas\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { BankName } from \"@models/bank/value-objects/name\";\n\nimport { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserName } from \"@models/user/value-objects/name\";\nimport { AccountBalance } from \"@models/account/value-objects/balance\";\nimport { AccountTypeVO } from \"@models/account/value-objects/type\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\n// Mock the dependencies\njest.mock(\"@infrastructure/datasources/databases/typeorm\");\njest.mock(\"./schemas\", () => ({\n  CreateUserSchemas: {\n    httpRequestSchema: {\n      parse: jest.fn(),\n    },\n  },\n}));\njest.mock(\"@models/user/entity\", () => ({\n  UserEntity: {\n    create: jest.fn(),\n  },\n}));\njest.mock(\"@models/account/entity\", () => ({\n  AccountEntity: {\n    create: jest.fn(),\n  },\n}));\njest.mock(\"@models/user/value-objects/id\", () => ({\n  UserId: {\n    create: jest.fn(),\n  },\n}));\njest.mock(\"@models/account/value-objects/id\", () => ({\n  AccountId: {\n    create: jest.fn(),\n  },\n}));\njest.mock(\"@models/bank/value-objects/name\", () => ({\n  BankName: {\n    create: jest.fn(),\n  },\n}));\n\ndescribe(\"CreateUserUseCase\", () => {\n  let useCase: CreateUserUseCase;\n  let userRepository: jest.Mocked<UserRepositoryInterface>;\n  let accountRepository: jest.Mocked<AccountRepositoryInterface>;\n  let bankRepository: jest.Mocked<BankRepositoryInterface>;\n  let mockRequest: CreateUserRequest;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    userRepository = {\n      exists: jest.fn(),\n      create: jest.fn(),\n      withTransaction: jest.fn().mockReturnThis(),\n    } as any;\n\n    accountRepository = {\n      create: jest.fn(),\n      withTransaction: jest.fn().mockReturnThis(),\n    } as any;\n\n    bankRepository = {\n      findByName: jest.fn(),\n    } as any;\n\n    useCase = new CreateUserUseCase(\n      userRepository,\n      accountRepository,\n      bankRepository\n    );\n\n    mockRequest = new CreateUserRequest(\n      UserName.create(\"John Doe\"),\n      UserEmail.create(\"john@example.com\"),\n      UserPassword.create(\"Password@123\"),\n      AccountTypeVO.create(AccountType.POUPANCA),\n      AccountBalance.create(1000),\n      BankName.create(\"Test Bank\")\n    );\n\n    (AppDataSource.transaction as jest.Mock).mockImplementation(async (cb) => {\n      return cb({});\n    });\n\n    (UserId.create as jest.Mock).mockReturnValue({ value: 123 });\n    (AccountId.create as jest.Mock).mockReturnValue({ value: 123 });\n    (BankName.create as jest.Mock).mockReturnValue({ value: \"Test Bank\" });\n    (UserEntity.create as jest.Mock).mockReturnValue({\n      id: { getValue: () => 123 },\n      name: { getValue: () => \"John Doe\" },\n      email: { getValue: () => \"john@example.com\" },\n      password: { getValue: () => \"password123\" },\n      createdAt: new Date(),\n      getId: jest.fn().mockReturnValue({ getValue: () => 123 }),\n      getName: jest.fn().mockReturnValue(\"John Doe\"),\n      getEmail: jest.fn().mockReturnValue(\"john@example.com\"),\n      toPersistence: jest.fn(),\n      toJSON: jest.fn(),\n    });\n    (AccountEntity.create as jest.Mock).mockReturnValue({\n      id: { getValue: () => 123 },\n      type: { getValue: () => AccountType.POUPANCA },\n      balance: { getValue: () => 1000 },\n      createdAt: new Date(),\n      userId: { getValue: () => 123 },\n      bankName: { getValue: () => \"Test Bank\" },\n      getId: jest.fn().mockReturnValue({ getValue: () => 123 }),\n      getBalance: jest.fn().mockReturnValue(1000),\n      getUserId: jest.fn().mockReturnValue(123),\n      toPersistence: jest.fn(),\n      toJSON: jest.fn(),\n      increaseBalance: jest.fn(),\n      decreaseBalance: jest.fn(),\n      setType: jest.fn(),\n    });\n  });\n\n  it(\"should successfully create a user and account\", async () => {\n    // Arrange\n    const validatedData = {\n      body: {\n        user: {\n          name: \"John Doe\",\n          email: \"john@example.com\",\n          password: \"password123\",\n        },\n        account: {\n          type: AccountType.POUPANCA,\n          balance: 1000,\n          bankName: \"Test Bank\",\n        },\n      },\n    };\n\n    (CreateUserSchemas.httpRequestSchema.parse as jest.Mock).mockReturnValue(validatedData);\n    userRepository.exists.mockResolvedValue(false);\n\n    const mockBank = {\n      name: { getValue: () => \"Test Bank\" },\n      getName: jest.fn().mockReturnValue({ getValue: () => \"Test Bank\" }),\n      toPersistence: jest.fn(),\n      toJSON: jest.fn(),\n    } as unknown as BankEntity;\n    bankRepository.findByName.mockResolvedValue(mockBank);\n\n    const mockUser = {\n      id: { getValue: () => 123 },\n      name: { getValue: () => \"John Doe\" },\n      email: { getValue: () => \"john@example.com\" },\n      password: { getValue: () => \"password123\" },\n      createdAt: new Date(),\n      getId: jest.fn().mockReturnValue({ getValue: () => 123 }),\n      getName: jest.fn().mockReturnValue(\"John Doe\"),\n      getEmail: jest.fn().mockReturnValue(\"john@example.com\"),\n      toPersistence: jest.fn(),\n      toJSON: jest.fn(),\n    } as unknown as UserEntity;\n    userRepository.create.mockResolvedValue(mockUser);\n\n    const mockAccount = {\n      id: { getValue: () => 123 },\n      type: { getValue: () => AccountType.POUPANCA },\n      balance: { getValue: () => 1000 },\n      createdAt: new Date(),\n      userId: { getValue: () => 123 },\n      bankName: { getValue: () => \"Test Bank\" },\n      toPersistence: jest.fn(),\n      toJSON: jest.fn(),\n      increaseBalance: jest.fn(),\n      decreaseBalance: jest.fn(),\n      getBalance: jest.fn().mockReturnValue(1000),\n      getUserId: jest.fn().mockReturnValue(123),\n      setType: jest.fn(),\n    } as unknown as AccountEntity;\n    accountRepository.create.mockResolvedValue(mockAccount);\n\n    // Act\n    const result = await useCase.execute(mockRequest);\n\n    // Assert\n    expect(result.isSuccess()).toBe(true);\n    expect(CreateUserSchemas.httpRequestSchema.parse).toHaveBeenCalledWith({\n      body: {\n        user: {\n          name: \"John Doe\",\n          email: \"john@example.com\",\n          password: \"password123\",\n        },\n        account: {\n          type: AccountType.POUPANCA,\n          balance: 1000,\n          bankName: \"Test Bank\",\n        },\n      },\n    });\n    expect(userRepository.exists).toHaveBeenCalled();\n    expect(BankName.create).toHaveBeenCalledWith(\"Test Bank\");\n    expect(bankRepository.findByName).toHaveBeenCalled();\n    expect(UserEntity.create).toHaveBeenCalledWith(\"John Doe\", \"john@example.com\", \"password123\");\n    expect(userRepository.create).toHaveBeenCalled();\n    expect(AccountEntity.create).toHaveBeenCalledWith(AccountType.POUPANCA, 1000, expect.any(Object), expect.any(Object));\n    expect(accountRepository.create).toHaveBeenCalled();\n  });\n\n  it(\"should fail if user already exists\", async () => {\n    // Arrange\n    const validatedData = {\n      body: {\n        user: {\n          name: \"John Doe\",\n          email: \"john@example.com\",\n          password: \"password123\",\n        },\n        account: {\n          type: AccountType.POUPANCA,\n          balance: 1000,\n          bankName: \"Test Bank\",\n        },\n      },\n    };\n\n    (CreateUserSchemas.httpRequestSchema.parse as jest.Mock).mockReturnValue(validatedData);\n    userRepository.exists.mockResolvedValue(true);\n\n    // Act\n    const result = await useCase.execute(mockRequest);\n\n    // Assert\n    expect(result.isSuccess()).toBe(false);\n    expect(result.getMessage()).toContain(\"User already exists\");\n  });\n\n  it(\"should fail if bank not found\", async () => {\n    // Arrange\n    const validatedData = {\n      body: {\n        user: {\n          name: \"John Doe\",\n          email: \"john@example.com\",\n          password: \"Password@123\",\n        },\n        account: {\n          type: AccountType.POUPANCA,\n          balance: 1000,\n          bankName: \"Test Bank\",\n        },\n      },\n    };\n\n    (CreateUserSchemas.httpRequestSchema.parse as jest.Mock).mockReturnValue(validatedData);\n    userRepository.exists.mockResolvedValue(false);\n    bankRepository.findByName.mockResolvedValue(null);\n\n    // Act\n    const result = await useCase.execute(mockRequest);\n\n    // Assert\n    expect(result.isSuccess()).toBe(false);\n    expect(result.getMessage()).toContain(\"Bank not found\");\n  });\n\n  it(\"should fail with validation error for invalid email\", async () => {\n    // Arrange\n    const invalidRequest = new CreateUserRequest(\n      UserName.create(\"John Doe\"),\n      UserEmail.create(\"invalid-email\"),\n      UserPassword.create(\"password123\"),\n      AccountTypeVO.create(AccountType.POUPANCA),\n      AccountBalance.create(1000),\n      BankName.create(\"Test Bank\")\n    );\n\n    const zodError = new ZodError([\n      {\n        code: \"invalid_string\",\n        validation: \"email\",\n        message: \"Invalid email format\",\n        path: [\"body\", \"user\", \"email\"],\n      },\n    ]);\n\n    (CreateUserSchemas.httpRequestSchema.parse as jest.Mock).mockImplementation(() => {\n      throw zodError;\n    });\n\n    // Act\n    const result = await useCase.execute(invalidRequest);\n\n    // Assert\n    expect(result.isSuccess()).toBe(false);\n    expect(result.getMessage()).toBe(\"Validation failed\");\n    expect(result.getErrors()).toContain(\"body.user.email: Invalid email format\");\n  });\n\n  it(\"should fail with validation error for invalid password\", async () => {\n    // Arrange\n    const invalidRequest = new CreateUserRequest(\n      UserName.create(\"John Doe\"),\n      UserEmail.create(\"john@example.com\"),\n      UserPassword.create(\"short\"),\n      AccountTypeVO.create(AccountType.POUPANCA),\n      AccountBalance.create(1000),\n      BankName.create(\"Test Bank\")\n    );\n\n    const zodError = new ZodError([\n      {\n        code: \"too_small\",\n        minimum: 8,\n        type: \"string\",\n        inclusive: true,\n        exact: false,\n        message: \"Password must be at least 8 characters long\",\n        path: [\"body\", \"user\", \"password\"],\n      },\n    ]);\n\n    (CreateUserSchemas.httpRequestSchema.parse as jest.Mock).mockImplementation(() => {\n      throw zodError;\n    });\n\n    // Act\n    const result = await useCase.execute(invalidRequest);\n\n    // Assert\n    expect(result.isSuccess()).toBe(false);\n    expect(result.getMessage()).toBe(\"Validation failed\");\n    expect(result.getErrors()).toContain(\"body.user.password: Password must be at least 8 characters long\");\n  });\n\n  it(\"should fail with validation error for invalid account balance\", async () => {\n    // Arrange\n    const invalidRequest = new CreateUserRequest(\n      UserName.create(\"John Doe\"),\n      UserEmail.create(\"john@example.com\"),\n      UserPassword.create(\"Password@123\"),\n      AccountTypeVO.create(AccountType.POUPANCA),\n      AccountBalance.create(-100),\n      BankName.create(\"Test Bank\")\n    );\n\n    const zodError = new ZodError([\n      {\n        code: \"too_small\",\n        minimum: 0,\n        type: \"number\",\n        inclusive: true,\n        exact: false,\n        message: \"Balance cannot be negative\",\n        path: [\"body\", \"account\", \"balance\"],\n      },\n    ]);\n\n    (CreateUserSchemas.httpRequestSchema.parse as jest.Mock).mockImplementation(() => {\n      throw zodError;\n    });\n\n    // Act\n    const result = await useCase.execute(invalidRequest);\n\n    // Assert\n    expect(result.isSuccess()).toBe(false);\n    expect(result.getMessage()).toBe(\"Validation failed\");\n    expect(result.getErrors()).toContain(\"body.account.balance: Balance cannot be negative\");\n  });\n\n  it(\"should handle unknown errors\", async () => {\n    // Arrange\n    const validatedData = {\n      body: {\n        user: {\n          name: \"John Doe\",\n          email: \"john@example.com\",\n          password: \"password123\",\n        },\n        account: {\n          type: AccountType.POUPANCA,\n          balance: 1000,\n          bankName: \"Test Bank\",\n        },\n      },\n    };\n\n    (CreateUserSchemas.httpRequestSchema.parse as jest.Mock).mockReturnValue(validatedData);\n    userRepository.exists.mockRejectedValue(new Error(\"Database connection failed\"));\n\n    // Act\n    const result = await useCase.execute(mockRequest);\n\n    // Assert\n    expect(result.isSuccess()).toBe(false);\n    expect(result.getMessage()).toBe(\"Database connection failed\");\n  });\n\n  it(\"should handle transaction rollback on error\", async () => {\n    // Arrange\n    const validatedData = {\n      body: {\n        user: {\n          name: \"John Doe\",\n          email: \"john@example.com\",\n          password: \"password123\",\n        },\n        account: {\n          type: AccountType.POUPANCA,\n          balance: 1000,\n          bankName: \"Test Bank\",\n        },\n      },\n    };\n\n    (CreateUserSchemas.httpRequestSchema.parse as jest.Mock).mockReturnValue(validatedData);\n    userRepository.exists.mockResolvedValue(false);\n\n    const mockBank = {\n      getName: () => ({ getValue: () => \"Test Bank\" }),\n    } as BankEntity;\n    bankRepository.findByName.mockResolvedValue(mockBank);\n\n    // Mock user creation success but account creation failure\n    const mockUser = {\n      id: { getValue: () => 123 },\n      name: { getValue: () => \"John Doe\" },\n      email: { getValue: () => \"john@example.com\" },\n      password: { getValue: () => \"Password@123\" },\n      createdAt: new Date(),\n      getId: jest.fn().mockReturnValue({ getValue: () => 123 }),\n      getName: jest.fn().mockReturnValue(\"John Doe\"),\n      getEmail: jest.fn().mockReturnValue(\"john@example.com\"),\n      toPersistence: jest.fn(),\n      toJSON: jest.fn(),\n    } as unknown as UserEntity;\n    userRepository.create.mockResolvedValue(mockUser);\n    accountRepository.create.mockRejectedValue(new Error(\"Account creation failed\"));\n\n    // Act\n    const result = await useCase.execute(mockRequest);\n\n    // Assert\n    expect(result.isSuccess()).toBe(false);\n    expect(result.getMessage()).toBe(\"Account creation failed\");\n    expect(AppDataSource.transaction).toHaveBeenCalled();\n  });\n});","import { ZodError } from \"zod\";\nimport { CreateUserRequest } from \"@useCases/user/create/request\";\nimport { CreateUserResponse } from \"@useCases/user/create/response\";\nimport { CreateUserUseCaseInterface } from \"@useCases/user/create/interfaces\";\nimport { UserRepositoryInterface } from \"@models/user/repository/interfaces\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { UserEntity } from \"@models/user/entity\";\nimport { AccountEntity } from \"@models/account/entity\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { BankRepositoryInterface } from \"@models/bank/repository/interfaces\";\nimport { BankName } from \"@models/bank/value-objects/name\";\nimport { BankNotFoundError } from \"@errors/bank/bank-not-found-error\";\nimport { UserAlreadyExistsError } from \"@errors/user/user-already-exists-error\";\nimport { logger } from \"@infrastructure/logger\";\n\nexport class CreateUserUseCase implements CreateUserUseCaseInterface {\n  constructor(\n    private readonly userRepository: UserRepositoryInterface,\n    private readonly accountRepository: AccountRepositoryInterface,\n    private readonly bankRepository: BankRepositoryInterface,\n  ) { }\n\n  public async execute(\n    request: CreateUserRequest,\n  ): Promise<CreateUserResponse> {\n    try {\n      logger.info(\"Creating user\", { request });\n      const name = request.getName();\n      const email = request.getEmail();\n      const password = request.getPassword();\n      const bankName = request.getBankName();\n      const accountType = request.getAccountType();\n      const accountBalance = request.getAccountBalance();\n\n      logger.info(\"Checking if user exists\", { email });\n      const userExists = await this.userRepository.exists(email);\n      if (userExists) {\n        throw new UserAlreadyExistsError(email.getValue());\n      }\n\n      logger.info(\"Hashing password\", { password });\n      const passwordVO = UserPassword.create(password.getValue());\n      const hashedPassword = await passwordVO.hash();\n\n      logger.info(\"Finding bank\", { bankName });\n      const bankNameVO = BankName.create(bankName.getValue());\n      const bank = await this.bankRepository.findByName(bankNameVO);\n      if (!bank) {\n        throw new BankNotFoundError(bankName.getValue());\n      }\n\n      logger.info(\"Creating user\", { name, email, hashedPassword });\n      const user = UserEntity.create(\n          name.getValue(),\n        email.getValue(),\n        hashedPassword.getValue(),\n      );\n\n      logger.info(\"Creating account\", { accountType, accountBalance, bankName });\n\n      await AppDataSource.transaction(async (manager) => {\n        const transactionalUserRepo = this.userRepository.withTransaction(manager);\n        const transactionalAccountRepo = this.accountRepository.withTransaction(manager);\n        await transactionalUserRepo.create(user);\n        logger.info(\"User created in transaction\");\n        const account = AccountEntity.create(\n          accountType.getValue(),\n          accountBalance.getValue(),\n          user.getId().getValue(),\n          bank.getName().getValue(),\n        );\n        logger.info(\"Account created\", { account });\n        await transactionalAccountRepo.create(account);\n        logger.info(\"Account created in transaction\");\n      });\n\n      logger.info(\"User created\");\n      return CreateUserResponse.success(user);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): CreateUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return CreateUserResponse.validationFailure(errors);\n    }\n\n    const message =\n      error instanceof Error ? error.message : \"Unknown error occurred\";\n\n    return CreateUserResponse.failure(message);\n  }\n}\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserResponseError extends ValidationError {\n  constructor() {\n    super(\"Cannot get user from failed response\");\n    Object.setPrototypeOf(this, InvalidUserResponseError.prototype);\n  }\n}","import { UserEntity } from \"@models/user/entity\";\nimport { InvalidUserResponseError } from \"@errors/user/invalid-user-response-error\";\n\nexport class CreateUserResponse {\n  private constructor(\n    private readonly user: UserEntity | null,\n    private readonly success: boolean,\n    private readonly message: string,\n    private readonly errors: string[],\n  ) {}\n\n  public static success(user: UserEntity): CreateUserResponse {\n    return new CreateUserResponse(user, true, \"User created successfully\", []);\n  }\n\n  public static failure(\n    message: string,\n    errors: string[] = [],\n  ): CreateUserResponse {\n    return new CreateUserResponse(null, false, message, errors);\n  }\n\n  public static validationFailure(errors: string[]): CreateUserResponse {\n    return new CreateUserResponse(null, false, \"Validation failed\", errors);\n  }\n\n  public getUser(): UserEntity {\n    if (!this.user) {\n      throw new InvalidUserResponseError();\n    }\n    return this.user;\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidPasswordError extends ValidationError {\n  constructor(message: string) {\n    super(message, []);\n    Object.setPrototypeOf(this, InvalidPasswordError.prototype);\n  }\n} ","import { InvalidPasswordError } from \"@errors/user/invalid-password-error\";\nimport bcrypt from \"bcryptjs\";\n\nexport class UserPassword {\n  private constructor(\n    private readonly value: string,\n    private readonly isHashed: boolean = false,\n  ) {\n    if (!isHashed) {\n      this.validatePassword();\n    }\n  }\n\n  public static create(plainPassword: string): UserPassword {\n    return new UserPassword(plainPassword, false);\n  }\n\n  public static createFromHash(hashedPassword: string): UserPassword {\n    return new UserPassword(hashedPassword, true);\n  }\n\n  public async hash(): Promise<UserPassword> {\n    if (this.isHashed) {\n      return this;\n    }\n    const hashedValue = await bcrypt.hash(this.value, 10);\n    return new UserPassword(hashedValue, true);\n  }\n\n  public async compare(plainPassword: string): Promise<boolean> {\n    if (!this.isHashed) {\n      throw new InvalidPasswordError(\"Cannot compare with unhashed password\");\n    }\n    return bcrypt.compare(plainPassword, this.value);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public isHashedPassword(): boolean {\n    return this.isHashed;\n  }\n\n  private validatePassword(): void {\n    if (\n      !this.value.match(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      )\n    ) {\n      throw new InvalidPasswordError(\n        \"Password must contain at least 8 characters with uppercase, lowercase, number and special character\",\n      );\n    }\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidEmailError extends ValidationError {\n  constructor(email: string) {\n    super(`Invalid email format: ${email}`);\n    Object.setPrototypeOf(this, InvalidEmailError.prototype);\n  }\n} ","import { InvalidEmailError } from \"@errors/user/invalid-email-error\";\n\nexport class UserEmail {\n  private constructor(private readonly value: string) {\n    this.validateEmail();\n  }\n\n  public static create(email: string): UserEmail {\n    return new UserEmail(email);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  private validateEmail(): void {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(this.value)) {\n      throw new InvalidEmailError(this.value);\n    }\n  }\n\n  public equals(other: UserEmail): boolean {\n    return this.value === other.value;\n  }\n}\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { UserSchemas } from \"@models/user/schemas\";\n\nexport class UserName {\n  private constructor(private readonly value: string) {}\n\n  public static create(name: string): UserName {\n    const validatedName = UserSchemas.nameSchema.parse(name);\n    return new UserName(validatedName);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: UserName): boolean {\n    return this.value === other.value;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new UserId before persistence');\n    Object.setPrototypeOf(this, InvalidUserIdError.prototype);\n  }\n} ","import { UserSchemas } from \"@models/user/schemas\";\nimport { InvalidUserIdError } from \"@errors/user/invalid-user-id-error\";\n\nexport class UserId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n  public static create(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createNew(): UserId {\n    return new UserId(null, true);\n  }\n\n  public static createFromDatabase(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): UserId {\n    return new UserId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidUserIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: UserId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"new\";\n  }\n}\n","import { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserName } from \"@models/user/value-objects/name\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { UserSchemas } from \"@models/user/schemas\";\n\nexport class UserEntity {\n  private constructor(\n    private readonly id: UserId,\n    private readonly name: UserName,\n    private readonly email: UserEmail,\n    private readonly createdAt: Date,\n    private readonly password: UserPassword,\n  ) {}\n\n  public static create(\n    name: string,\n    email: string,\n    passwordHash: string,\n  ): UserEntity {\n    const validatedData = UserSchemas.createUserSchema.parse({\n      name,\n      email,\n      passwordHash,\n    });\n    return new UserEntity(\n      UserId.createNew(),\n      UserName.create(validatedData.name),\n      UserEmail.create(validatedData.email),\n      new Date(),\n      UserPassword.createFromHash(passwordHash),\n    );\n  }\n\n  public static reconstruct(\n    id: number,\n    name: string,\n    email: string,\n    createdAt: Date,\n    passwordHash: string,\n  ): UserEntity {\n    const validatedData = UserSchemas.userEntitySchema.parse({\n      id,\n      name,\n      email,\n      createdAt,\n      passwordHash,\n    });\n    return new UserEntity(\n      UserId.createFromDatabase(validatedData.id),\n      UserName.create(validatedData.name),\n      UserEmail.create(validatedData.email),\n      validatedData.createdAt,\n      UserPassword.createFromHash(passwordHash),\n    );\n  }\n\n  public getId(): UserId {\n    return this.id;\n  }\n\n  public getName(): UserName {\n    return this.name;\n  }\n\n  public getEmail(): UserEmail {\n    return this.email;\n  }\n\n  public getCreatedAt(): Date {\n    return this.createdAt;\n  }\n\n  public getPasswordHash(): string {\n    return this.password.getValue();\n  }\n\n  public toPersistence(): UserRawEntity {\n    return {\n      id: this.id.isNew() ? null : this.id.getValue(),\n      name: this.name.getValue(),\n      email: this.email.getValue(),\n      createdAt: this.createdAt,  \n      passwordHash: this.password.getValue(),\n    };\n  }\n\n  public toJSON(): Omit<UserRawEntity, \"passwordHash\"> {\n    return {\n      id: this.id.isNew() ? null : this.id.getValue(),\n      name: this.name.getValue(),\n      email: this.email.getValue(),\n      createdAt: this.createdAt,\n    };\n  }\n}\n","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupança\",\n  CREDITO = \"Crédito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"Débito\",\n  CREDITO = \"Crédito\",\n  TRANSFERENCIA = \"Transferência\",\n}\n","import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AccountSchemas {\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly accountIdSchema = z\n    .number()\n    .int(\"Account ID must be an integer\")\n    .positive(\"Account ID must be positive\");\n\n  public static readonly accountTypeSchema = z.nativeEnum(AccountType);\n\n  public static readonly balanceSchema = z\n    .number()\n    // .max(9999999999, \"Balance is too high\")\n    // .min(-9999999999, \"Balance is too low\")\n    .refine((val) => Number.isFinite(val), {\n      message: \"Balance must be a finite number\",\n    });\n\n  public static readonly createAccountSchema = z.object({\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    userId: UserSchemas.userIdSchema,\n    bankName: BankSchemas.nameSchema,\n  });\n\n  public static readonly accountEntitySchema = z.object({\n    id: this.accountIdSchema,\n    name: this.nameSchema,\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    createdAt: z.date(),\n  });\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountSchemas } from \"@models/account/schemas\";\n\nexport class AccountTypeVO {\n  private constructor(private value: AccountType) {}\n\n  public static create(type: unknown): AccountTypeVO {\n    const validatedType = AccountSchemas.accountTypeSchema.parse(type);\n    return new AccountTypeVO(validatedType);\n  }\n\n  public getValue(): AccountType {\n    return this.value;\n  }\n  \n  public setValue(value: AccountType): void {\n    this.value = value;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidBalanceError extends ValidationError {\n  constructor(value: unknown) {\n    super(`Balance must be a finite number. Got: ${value}`);\n    Object.setPrototypeOf(this, InvalidBalanceError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidBalanceError } from \"@errors/account/invalid-balance-error\";\n\nexport class AccountBalance {\n  private constructor(private value: number) {\n    if (!Number.isFinite(value)) {\n      throw new InvalidBalanceError(value);\n    }\n  }\n\n  public static create(type: unknown): AccountBalance {\n    const validatedType = AccountSchemas.balanceSchema.parse(type);\n    return new AccountBalance(validatedType);\n  }\n\n  public getValue(): number {\n    return this.value;\n  }\n\n  public isNegative(): boolean {\n    return this.value < 0;\n  }\n\n  public isPositive(): boolean {\n    return this.value > 0;\n  }\n\n  public isZero(): boolean {\n    return this.value === 0;\n  }\n\n  public increase(amount: number): void {\n    this.value += amount;\n  }\n\n  public decrease(amount: number): void {\n    this.value -= amount;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidAccountIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new AccountId before persistence');\n    Object.setPrototypeOf(this, InvalidAccountIdError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidAccountIdError } from \"@errors/account/invalid-account-id-error\";\n\nexport class AccountId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n    public static create(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createNew(): AccountId {\n    return new AccountId(null, true);\n  }\n\n  public static createFromDatabase(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): AccountId {\n    return new AccountId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidAccountIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: AccountId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"\";\n  }\n}\n","import { BankSchemas } from \"@models/bank/schemas\";\n\nexport class BankName {\n  private constructor(private readonly value: string) {}\n\n  public static create(value: string): BankName {\n    const validated = BankSchemas.nameSchema.parse(value);\n    return new BankName(validated);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: BankName): boolean {\n    return this.value === other.value;\n  }\n}","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountTypeVO } from \"@models/account/value-objects/type\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { AccountBalance } from \"@models/account/value-objects/balance\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { BankName } from \"@models/bank/value-objects/name\";\nimport { AccountRawEntity } from \"./types\";\n\nexport class AccountEntity {\n  private constructor(\n    private readonly id: AccountId,\n    private readonly type: AccountTypeVO,\n    private readonly balance: AccountBalance,\n    private readonly createdAt: Date,\n    private readonly userId: UserId,\n    private readonly bankName: BankName,\n  ) {}\n\n  public static create(\n    type: AccountType,\n    balance: number,\n    userId: number,\n    bankName: string,\n  ): AccountEntity {\n    const validated = AccountSchemas.createAccountSchema.parse({\n      type,\n      balance,\n      userId,\n      bankName,\n    });\n\n    return new AccountEntity(\n      AccountId.createNew(),\n      AccountTypeVO.create(validated.type),\n      AccountBalance.create(validated.balance),\n      new Date(),\n      UserId.create(userId),\n      BankName.create(bankName),\n    );\n  }\n\n  public static reconstruct(\n    id: number,\n    type: AccountType,\n    balance: number,\n    createdAt: Date,\n    userId: number,\n      bankName: string,\n  ): AccountEntity {\n    const validated = AccountSchemas.accountEntitySchema.parse({\n      id,\n      type,\n      balance,\n      createdAt,\n    });\n\n    return new AccountEntity(\n      AccountId.create(validated.id),\n      AccountTypeVO.create(validated.type),\n      AccountBalance.create(validated.balance),\n      validated.createdAt,\n      UserId.create(userId),\n      BankName.create(bankName),\n    );\n  }\n\n  public toPersistence(): AccountRawEntity  {\n    return {\n      id: this.id.getValue(),\n      type: this.type.getValue(),\n      balance: this.balance.getValue(),\n      createdAt: this.createdAt,\n      userId: this.userId.getValue(),\n      bankName: this.bankName.getValue(),\n    };\n  }\n\n  public toJSON(): AccountRawEntity {\n    return {\n      id: this.id.getValue(),\n      type: this.type.getValue(),\n      balance: this.balance.getValue(),\n      createdAt: this.createdAt,\n      userId: this.userId.getValue(),\n      bankName: this.bankName.getValue(),\n    };\n  }\n\n  public increaseBalance(amount: number): void {\n    this.balance.increase(amount);\n  }\n\n  public decreaseBalance(amount: number): void {\n    this.balance.decrease(amount);\n  }\n\n  public getBalance(): number {\n    return this.balance.getValue();\n  }\n\n  public getUserId(): number {\n    return this.userId.getValue();\n  }\n\n  public setType(type: AccountType): void {\n    this.type.setValue(type);\n  }\n}\n","import \"reflect-metadata\";\nimport \"@config\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport path from \"path\";\nimport { DataSource } from \"typeorm\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\nconst migrationsPath = path.resolve(__dirname, \"../../../../../migrations/\");\n\nexport const AppDataSource = new DataSource({\n  type: \"sqlite\",\n  database: process.env.DATABASE_PATH,\n  synchronize: process.env.NODE_ENV === \"development\",\n  logging: process.env.NODE_ENV !== \"development\",\n  entities: [User, Bank, Account, Transaction],\n  migrations: [migrationsPath + \"/*{.ts,.js}\"],\n  migrationsTableName: \"migrations\",\n});\n","import fs from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\nimport { NODE_ENV } from \"./enums\";\n\nexport class ConfigSchemas {\n  private readonly databasePathSchema = z\n    .string()\n    .min(1)\n    .refine((val) => val.endsWith(\".sqlite\"), {\n      message: \"Database path must end with .sqlite\",\n    })\n    .refine((val) => fs.existsSync(path.resolve(val)), {\n      message: \"Database file does not exist\",\n    });\n\n  public readonly envSchema = z.object({\n    DATABASE_PATH: this.databasePathSchema.default(\"db.sqlite\"),\n    APP_PORT: z.coerce.number().default(8080),\n    APP_HOST: z.string().optional().default(\"0.0.0.0\"),\n    JWT_SECRET: z.string().optional().default(\"keyboard cat\"),\n    NODE_ENV: z.nativeEnum(NODE_ENV).default(NODE_ENV.DEV),\n    SESSION_SECRET: z.string().optional().default(\"keyboard cat\"),\n    OPENAI_API_KEY: z.string().default(\"\"),\n  });\n}\n","export enum NODE_ENV {\n  DEV = \"development\",\n  PROD = \"production\",\n  TEST = \"test\",\n}\n","import winston from \"winston\";\n\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf((info) => {\n    const { timestamp, level, message, stack, ...meta } = info;\n\n    const levelColors: Record<string, string> = {\n      error: \"\\x1b[31m\", // red\n      warn: \"\\x1b[33m\", // yellow\n      info: \"\\x1b[32m\", // green\n      debug: \"\\x1b[36m\", // cyan\n      verbose: \"\\x1b[35m\", // magenta\n    };\n\n    const resetColor = \"\\x1b[0m\";\n    const levelColor = levelColors[level] || \"\";\n\n    let logMessage = `${timestamp} [${levelColor}${level.toUpperCase()}${resetColor}]: ${message}`;\n\n    if (stack) {\n      logMessage += `\\n${stack}`;\n    }\n\n    const excludeFields = [\"timestamp\", \"level\", \"message\", \"stack\"];\n    const filteredMeta = Object.keys(meta)\n      .filter((key) => !excludeFields.includes(key))\n      .reduce(\n        (obj, key) => {\n          obj[key] = meta[key];\n          return obj;\n        },\n        {} as Record<string, unknown>,\n      );\n\n    const metaKeys = Object.keys(filteredMeta);\n    if (metaKeys.length > 0) {\n      const metaString = JSON.stringify(filteredMeta, null, 2);\n      logMessage += `\\n${metaString}`;\n    }\n\n    return logMessage;\n  }),\n);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || (isProduction ? \"warn\" : \"debug\"),\n  defaultMeta: {\n    service: \"tech4humans\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  transports: [\n    new winston.transports.Console({\n      format: consoleFormat,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n  ],\n  exitOnError: false,\n});\n\nexport const morganStream = {\n  write: (message: string) => {\n    logger.info(message.trim(), { component: \"http\" });\n  },\n};\n\nexport const logWithContext = {\n  database: (message: string, meta?: object) => {\n    logger.info(message, { component: \"database\", ...meta });\n  },\n\n  server: (message: string, meta?: object) => {\n    logger.info(message, { component: \"server\", ...meta });\n  },\n\n  auth: (message: string, meta?: object) => {\n    logger.info(message, { component: \"auth\", ...meta });\n  },\n\n  api: (message: string, meta?: object) => {\n    logger.info(message, { component: \"api\", ...meta });\n  },\n\n  error: (message: string, error?: Error, meta?: object) => {\n    logger.error(message, {\n      error: error?.message,\n      stack: error?.stack,\n      ...meta,\n    });\n  },\n};\n","import { ConfigSchemas } from \"./schemas\";\nimport { logger } from \"@infrastructure/logger\";\nimport { ValidationError } from \"@errors/validation-error\";\n\nconst result = new ConfigSchemas().envSchema.safeParse(process.env);\n\nif (!result.success) {\n  throw new ValidationError(\n    \"Invalid environment variables: \" +\n      JSON.stringify(result.error?.format(), null, 2),\n  );\n} else {\n  logger.info(\"Environment variables are valid\");\n}\n\nObject.entries(result.data).forEach(([key, value]) => {\n  if (value !== undefined) {\n    process.env[key] = String(value);\n  }\n});\n","import { Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"banks\" })\nexport class Bank {\n  @PrimaryColumn({ type: \"text\", unique: true })\n  name!: string;\n\n  @OneToMany(() => Account, (account) => account.bank, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n}\n","import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\n@Entity({ name: \"accounts\" })\nexport class Account {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\", enum: AccountType, default: AccountType.CORRENTE })\n  type!: AccountType;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2, default: 0 })\n  balance!: number;\n\n  @ManyToOne(() => User, (user) => user.accounts)\n  user!: User;\n\n  @ManyToOne(() => Bank, (bank) => bank.accounts)\n  bank!: Bank;\n\n  @OneToMany(() => Transaction, (t) => t.sourceAccount)\n  transactions!: Transaction[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"users\" })\nexport class User {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\" })\n  name!: string;\n\n  @Column({ type: \"text\", unique: true })\n  email!: string;\n\n  @Column({ type: \"text\", name: \"password_hash\" })\n  passwordHash!: string;\n\n  @OneToMany(() => Account, (account) => account.user, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import {\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"transactions\" })\nexport class Transaction {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({\n    type: \"text\",\n    enum: TransactionType,\n    default: TransactionType.DEBITO,\n  })\n  type!: TransactionType;\n\n  @ManyToOne(() => Account, { nullable: true })\n  sourceAccount!: Account;\n\n  @ManyToOne(() => Account, { nullable: true })\n  destinationAccount!: Account;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2 })\n  amount!: number;\n\n  @Column({ type: \"text\", nullable: true })\n  description!: string;\n\n  @Column({ type: \"datetime\", default: () => \"CURRENT_TIMESTAMP\" })\n  transactionDate!: Date;\n}\n","import { DomainError } from \"./domain-error\";\n\nexport class NotFoundError extends DomainError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, NotFoundError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 404;\n  }\n} ","import { NotFoundError } from \"../not-found-error\";\n\nexport class BankNotFoundError extends NotFoundError {\n  constructor(name: string) {\n    super(`Bank not found: ${name}`);\n    Object.setPrototypeOf(this, BankNotFoundError.prototype);\n  }\n}","import { DomainError } from \"./domain-error\";\n\nexport class ConflictError extends DomainError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, ConflictError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 409;\n  }\n}","import { ConflictError } from \"../conflict-error\";\n\nexport class UserAlreadyExistsError extends ConflictError {\n  constructor(email: string) {\n    super(`User already exists: ${email}`);\n    Object.setPrototypeOf(this, UserAlreadyExistsError.prototype);\n  }\n}","import { z } from \"zod\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { BankSchemas } from \"@models/bank/schemas\";\n\nexport class CreateUserSchemas {\n  public static readonly requestSchema = z.object({\n    account: z.object({\n      type: AccountSchemas.accountTypeSchema,\n      balance: AccountSchemas.balanceSchema,\n    }),\n    bank: z.object({\n      name: BankSchemas.nameSchema,\n    }),\n    user: z.object({\n      name: UserSchemas.nameSchema,\n      email: UserSchemas.emailSchema,\n      password: UserSchemas.passwordSchema,\n    }),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    body: this.requestSchema,\n  });\n}\n","import { CreateUserSchemas } from \"@useCases/user/create/schemas\";\nimport { UserName } from \"@models/user/value-objects/name\";\nimport { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { AccountBalance } from \"@models/account/value-objects/balance\";\nimport { BankName } from \"@models/bank/value-objects/name\";\nimport { AccountTypeVO } from \"@models/account/value-objects/type\";\n\nexport class CreateUserRequest {\n  constructor(\n    private readonly name: UserName,\n    private readonly email: UserEmail,\n    private readonly password: UserPassword,\n    private readonly accountType: AccountTypeVO,\n    private readonly accountBalance: AccountBalance,\n    private readonly bankName: BankName,\n  ) {}\n\n  public static createFromRaw(raw: unknown): CreateUserRequest {\n    const parsed = CreateUserSchemas.requestSchema.parse(raw);\n    return new CreateUserRequest(\n      UserName.create(parsed.user.name),\n      UserEmail.create(parsed.user.email),\n      UserPassword.create(parsed.user.password),\n      AccountTypeVO.create(parsed.account.type),\n      AccountBalance.create(parsed.account.balance),\n      BankName.create(parsed.bank.name),\n    );\n  }\n\n  public getName(): UserName {\n    return this.name;\n  }\n\n  public getEmail(): UserEmail {\n    return this.email;\n  }\n\n  public getPassword(): UserPassword {\n    return this.password;\n  }\n\n  public getAccountType(): AccountTypeVO {\n    return this.accountType;\n  }\n\n  public getAccountBalance(): AccountBalance {\n    return this.accountBalance;\n  }\n\n  public getBankName(): BankName {\n    return this.bankName;\n  }\n}\n"],"mappings":"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","names":["import_zod","import_zod","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidUserResponseError","ValidationError","constructor","Object","setPrototypeOf","prototype","CreateUserResponse","user","success","message","errors","failure","validationFailure","getUser","InvalidUserResponseError","isSuccess","getMessage","getErrors","hasErrors","length","InvalidPasswordError","ValidationError","constructor","message","Object","setPrototypeOf","prototype","UserPassword","value","isHashed","validatePassword","create","plainPassword","createFromHash","hashedPassword","hash","hashedValue","bcrypt","compare","InvalidPasswordError","getValue","isHashedPassword","match","InvalidEmailError","ValidationError","constructor","email","Object","setPrototypeOf","prototype","UserEmail","value","validateEmail","create","email","getValue","emailRegex","test","InvalidEmailError","equals","other","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","UserName","value","create","name","validatedName","UserSchemas","nameSchema","parse","getValue","equals","other","InvalidUserIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","UserId","value","isNewId","create","id","validatedId","UserSchemas","userIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidUserIdError","isNew","equals","other","toString","UserEntity","id","name","email","createdAt","password","create","passwordHash","validatedData","UserSchemas","createUserSchema","parse","UserId","createNew","UserName","UserEmail","Date","UserPassword","createFromHash","reconstruct","userEntitySchema","createFromDatabase","getId","getName","getEmail","getCreatedAt","getPasswordHash","getValue","toPersistence","isNew","toJSON","AccountType","TransactionType","import_zod","BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","import_zod","AccountSchemas","nameSchema","z","string","min","max","regex","accountIdSchema","number","int","positive","accountTypeSchema","nativeEnum","AccountType","balanceSchema","refine","val","Number","isFinite","message","createAccountSchema","object","type","balance","userId","UserSchemas","userIdSchema","bankName","BankSchemas","accountEntitySchema","id","name","createdAt","date","AccountTypeVO","value","create","type","validatedType","AccountSchemas","accountTypeSchema","parse","getValue","setValue","InvalidBalanceError","ValidationError","constructor","value","Object","setPrototypeOf","prototype","AccountBalance","value","Number","isFinite","InvalidBalanceError","create","type","validatedType","AccountSchemas","balanceSchema","parse","getValue","isNegative","isPositive","isZero","increase","amount","decrease","InvalidAccountIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","AccountId","value","isNewId","create","id","validatedId","AccountSchemas","accountIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidAccountIdError","isNew","equals","other","toString","BankName","value","create","validated","BankSchemas","nameSchema","parse","getValue","equals","other","AccountEntity","id","type","balance","createdAt","userId","bankName","create","validated","AccountSchemas","createAccountSchema","parse","AccountId","createNew","AccountTypeVO","AccountBalance","Date","UserId","BankName","reconstruct","accountEntitySchema","toPersistence","getValue","toJSON","increaseBalance","amount","increase","decreaseBalance","decrease","getBalance","getUserId","setType","setValue","import_zod","NODE_ENV","ConfigSchemas","databasePathSchema","z","string","min","refine","val","endsWith","message","fs","existsSync","path","resolve","envSchema","object","DATABASE_PATH","default","APP_PORT","coerce","number","APP_HOST","optional","JWT_SECRET","NODE_ENV","nativeEnum","DEV","SESSION_SECRET","OPENAI_API_KEY","consoleFormat","winston","format","combine","timestamp","errors","stack","printf","info","level","message","meta","levelColors","error","warn","debug","verbose","resetColor","levelColor","logMessage","toUpperCase","excludeFields","filteredMeta","Object","keys","filter","key","includes","reduce","obj","metaKeys","length","metaString","JSON","stringify","isProduction","process","env","NODE_ENV","logger","createLogger","LOG_LEVEL","defaultMeta","service","environment","transports","Console","handleExceptions","handleRejections","exitOnError","result","ConfigSchemas","envSchema","safeParse","process","env","success","ValidationError","JSON","stringify","error","format","logger","info","Object","entries","data","forEach","key","value","undefined","String","import_typeorm","import_typeorm","User","id","name","email","passwordHash","accounts","createdAt","type","unique","Account","account","user","onDelete","import_typeorm","Transaction","id","type","sourceAccount","destinationAccount","amount","description","transactionDate","enum","TransactionType","default","DEBITO","Account","nullable","precision","scale","name","Account","id","type","balance","user","bank","transactions","createdAt","enum","AccountType","default","CORRENTE","precision","scale","User","accounts","Bank","Transaction","t","sourceAccount","name","Bank","name","accounts","type","unique","Account","account","bank","onDelete","import_path","import_typeorm","migrationsPath","path","resolve","__dirname","AppDataSource","DataSource","type","database","process","env","DATABASE_PATH","synchronize","NODE_ENV","logging","entities","User","Bank","Account","Transaction","migrations","migrationsTableName","NotFoundError","DomainError","constructor","message","Object","setPrototypeOf","prototype","getStatusCode","BankNotFoundError","NotFoundError","constructor","name","Object","setPrototypeOf","prototype","ConflictError","DomainError","constructor","message","Object","setPrototypeOf","prototype","getStatusCode","UserAlreadyExistsError","ConflictError","constructor","email","Object","setPrototypeOf","prototype","CreateUserUseCase","constructor","userRepository","accountRepository","bankRepository","execute","request","logger","info","name","getName","email","getEmail","password","getPassword","bankName","getBankName","accountType","getAccountType","accountBalance","getAccountBalance","userExists","exists","UserAlreadyExistsError","getValue","passwordVO","UserPassword","create","hashedPassword","hash","bankNameVO","BankName","bank","findByName","BankNotFoundError","user","UserEntity","AppDataSource","transaction","manager","transactionalUserRepo","withTransaction","transactionalAccountRepo","account","AccountEntity","getId","CreateUserResponse","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error","failure","import_zod","CreateUserSchemas","requestSchema","z","object","account","type","AccountSchemas","accountTypeSchema","balance","balanceSchema","bank","name","BankSchemas","nameSchema","user","UserSchemas","email","emailSchema","password","passwordSchema","httpRequestSchema","body","CreateUserRequest","constructor","name","email","password","accountType","accountBalance","bankName","createFromRaw","raw","parsed","CreateUserSchemas","requestSchema","parse","UserName","create","user","UserEmail","UserPassword","AccountTypeVO","account","type","AccountBalance","balance","BankName","bank","getName","getEmail","getPassword","getAccountType","getAccountBalance","getBankName","jest","mock","CreateUserSchemas","httpRequestSchema","parse","fn","UserEntity","create","AccountEntity","UserId","AccountId","BankName","describe","useCase","userRepository","accountRepository","bankRepository","mockRequest","beforeEach","clearAllMocks","exists","withTransaction","mockReturnThis","findByName","CreateUserUseCase","CreateUserRequest","UserName","UserEmail","UserPassword","AccountTypeVO","AccountType","POUPANCA","AccountBalance","AppDataSource","transaction","mockImplementation","cb","mockReturnValue","value","id","getValue","name","email","password","createdAt","Date","getId","getName","getEmail","toPersistence","toJSON","type","balance","userId","bankName","getBalance","getUserId","increaseBalance","decreaseBalance","setType","it","validatedData","body","user","account","mockResolvedValue","mockBank","mockUser","mockAccount","result","execute","expect","isSuccess","toBe","toHaveBeenCalledWith","toHaveBeenCalled","any","Object","getMessage","toContain","invalidRequest","zodError","ZodError","code","validation","message","path","getErrors","minimum","inclusive","exact","mockRejectedValue","Error"]}