{"version":3,"sources":["../../../../../app/domain/use-cases/user/create/request.ts","../../../../../app/domain/use-cases/user/create/schemas.ts","../../../../../app/domain/models/user/schemas/index.ts","../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../app/domain/models/bank/schemas/index.ts","../../../../../app/domain/models/account/schemas/index.ts","../../../../../app/domain/models/user/value-objects/name.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/validation-error.ts","../../../../../app/domain/errors/user/invalid-email-error.ts","../../../../../app/domain/models/user/value-objects/email.ts","../../../../../app/domain/errors/user/invalid-password-error.ts","../../../../../app/domain/models/user/value-objects/password.ts","../../../../../app/domain/errors/account/invalid-balance-error.ts","../../../../../app/domain/models/account/value-objects/balance.ts","../../../../../app/domain/models/bank/value-objects/name.ts","../../../../../app/domain/models/account/value-objects/type.ts"],"sourcesContent":["import { CreateUserSchemas } from \"@useCases/user/create/schemas\";\nimport { UserName } from \"@models/user/value-objects/name\";\nimport { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { AccountBalance } from \"@models/account/value-objects/balance\";\nimport { BankName } from \"@models/bank/value-objects/name\";\nimport { AccountTypeVO } from \"@models/account/value-objects/type\";\n\nexport class CreateUserRequest {\n  constructor(\n    private readonly name: UserName,\n    private readonly email: UserEmail,\n    private readonly password: UserPassword,\n    private readonly accountType: AccountTypeVO,\n    private readonly accountBalance: AccountBalance,\n    private readonly bankName: BankName,\n  ) {}\n\n  public static createFromRaw(raw: unknown): CreateUserRequest {\n    const parsed = CreateUserSchemas.requestSchema.parse(raw);\n    return new CreateUserRequest(\n      UserName.create(parsed.user.name),\n      UserEmail.create(parsed.user.email),\n      UserPassword.create(parsed.user.password),\n      AccountTypeVO.create(parsed.account.type),\n      AccountBalance.create(parsed.account.balance),\n      BankName.create(parsed.bank.name),\n    );\n  }\n\n  public getName(): UserName {\n    return this.name;\n  }\n\n  public getEmail(): UserEmail {\n    return this.email;\n  }\n\n  public getPassword(): UserPassword {\n    return this.password;\n  }\n\n  public getAccountType(): AccountTypeVO {\n    return this.accountType;\n  }\n\n  public getAccountBalance(): AccountBalance {\n    return this.accountBalance;\n  }\n\n  public getBankName(): BankName {\n    return this.bankName;\n  }\n}\n","import { z } from \"zod\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { BankSchemas } from \"@models/bank/schemas\";\n\nexport class CreateUserSchemas {\n  public static readonly requestSchema = z.object({\n    account: z.object({\n      type: AccountSchemas.accountTypeSchema,\n      balance: AccountSchemas.balanceSchema,\n    }),\n    bank: z.object({\n      name: BankSchemas.nameSchema,\n    }),\n    user: z.object({\n      name: UserSchemas.nameSchema,\n      email: UserSchemas.emailSchema,\n      password: UserSchemas.passwordSchema,\n    }),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    body: this.requestSchema,\n  });\n}\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupança\",\n  CREDITO = \"Crédito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"Débito\",\n  CREDITO = \"Crédito\",\n  TRANSFERENCIA = \"Transferência\",\n}\n","import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AccountSchemas {\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly accountIdSchema = z\n    .number()\n    .int(\"Account ID must be an integer\")\n    .positive(\"Account ID must be positive\");\n\n  public static readonly accountTypeSchema = z.nativeEnum(AccountType);\n\n  public static readonly balanceSchema = z\n    .number()\n    // .max(9999999999, \"Balance is too high\")\n    // .min(-9999999999, \"Balance is too low\")\n    .refine((val) => Number.isFinite(val), {\n      message: \"Balance must be a finite number\",\n    });\n\n  public static readonly createAccountSchema = z.object({\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    userId: UserSchemas.userIdSchema,\n    bankName: BankSchemas.nameSchema,\n  });\n\n  public static readonly accountEntitySchema = z.object({\n    id: this.accountIdSchema,\n    name: this.nameSchema,\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    createdAt: z.date(),\n  });\n}\n","import { UserSchemas } from \"@models/user/schemas\";\n\nexport class UserName {\n  private constructor(private readonly value: string) {}\n\n  public static create(name: string): UserName {\n    const validatedName = UserSchemas.nameSchema.parse(name);\n    return new UserName(validatedName);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: UserName): boolean {\n    return this.value === other.value;\n  }\n}\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidEmailError extends ValidationError {\n  constructor(email: string) {\n    super(`Invalid email format: ${email}`);\n    Object.setPrototypeOf(this, InvalidEmailError.prototype);\n  }\n} ","import { InvalidEmailError } from \"@errors/user/invalid-email-error\";\n\nexport class UserEmail {\n  private constructor(private readonly value: string) {\n    this.validateEmail();\n  }\n\n  public static create(email: string): UserEmail {\n    return new UserEmail(email);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  private validateEmail(): void {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(this.value)) {\n      throw new InvalidEmailError(this.value);\n    }\n  }\n\n  public equals(other: UserEmail): boolean {\n    return this.value === other.value;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidPasswordError extends ValidationError {\n  constructor(message: string) {\n    super(message, []);\n    Object.setPrototypeOf(this, InvalidPasswordError.prototype);\n  }\n} ","import { InvalidPasswordError } from \"@errors/user/invalid-password-error\";\nimport bcrypt from \"bcryptjs\";\n\nexport class UserPassword {\n  private constructor(\n    private readonly value: string,\n    private readonly isHashed: boolean = false,\n  ) {\n    if (!isHashed) {\n      this.validatePassword();\n    }\n  }\n\n  public static create(plainPassword: string): UserPassword {\n    return new UserPassword(plainPassword, false);\n  }\n\n  public static createFromHash(hashedPassword: string): UserPassword {\n    return new UserPassword(hashedPassword, true);\n  }\n\n  public async hash(): Promise<UserPassword> {\n    if (this.isHashed) {\n      return this;\n    }\n    const hashedValue = await bcrypt.hash(this.value, 10);\n    return new UserPassword(hashedValue, true);\n  }\n\n  public async compare(plainPassword: string): Promise<boolean> {\n    if (!this.isHashed) {\n      throw new InvalidPasswordError(\"Cannot compare with unhashed password\");\n    }\n    return bcrypt.compare(plainPassword, this.value);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public isHashedPassword(): boolean {\n    return this.isHashed;\n  }\n\n  private validatePassword(): void {\n    if (\n      !this.value.match(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      )\n    ) {\n      throw new InvalidPasswordError(\n        \"Password must contain at least 8 characters with uppercase, lowercase, number and special character\",\n      );\n    }\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidBalanceError extends ValidationError {\n  constructor(value: unknown) {\n    super(`Balance must be a finite number. Got: ${value}`);\n    Object.setPrototypeOf(this, InvalidBalanceError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidBalanceError } from \"@errors/account/invalid-balance-error\";\n\nexport class AccountBalance {\n  private constructor(private value: number) {\n    if (!Number.isFinite(value)) {\n      throw new InvalidBalanceError(value);\n    }\n  }\n\n  public static create(type: unknown): AccountBalance {\n    const validatedType = AccountSchemas.balanceSchema.parse(type);\n    return new AccountBalance(validatedType);\n  }\n\n  public getValue(): number {\n    return this.value;\n  }\n\n  public isNegative(): boolean {\n    return this.value < 0;\n  }\n\n  public isPositive(): boolean {\n    return this.value > 0;\n  }\n\n  public isZero(): boolean {\n    return this.value === 0;\n  }\n\n  public increase(amount: number): void {\n    this.value += amount;\n  }\n\n  public decrease(amount: number): void {\n    this.value -= amount;\n  }\n}\n","import { BankSchemas } from \"@models/bank/schemas\";\n\nexport class BankName {\n  private constructor(private readonly value: string) {}\n\n  public static create(value: string): BankName {\n    const validated = BankSchemas.nameSchema.parse(value);\n    return new BankName(validated);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: BankName): boolean {\n    return this.value === other.value;\n  }\n}","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountSchemas } from \"@models/account/schemas\";\n\nexport class AccountTypeVO {\n  private constructor(private value: AccountType) {}\n\n  public static create(type: unknown): AccountTypeVO {\n    const validatedType = AccountSchemas.accountTypeSchema.parse(type);\n    return new AccountTypeVO(validatedType);\n  }\n\n  public getValue(): AccountType {\n    return this.value;\n  }\n  \n  public setValue(value: AccountType): void {\n    this.value = value;\n  }\n}\n"],"mappings":"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","names":["import_zod","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","AccountType","import_zod","BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","import_zod","AccountSchemas","nameSchema","z","string","min","max","regex","accountIdSchema","number","int","positive","accountTypeSchema","nativeEnum","AccountType","balanceSchema","refine","val","Number","isFinite","message","createAccountSchema","object","type","balance","userId","UserSchemas","userIdSchema","bankName","BankSchemas","accountEntitySchema","id","name","createdAt","date","CreateUserSchemas","requestSchema","z","object","account","type","AccountSchemas","accountTypeSchema","balance","balanceSchema","bank","name","BankSchemas","nameSchema","user","UserSchemas","email","emailSchema","password","passwordSchema","httpRequestSchema","body","UserName","value","create","name","validatedName","UserSchemas","nameSchema","parse","getValue","equals","other","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidEmailError","ValidationError","constructor","email","Object","setPrototypeOf","prototype","UserEmail","value","validateEmail","create","email","getValue","emailRegex","test","InvalidEmailError","equals","other","InvalidPasswordError","ValidationError","constructor","message","Object","setPrototypeOf","prototype","UserPassword","value","isHashed","validatePassword","create","plainPassword","createFromHash","hashedPassword","hash","hashedValue","bcrypt","compare","InvalidPasswordError","getValue","isHashedPassword","match","InvalidBalanceError","ValidationError","constructor","value","Object","setPrototypeOf","prototype","AccountBalance","value","Number","isFinite","InvalidBalanceError","create","type","validatedType","AccountSchemas","balanceSchema","parse","getValue","isNegative","isPositive","isZero","increase","amount","decrease","BankName","value","create","validated","BankSchemas","nameSchema","parse","getValue","equals","other","AccountTypeVO","value","create","type","validatedType","AccountSchemas","accountTypeSchema","parse","getValue","setValue","CreateUserRequest","constructor","name","email","password","accountType","accountBalance","bankName","createFromRaw","raw","parsed","CreateUserSchemas","requestSchema","parse","UserName","create","user","UserEmail","UserPassword","AccountTypeVO","account","type","AccountBalance","balance","BankName","bank","getName","getEmail","getPassword","getAccountType","getAccountBalance","getBankName"]}