{"version":3,"sources":["../../../../../app/domain/use-cases/user/create/response.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/validation-error.ts","../../../../../app/domain/errors/user/invalid-user-response-error.ts"],"sourcesContent":["import { UserEntity } from \"@models/user/entity\";\nimport { InvalidUserResponseError } from \"@errors/user/invalid-user-response-error\";\n\nexport class CreateUserResponse {\n  private constructor(\n    private readonly user: UserEntity | null,\n    private readonly success: boolean,\n    private readonly message: string,\n    private readonly errors: string[],\n  ) {}\n\n  public static success(user: UserEntity): CreateUserResponse {\n    return new CreateUserResponse(user, true, \"User created successfully\", []);\n  }\n\n  public static failure(\n    message: string,\n    errors: string[] = [],\n  ): CreateUserResponse {\n    return new CreateUserResponse(null, false, message, errors);\n  }\n\n  public static validationFailure(errors: string[]): CreateUserResponse {\n    return new CreateUserResponse(null, false, \"Validation failed\", errors);\n  }\n\n  public getUser(): UserEntity {\n    if (!this.user) {\n      throw new InvalidUserResponseError();\n    }\n    return this.user;\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserResponseError extends ValidationError {\n  constructor() {\n    super(\"Cannot get user from failed response\");\n    Object.setPrototypeOf(this, InvalidUserResponseError.prototype);\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;ACDO,IAAeA,cAAf,MAAeA,qBAAoBC,MAAAA;EAA1C,OAA0CA;;;EACxCC,YAAYC,SAAiB;AAC3B,UAAMA,OAAAA;AACN,SAAKC,OAAO,KAAKF,YAAYE;AAC7BC,WAAOC,eAAe,MAAMN,aAAYO,SAAS;EACnD;AAGF;;;ACNO,IAAMC,kBAAN,MAAMA,yBAAwBC,YAAAA;EAFrC,OAEqCA;;;;EACnCC,YAAYC,SAAkCC,SAAmB,CAAA,GAAI;AACnE,UAAMD,OAAAA,GAAAA,KADsCC,SAAAA;AAE5CC,WAAOC,eAAe,MAAMN,iBAAgBO,SAAS;EACvD;EAEOC,gBAAwB;AAC7B,WAAO;EACT;EAEOC,YAAsB;AAC3B,WAAO,KAAKL;EACd;AACF;;;ACbO,IAAMM,2BAAN,MAAMA,kCAAiCC,gBAAAA;EAF9C,OAE8CA;;;EAC5CC,cAAc;AACZ,UAAM,sCAAA;AACNC,WAAOC,eAAe,MAAMJ,0BAAyBK,SAAS;EAChE;AACF;;;AHJO,IAAMC,qBAAN,MAAMA,oBAAAA;EAFb,OAEaA;;;;;;;EACX,YACmBC,MACAC,SACAC,SACAC,QACjB;SAJiBH,OAAAA;SACAC,UAAAA;SACAC,UAAAA;SACAC,SAAAA;EAChB;EAEH,OAAcF,QAAQD,MAAsC;AAC1D,WAAO,IAAID,oBAAmBC,MAAM,MAAM,6BAA6B,CAAA,CAAE;EAC3E;EAEA,OAAcI,QACZF,SACAC,SAAmB,CAAA,GACC;AACpB,WAAO,IAAIJ,oBAAmB,MAAM,OAAOG,SAASC,MAAAA;EACtD;EAEA,OAAcE,kBAAkBF,QAAsC;AACpE,WAAO,IAAIJ,oBAAmB,MAAM,OAAO,qBAAqBI,MAAAA;EAClE;EAEOG,UAAsB;AAC3B,QAAI,CAAC,KAAKN,MAAM;AACd,YAAM,IAAIO,yBAAAA;IACZ;AACA,WAAO,KAAKP;EACd;EAEOQ,YAAqB;AAC1B,WAAO,KAAKP;EACd;EAEOQ,aAAqB;AAC1B,WAAO,KAAKP;EACd;EAEOQ,YAAsB;AAC3B,WAAO,KAAKP;EACd;EAEOQ,YAAqB;AAC1B,WAAO,KAAKR,OAAOS,SAAS;EAC9B;AACF;","names":["DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidUserResponseError","ValidationError","constructor","Object","setPrototypeOf","prototype","CreateUserResponse","user","success","message","errors","failure","validationFailure","getUser","InvalidUserResponseError","isSuccess","getMessage","getErrors","hasErrors","length"]}