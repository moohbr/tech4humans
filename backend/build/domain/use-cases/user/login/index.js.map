{"version":3,"sources":["../../../../../app/domain/use-cases/user/login/index.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/validation-error.ts","../../../../../app/domain/errors/user/invalid-auth-result-error.ts","../../../../../app/domain/use-cases/user/login/response.ts","../../../../../app/domain/errors/user/invalid-email-error.ts","../../../../../app/domain/models/user/value-objects/email.ts","../../../../../app/domain/errors/user/invalid-password-error.ts","../../../../../app/domain/models/user/value-objects/password.ts","../../../../../app/domain/use-cases/user/login/schemas.ts","../../../../../app/domain/models/user/schemas/index.ts","../../../../../app/domain/errors/not-authorized-error.ts","../../../../../app/domain/errors/user/invalid-credentials-error.ts"],"sourcesContent":["import { ZodError } from \"zod\";\nimport { LoginRequest } from \"@useCases/user/login/request\";\nimport { LoginResponse } from \"@useCases/user/login/response\";\nimport { LoginUseCaseInterface } from \"@useCases/user/login/interfaces\";\nimport { UserRepositoryInterface } from \"@models/user/repository/interfaces\";\nimport { AuthServiceInterface } from \"@services/auth/interfaces\";\nimport { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { UserLoginSchemas } from \"@useCases/user/login/schemas\";\nimport { InvalidCredentialsError } from \"@errors/user/invalid-credentials-error\";\n\nexport class LoginUseCase implements LoginUseCaseInterface {\n  constructor(\n    private readonly userRepository: UserRepositoryInterface,\n    private readonly authService: AuthServiceInterface,\n  ) {}\n\n  public async execute(request: LoginRequest): Promise<LoginResponse> {\n    try {\n      const validated = UserLoginSchemas.requestSchema.parse({\n        email: request.getEmail(),\n        password: request.getPassword(),\n      });\n\n      const email = UserEmail.create(validated.email);\n      const user = await this.userRepository.findByEmail(email);\n\n      if (!user) {\n        throw new InvalidCredentialsError();\n      }\n\n      const userPassword = UserPassword.createFromHash(user.getPasswordHash());\n      const isValid = await userPassword.compare(validated.password);\n\n      if (!isValid) {\n        throw new InvalidCredentialsError();\n      }\n\n      const token = this.authService.generateToken(user.getId().getValue());\n\n      return LoginResponse.success({\n        token,\n        user,\n      });\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): LoginResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return LoginResponse.validationFailure(errors);\n    }\n\n    const message =\n      error instanceof Error ? error.message : \"Unknown error occurred\";\n    return LoginResponse.failure(message);\n  }\n}\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidAuthResultError extends ValidationError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, InvalidAuthResultError.prototype);\n  }\n}","import { InvalidAuthResultError } from \"@errors/user/invalid-auth-result-error\";\nimport { AuthResult } from \"@useCases/user/login/types\";\n\nexport class LoginResponse {\n  private constructor(\n    private readonly authResult: AuthResult | null,\n    private readonly success: boolean,\n    private readonly message: string,\n    private readonly errors: string[],\n  ) {}\n\n  public static success(authResult: AuthResult): LoginResponse {\n    return new LoginResponse(authResult, true, \"Login successful\", []);\n  }\n\n  public static failure(message: string, errors: string[] = []): LoginResponse {\n    return new LoginResponse(null, false, message, errors);\n  }\n\n  public static validationFailure(errors: string[]): LoginResponse {\n    return new LoginResponse(null, false, \"Validation failed\", errors);\n  }\n\n  public getAuthResult(): AuthResult {\n    if (!this.authResult) {\n      throw new InvalidAuthResultError(\"Cannot get auth result from failed response\");\n    }\n    return this.authResult;\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidEmailError extends ValidationError {\n  constructor(email: string) {\n    super(`Invalid email format: ${email}`);\n    Object.setPrototypeOf(this, InvalidEmailError.prototype);\n  }\n} ","import { InvalidEmailError } from \"@errors/user/invalid-email-error\";\n\nexport class UserEmail {\n  private constructor(private readonly value: string) {\n    this.validateEmail();\n  }\n\n  public static create(email: string): UserEmail {\n    return new UserEmail(email);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  private validateEmail(): void {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(this.value)) {\n      throw new InvalidEmailError(this.value);\n    }\n  }\n\n  public equals(other: UserEmail): boolean {\n    return this.value === other.value;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidPasswordError extends ValidationError {\n  constructor(message: string) {\n    super(message, []);\n    Object.setPrototypeOf(this, InvalidPasswordError.prototype);\n  }\n} ","import { InvalidPasswordError } from \"@errors/user/invalid-password-error\";\nimport bcrypt from \"bcryptjs\";\n\nexport class UserPassword {\n  private constructor(\n    private readonly value: string,\n    private readonly isHashed: boolean = false,\n  ) {\n    if (!isHashed) {\n      this.validatePassword();\n    }\n  }\n\n  public static create(plainPassword: string): UserPassword {\n    return new UserPassword(plainPassword, false);\n  }\n\n  public static createFromHash(hashedPassword: string): UserPassword {\n    return new UserPassword(hashedPassword, true);\n  }\n\n  public async hash(): Promise<UserPassword> {\n    if (this.isHashed) {\n      return this;\n    }\n    const hashedValue = await bcrypt.hash(this.value, 10);\n    return new UserPassword(hashedValue, true);\n  }\n\n  public async compare(plainPassword: string): Promise<boolean> {\n    if (!this.isHashed) {\n      throw new InvalidPasswordError(\"Cannot compare with unhashed password\");\n    }\n    return bcrypt.compare(plainPassword, this.value);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public isHashedPassword(): boolean {\n    return this.isHashed;\n  }\n\n  private validatePassword(): void {\n    if (\n      !this.value.match(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      )\n    ) {\n      throw new InvalidPasswordError(\n        \"Password must contain at least 8 characters with uppercase, lowercase, number and special character\",\n      );\n    }\n  }\n}\n","import { z } from \"zod\";\nimport { UserSchemas } from \"@models/user/schemas\";\n\nexport class UserLoginSchemas {\n  public static readonly requestSchema = z.object({\n    email: UserSchemas.emailSchema,\n    password: z.string().min(8).max(100),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    body: this.requestSchema,\n  });\n}\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { DomainError } from \"./domain-error\";\n\nexport class NotAuthorizedError extends DomainError {\n  constructor() {\n    super(\"Not authorized\");\n  }\n\n  public getStatusCode(): number {\n    return 401;\n  }\n}","import { NotAuthorizedError } from \"../not-authorized-error\";\n\nexport class InvalidCredentialsError extends NotAuthorizedError {\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, InvalidCredentialsError.prototype);\n  }\n} "],"mappings":"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","names":["import_zod","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidAuthResultError","ValidationError","constructor","message","Object","setPrototypeOf","prototype","LoginResponse","authResult","success","message","errors","failure","validationFailure","getAuthResult","InvalidAuthResultError","isSuccess","getMessage","getErrors","hasErrors","length","InvalidEmailError","ValidationError","constructor","email","Object","setPrototypeOf","prototype","UserEmail","value","validateEmail","create","email","getValue","emailRegex","test","InvalidEmailError","equals","other","InvalidPasswordError","ValidationError","constructor","message","Object","setPrototypeOf","prototype","UserPassword","value","isHashed","validatePassword","create","plainPassword","createFromHash","hashedPassword","hash","hashedValue","bcrypt","compare","InvalidPasswordError","getValue","isHashedPassword","match","import_zod","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","UserLoginSchemas","requestSchema","z","object","email","UserSchemas","emailSchema","password","string","min","max","httpRequestSchema","body","NotAuthorizedError","DomainError","constructor","getStatusCode","InvalidCredentialsError","NotAuthorizedError","constructor","Object","setPrototypeOf","prototype","LoginUseCase","constructor","userRepository","authService","execute","request","validated","UserLoginSchemas","requestSchema","parse","email","getEmail","password","getPassword","UserEmail","create","user","findByEmail","InvalidCredentialsError","userPassword","UserPassword","createFromHash","getPasswordHash","isValid","compare","token","generateToken","getId","getValue","LoginResponse","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error","failure"]}