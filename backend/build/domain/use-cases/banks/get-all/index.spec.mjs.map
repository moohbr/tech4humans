{"version":3,"sources":["../../../../../app/domain/models/bank/schemas/index.ts","../../../../../app/domain/models/bank/value-objects/name.ts","../../../../../app/domain/models/bank/entity/index.ts","../../../../../app/domain/use-cases/banks/get-all/response.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/not-found-error.ts","../../../../../app/domain/errors/bank/bank-not-found-error.ts","../../../../../app/domain/use-cases/banks/get-all/index.ts","../../../../../app/domain/use-cases/banks/get-all/index.spec.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { BankSchemas } from \"@models/bank/schemas\";\n\nexport class BankName {\n  private constructor(private readonly value: string) {}\n\n  public static create(value: string): BankName {\n    const validated = BankSchemas.nameSchema.parse(value);\n    return new BankName(validated);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: BankName): boolean {\n    return this.value === other.value;\n  }\n}","import { BankSchemas } from \"@models/bank/schemas\";\nimport { BankName } from \"@models/bank/value-objects/name\";\n\nexport class BankEntity {\n  private constructor(\n    private readonly name: BankName,\n  ) {}\n\n  public static create(name: string): BankEntity {\n    const validated = BankSchemas.createBankSchema.parse({ name });\n    return new BankEntity(BankName.create(validated.name));\n  }\n\n  public static reconstruct(name: string): BankEntity {\n    const validated = BankSchemas.bankEntitySchema.parse({ name });\n    return new BankEntity(BankName.create(validated.name));\n  }\n\n  public getName(): BankName {\n    return this.name;\n  }\n\n  public toJSON(): BankRawEntity {\n    return {\n      name: this.name.getValue(),\n    };\n  }\n\n  public toPersistence(): BankRawEntity {\n    return {\n      name: this.name.getValue(),\n    };\n  }\n}","import { BankEntity } from \"@models/bank/entity\";\n\nexport class GetAllBanksResponse {\n  private constructor(\n    private readonly banks: BankEntity[],\n    private readonly success: boolean,\n    private readonly message: string,\n    private readonly errors: string[],\n  ) {}\n\n  public static success(banks: BankEntity[]): GetAllBanksResponse {\n    return new GetAllBanksResponse(banks, true, \"Banks fetched successfully\", []);\n  }\n\n  public static failure(message: string, errors: string[] = []): GetAllBanksResponse {\n    const allErrors = errors.length > 0 ? errors : [message];\n    return new GetAllBanksResponse([], false, message, allErrors);\n  }\n\n  public static validationFailure(errors: string[]): GetAllBanksResponse {\n    return new GetAllBanksResponse([], false, \"Validation failed\", errors);\n  }\n\n  public getBanks(): BankEntity[] {\n    return this.banks;\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}   ","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class NotFoundError extends DomainError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, NotFoundError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 404;\n  }\n} ","import { NotFoundError } from \"../not-found-error\";\n\nexport class BankNotFoundError extends NotFoundError {\n  constructor(name: string) {\n    super(`Bank not found: ${name}`);\n    Object.setPrototypeOf(this, BankNotFoundError.prototype);\n  }\n}","import { GetAllBanksResponse } from \"@useCases/banks/get-all/response\";\nimport { GetAllBanksUseCaseInterface } from \"@useCases/banks/get-all/interfaces\";\nimport { BankRepositoryInterface } from \"@models/bank/repository/interfaces\";\nimport { BankNotFoundError } from \"@domain/errors/bank/bank-not-found-error\";\n\nexport class GetAllBanksUseCase implements GetAllBanksUseCaseInterface {\n  constructor(private readonly bankRepository: BankRepositoryInterface) {}\n\n  async execute(): Promise<GetAllBanksResponse> {\n    try {\n      const banks = await this.bankRepository.findAll();\n      \n      if (!banks || banks.length === 0) {\n        throw new BankNotFoundError(\"No banks found\");\n      }\n\n      return GetAllBanksResponse.success(banks);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): GetAllBanksResponse {\n    const message = error instanceof Error ? error.message : \"Unknown error occurred\";\n    return GetAllBanksResponse.failure(message);\n  }\n}","import { BankRepositoryInterface } from \"@models/bank/repository/interfaces\";\nimport { BankEntity } from \"@models/bank/entity\";\nimport { GetAllBanksUseCase } from \".\";\n\nconst mockBankRepository: jest.Mocked<BankRepositoryInterface> = {\n  withTransaction: jest.fn(),\n  findAll: jest.fn(),\n  findByName: jest.fn(),\n  delete: jest.fn(),\n};\n\ndescribe(\"GetAllBanksUseCase\", () => {\n  const useCase = new GetAllBanksUseCase(mockBankRepository);\n  \n  const mockBanks = [\n    BankEntity.create(\"Bank A\"),\n    BankEntity.create(\"Bank B\"),\n    BankEntity.create(\"Bank C\")\n  ];\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it(\"should return banks successfully when banks exist\", async () => {\n    mockBankRepository.findAll.mockResolvedValue(mockBanks);\n\n    const response = await useCase.execute();\n\n    expect(response.isSuccess()).toBe(true);\n    expect(response.getBanks()).toEqual(mockBanks);\n    expect(mockBankRepository.findAll).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"should return failure when no banks exist (null)\", async () => {\n    mockBankRepository.findAll.mockResolvedValue([] as BankEntity[]);\n\n    const response = await useCase.execute();\n\n    expect(response.isSuccess()).toBe(false);\n    expect(response.getErrors()).toContain(\"Bank not found: No banks found\");\n  });\n});"],"mappings":"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","names":["z","BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","BankName","value","create","validated","BankSchemas","nameSchema","parse","getValue","equals","other","BankEntity","name","create","validated","BankSchemas","createBankSchema","parse","BankName","reconstruct","bankEntitySchema","getName","toJSON","getValue","toPersistence","GetAllBanksResponse","banks","success","message","errors","failure","allErrors","length","validationFailure","getBanks","isSuccess","getMessage","getErrors","hasErrors","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","NotFoundError","DomainError","constructor","message","Object","setPrototypeOf","prototype","getStatusCode","BankNotFoundError","NotFoundError","constructor","name","Object","setPrototypeOf","prototype","GetAllBanksUseCase","constructor","bankRepository","execute","banks","findAll","length","BankNotFoundError","GetAllBanksResponse","success","error","handleError","message","Error","failure","mockBankRepository","withTransaction","jest","fn","findAll","findByName","delete","describe","useCase","GetAllBanksUseCase","mockBanks","BankEntity","create","beforeEach","clearAllMocks","it","mockResolvedValue","response","execute","expect","isSuccess","toBe","getBanks","toEqual","toHaveBeenCalledTimes","getErrors","toContain"]}