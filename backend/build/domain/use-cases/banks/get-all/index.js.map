{"version":3,"sources":["../../../../../app/domain/use-cases/banks/get-all/index.ts","../../../../../app/domain/use-cases/banks/get-all/response.ts","../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/not-found-error.ts","../../../../../app/domain/errors/bank/bank-not-found-error.ts"],"sourcesContent":["import { GetAllBanksResponse } from \"@useCases/banks/get-all/response\";\nimport { GetAllBanksUseCaseInterface } from \"@useCases/banks/get-all/interfaces\";\nimport { BankRepositoryInterface } from \"@models/bank/repository/interfaces\";\nimport { BankNotFoundError } from \"@domain/errors/bank/bank-not-found-error\";\n\nexport class GetAllBanksUseCase implements GetAllBanksUseCaseInterface {\n  constructor(private readonly bankRepository: BankRepositoryInterface) {}\n\n  async execute(): Promise<GetAllBanksResponse> {\n    try {\n      const banks = await this.bankRepository.findAll();\n      \n      if (!banks || banks.length === 0) {\n        throw new BankNotFoundError(\"No banks found\");\n      }\n\n      return GetAllBanksResponse.success(banks);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): GetAllBanksResponse {\n    const message = error instanceof Error ? error.message : \"Unknown error occurred\";\n    return GetAllBanksResponse.failure(message);\n  }\n}","import { BankEntity } from \"@models/bank/entity\";\n\nexport class GetAllBanksResponse {\n  private constructor(\n    private readonly banks: BankEntity[],\n    private readonly success: boolean,\n    private readonly message: string,\n    private readonly errors: string[],\n  ) {}\n\n  public static success(banks: BankEntity[]): GetAllBanksResponse {\n    return new GetAllBanksResponse(banks, true, \"Banks fetched successfully\", []);\n  }\n\n  public static failure(message: string, errors: string[] = []): GetAllBanksResponse {\n    const allErrors = errors.length > 0 ? errors : [message];\n    return new GetAllBanksResponse([], false, message, allErrors);\n  }\n\n  public static validationFailure(errors: string[]): GetAllBanksResponse {\n    return new GetAllBanksResponse([], false, \"Validation failed\", errors);\n  }\n\n  public getBanks(): BankEntity[] {\n    return this.banks;\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}   ","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class NotFoundError extends DomainError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, NotFoundError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 404;\n  }\n} ","import { NotFoundError } from \"../not-found-error\";\n\nexport class BankNotFoundError extends NotFoundError {\n  constructor(name: string) {\n    super(`Bank not found: ${name}`);\n    Object.setPrototypeOf(this, BankNotFoundError.prototype);\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;ACEO,IAAMA,sBAAN,MAAMA,qBAAAA;EAAb,OAAaA;;;;;;;EACX,YACmBC,OACAC,SACAC,SACAC,QACjB;SAJiBH,QAAAA;SACAC,UAAAA;SACAC,UAAAA;SACAC,SAAAA;EAChB;EAEH,OAAcF,QAAQD,OAA0C;AAC9D,WAAO,IAAID,qBAAoBC,OAAO,MAAM,8BAA8B,CAAA,CAAE;EAC9E;EAEA,OAAcI,QAAQF,SAAiBC,SAAmB,CAAA,GAAyB;AACjF,UAAME,YAAYF,OAAOG,SAAS,IAAIH,SAAS;MAACD;;AAChD,WAAO,IAAIH,qBAAoB,CAAA,GAAI,OAAOG,SAASG,SAAAA;EACrD;EAEA,OAAcE,kBAAkBJ,QAAuC;AACrE,WAAO,IAAIJ,qBAAoB,CAAA,GAAI,OAAO,qBAAqBI,MAAAA;EACjE;EAEOK,WAAyB;AAC9B,WAAO,KAAKR;EACd;EAEOS,YAAqB;AAC1B,WAAO,KAAKR;EACd;EAEOS,aAAqB;AAC1B,WAAO,KAAKR;EACd;EAEOS,YAAsB;AAC3B,WAAO,KAAKR;EACd;EAEOS,YAAqB;AAC1B,WAAO,KAAKT,OAAOG,SAAS;EAC9B;AACF;;;AC1CO,IAAeO,cAAf,MAAeA,qBAAoBC,MAAAA;EAA1C,OAA0CA;;;EACxCC,YAAYC,SAAiB;AAC3B,UAAMA,OAAAA;AACN,SAAKC,OAAO,KAAKF,YAAYE;AAC7BC,WAAOC,eAAe,MAAMN,aAAYO,SAAS;EACnD;AAGF;;;ACNO,IAAMC,gBAAN,MAAMA,uBAAsBC,YAAAA;EAFnC,OAEmCA;;;EACjCC,YAAYC,SAAiB;AAC3B,UAAMA,OAAAA;AACNC,WAAOC,eAAe,MAAML,eAAcM,SAAS;EACrD;EAEOC,gBAAwB;AAC7B,WAAO;EACT;AACF;;;ACTO,IAAMC,oBAAN,MAAMA,2BAA0BC,cAAAA;EAFvC,OAEuCA;;;EACrCC,YAAYC,MAAc;AACxB,UAAM,mBAAmBA,IAAAA,EAAM;AAC/BC,WAAOC,eAAe,MAAML,mBAAkBM,SAAS;EACzD;AACF;;;AJFO,IAAMC,qBAAN,MAAMA;EALb,OAKaA;;;;EACXC,YAA6BC,gBAAyC;SAAzCA,iBAAAA;EAA0C;EAEvE,MAAMC,UAAwC;AAC5C,QAAI;AACF,YAAMC,QAAQ,MAAM,KAAKF,eAAeG,QAAO;AAE/C,UAAI,CAACD,SAASA,MAAME,WAAW,GAAG;AAChC,cAAM,IAAIC,kBAAkB,gBAAA;MAC9B;AAEA,aAAOC,oBAAoBC,QAAQL,KAAAA;IACrC,SAASM,OAAO;AACd,aAAO,KAAKC,YAAYD,KAAAA;IAC1B;EACF;EAEQC,YAAYD,OAAqC;AACvD,UAAME,UAAUF,iBAAiBG,QAAQH,MAAME,UAAU;AACzD,WAAOJ,oBAAoBM,QAAQF,OAAAA;EACrC;AACF;","names":["GetAllBanksResponse","banks","success","message","errors","failure","allErrors","length","validationFailure","getBanks","isSuccess","getMessage","getErrors","hasErrors","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","NotFoundError","DomainError","constructor","message","Object","setPrototypeOf","prototype","getStatusCode","BankNotFoundError","NotFoundError","constructor","name","Object","setPrototypeOf","prototype","GetAllBanksUseCase","constructor","bankRepository","execute","banks","findAll","length","BankNotFoundError","GetAllBanksResponse","success","error","handleError","message","Error","failure"]}