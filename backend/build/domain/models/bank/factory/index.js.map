{"version":3,"sources":["../../../../../app/domain/models/bank/factory/index.ts","../../../../../app/domain/models/bank/schemas/index.ts","../../../../../app/domain/models/bank/value-objects/name.ts","../../../../../app/domain/models/bank/entity/index.ts"],"sourcesContent":["import { BankEntity } from \"@models/bank/entity\";\n\nexport class BankFactory {\n  public static create(params: BankFactoryParams): BankEntity {\n    return BankEntity.create(params.name);\n  }\n\n  public static reconstruct(params: BankFactoryParams): BankEntity {\n    return BankEntity.reconstruct( params.name);\n  }\n}","import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { BankSchemas } from \"@models/bank/schemas\";\n\nexport class BankName {\n  private constructor(private readonly value: string) {}\n\n  public static create(value: string): BankName {\n    const validated = BankSchemas.nameSchema.parse(value);\n    return new BankName(validated);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: BankName): boolean {\n    return this.value === other.value;\n  }\n}","import { BankSchemas } from \"@models/bank/schemas\";\nimport { BankName } from \"@models/bank/value-objects/name\";\n\nexport class BankEntity {\n  private constructor(\n    private readonly name: BankName,\n  ) {}\n\n  public static create(name: string): BankEntity {\n    const validated = BankSchemas.createBankSchema.parse({ name });\n    return new BankEntity(BankName.create(validated.name));\n  }\n\n  public static reconstruct(name: string): BankEntity {\n    const validated = BankSchemas.bankEntitySchema.parse({ name });\n    return new BankEntity(BankName.create(validated.name));\n  }\n\n  public getName(): BankName {\n    return this.name;\n  }\n\n  public toJSON(): BankRawEntity {\n    return {\n      name: this.name.getValue(),\n    };\n  }\n\n  public toPersistence(): BankRawEntity {\n    return {\n      name: this.name.getValue(),\n    };\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;ACAA,iBAAkB;AAEX,IAAMA,cAAN,MAAMA;EAFb,OAEaA;;;EAEX,OAAuBC,aAAaC,aACjCC,OAAM,EACNC,IAAI,GAAG,sCAAA,EACPC,IAAI,KAAK,mCAAA,EACTC,MAAM,oBAAoB,0CAAA;EAE7B,OAAuBC,mBAAmBL,aAAEM,OAAO;IACjDC,MAAM,KAAKR;EACb,CAAA;EAEA,OAAuBS,mBAAmBR,aAAEM,OAAO;IACjDC,MAAM,KAAKR;EACb,CAAA;AACF;;;ACfO,IAAMU,WAAN,MAAMA,UAAAA;EAFb,OAEaA;;;;EACX,YAAqCC,OAAe;SAAfA,QAAAA;EAAgB;EAErD,OAAcC,OAAOD,OAAyB;AAC5C,UAAME,YAAYC,YAAYC,WAAWC,MAAML,KAAAA;AAC/C,WAAO,IAAID,UAASG,SAAAA;EACtB;EAEOI,WAAmB;AACxB,WAAO,KAAKN;EACd;EAEOO,OAAOC,OAA0B;AACtC,WAAO,KAAKR,UAAUQ,MAAMR;EAC9B;AACF;;;ACdO,IAAMS,aAAN,MAAMA,YAAAA;EAHb,OAGaA;;;;EACX,YACmBC,MACjB;SADiBA,OAAAA;EAChB;EAEH,OAAcC,OAAOD,MAA0B;AAC7C,UAAME,YAAYC,YAAYC,iBAAiBC,MAAM;MAAEL;IAAK,CAAA;AAC5D,WAAO,IAAID,YAAWO,SAASL,OAAOC,UAAUF,IAAI,CAAA;EACtD;EAEA,OAAcO,YAAYP,MAA0B;AAClD,UAAME,YAAYC,YAAYK,iBAAiBH,MAAM;MAAEL;IAAK,CAAA;AAC5D,WAAO,IAAID,YAAWO,SAASL,OAAOC,UAAUF,IAAI,CAAA;EACtD;EAEOS,UAAoB;AACzB,WAAO,KAAKT;EACd;EAEOU,SAAwB;AAC7B,WAAO;MACLV,MAAM,KAAKA,KAAKW,SAAQ;IAC1B;EACF;EAEOC,gBAA+B;AACpC,WAAO;MACLZ,MAAM,KAAKA,KAAKW,SAAQ;IAC1B;EACF;AACF;;;AH/BO,IAAME,cAAN,MAAMA;EAFb,OAEaA;;;EACX,OAAcC,OAAOC,QAAuC;AAC1D,WAAOC,WAAWF,OAAOC,OAAOE,IAAI;EACtC;EAEA,OAAcC,YAAYH,QAAuC;AAC/D,WAAOC,WAAWE,YAAaH,OAAOE,IAAI;EAC5C;AACF;","names":["BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","BankName","value","create","validated","BankSchemas","nameSchema","parse","getValue","equals","other","BankEntity","name","create","validated","BankSchemas","createBankSchema","parse","BankName","reconstruct","bankEntitySchema","getName","toJSON","getValue","toPersistence","BankFactory","create","params","BankEntity","name","reconstruct"]}