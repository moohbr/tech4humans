{"version":3,"sources":["../../../../../app/domain/errors/domain-error.ts","../../../../../app/domain/errors/validation-error.ts","../../../../../app/domain/errors/user/invalid-email-error.ts","../../../../../app/domain/models/user/value-objects/email.ts","../../../../../app/domain/models/user/schemas/index.ts","../../../../../app/domain/models/user/value-objects/name.ts","../../../../../app/domain/errors/user/invalid-user-id-error.ts","../../../../../app/domain/models/user/value-objects/id.ts","../../../../../app/domain/errors/user/invalid-password-error.ts","../../../../../app/domain/models/user/value-objects/password.ts","../../../../../app/domain/models/user/entity/index.ts","../../../../../app/domain/models/user/factory/index.ts"],"sourcesContent":["export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidEmailError extends ValidationError {\n  constructor(email: string) {\n    super(`Invalid email format: ${email}`);\n    Object.setPrototypeOf(this, InvalidEmailError.prototype);\n  }\n} ","import { InvalidEmailError } from \"@errors/user/invalid-email-error\";\n\nexport class UserEmail {\n  private constructor(private readonly value: string) {\n    this.validateEmail();\n  }\n\n  public static create(email: string): UserEmail {\n    return new UserEmail(email);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  private validateEmail(): void {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(this.value)) {\n      throw new InvalidEmailError(this.value);\n    }\n  }\n\n  public equals(other: UserEmail): boolean {\n    return this.value === other.value;\n  }\n}\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { UserSchemas } from \"@models/user/schemas\";\n\nexport class UserName {\n  private constructor(private readonly value: string) {}\n\n  public static create(name: string): UserName {\n    const validatedName = UserSchemas.nameSchema.parse(name);\n    return new UserName(validatedName);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: UserName): boolean {\n    return this.value === other.value;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new UserId before persistence');\n    Object.setPrototypeOf(this, InvalidUserIdError.prototype);\n  }\n} ","import { UserSchemas } from \"@models/user/schemas\";\nimport { InvalidUserIdError } from \"@errors/user/invalid-user-id-error\";\n\nexport class UserId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n  public static create(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createNew(): UserId {\n    return new UserId(null, true);\n  }\n\n  public static createFromDatabase(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): UserId {\n    return new UserId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidUserIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: UserId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"new\";\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidPasswordError extends ValidationError {\n  constructor(message: string) {\n    super(message, []);\n    Object.setPrototypeOf(this, InvalidPasswordError.prototype);\n  }\n} ","import { InvalidPasswordError } from \"@errors/user/invalid-password-error\";\nimport bcrypt from \"bcryptjs\";\n\nexport class UserPassword {\n  private constructor(\n    private readonly value: string,\n    private readonly isHashed: boolean = false,\n  ) {\n    if (!isHashed) {\n      this.validatePassword();\n    }\n  }\n\n  public static create(plainPassword: string): UserPassword {\n    return new UserPassword(plainPassword, false);\n  }\n\n  public static createFromHash(hashedPassword: string): UserPassword {\n    return new UserPassword(hashedPassword, true);\n  }\n\n  public async hash(): Promise<UserPassword> {\n    if (this.isHashed) {\n      return this;\n    }\n    const hashedValue = await bcrypt.hash(this.value, 10);\n    return new UserPassword(hashedValue, true);\n  }\n\n  public async compare(plainPassword: string): Promise<boolean> {\n    if (!this.isHashed) {\n      throw new InvalidPasswordError(\"Cannot compare with unhashed password\");\n    }\n    return bcrypt.compare(plainPassword, this.value);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public isHashedPassword(): boolean {\n    return this.isHashed;\n  }\n\n  private validatePassword(): void {\n    if (\n      !this.value.match(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      )\n    ) {\n      throw new InvalidPasswordError(\n        \"Password must contain at least 8 characters with uppercase, lowercase, number and special character\",\n      );\n    }\n  }\n}\n","import { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserName } from \"@models/user/value-objects/name\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { UserSchemas } from \"@models/user/schemas\";\n\nexport class UserEntity {\n  private constructor(\n    private readonly id: UserId,\n    private readonly name: UserName,\n    private readonly email: UserEmail,\n    private readonly createdAt: Date,\n    private readonly password: UserPassword,\n  ) {}\n\n  public static create(\n    name: string,\n    email: string,\n    passwordHash: string,\n  ): UserEntity {\n    const validatedData = UserSchemas.createUserSchema.parse({\n      name,\n      email,\n      passwordHash,\n    });\n    return new UserEntity(\n      UserId.createNew(),\n      UserName.create(validatedData.name),\n      UserEmail.create(validatedData.email),\n      new Date(),\n      UserPassword.createFromHash(passwordHash),\n    );\n  }\n\n  public static reconstruct(\n    id: number,\n    name: string,\n    email: string,\n    createdAt: Date,\n    passwordHash: string,\n  ): UserEntity {\n    const validatedData = UserSchemas.userEntitySchema.parse({\n      id,\n      name,\n      email,\n      createdAt,\n      passwordHash,\n    });\n    return new UserEntity(\n      UserId.createFromDatabase(validatedData.id),\n      UserName.create(validatedData.name),\n      UserEmail.create(validatedData.email),\n      validatedData.createdAt,\n      UserPassword.createFromHash(passwordHash),\n    );\n  }\n\n  public getId(): UserId {\n    return this.id;\n  }\n\n  public getName(): UserName {\n    return this.name;\n  }\n\n  public getEmail(): UserEmail {\n    return this.email;\n  }\n\n  public getCreatedAt(): Date {\n    return this.createdAt;\n  }\n\n  public getPasswordHash(): string {\n    return this.password.getValue();\n  }\n\n  public toPersistence(): UserRawEntity {\n    return {\n      id: this.id.isNew() ? null : this.id.getValue(),\n      name: this.name.getValue(),\n      email: this.email.getValue(),\n      createdAt: this.createdAt,  \n      passwordHash: this.password.getValue(),\n    };\n  }\n\n  public toJSON(): Omit<UserRawEntity, \"passwordHash\"> {\n    return {\n      id: this.id.isNew() ? null : this.id.getValue(),\n      name: this.name.getValue(),\n      email: this.email.getValue(),\n      createdAt: this.createdAt,\n    };\n  }\n}\n","import { UserEntity } from \"@models/user/entity\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { CreateUserData } from \"@models/user/factory/types\";\n\nexport class UserFactory {\n  public static createUser(data: CreateUserData): UserEntity {\n    const validatedData = UserSchemas.createUserSchema.parse(data);\n    return UserEntity.create(\n      validatedData.name,\n      validatedData.email,\n      validatedData.passwordHash,\n    );\n  }\n\n  public static createUserFromRaw(rawData: unknown): UserEntity {\n    const validatedData = UserSchemas.createUserSchema.parse(rawData);\n    return UserEntity.create(\n      validatedData.name,\n      validatedData.email,\n      validatedData.passwordHash,\n    );\n  }\n}\n"],"mappings":";;;;AAAO,IAAeA,cAAf,MAAeA,qBAAoBC,MAAAA;EAA1C,OAA0CA;;;EACxCC,YAAYC,SAAiB;AAC3B,UAAMA,OAAAA;AACN,SAAKC,OAAO,KAAKF,YAAYE;AAC7BC,WAAOC,eAAe,MAAMN,aAAYO,SAAS;EACnD;AAGF;;;ACNO,IAAMC,kBAAN,MAAMA,yBAAwBC,YAAAA;EAFrC,OAEqCA;;;;EACnCC,YAAYC,SAAkCC,SAAmB,CAAA,GAAI;AACnE,UAAMD,OAAAA,GAAAA,KADsCC,SAAAA;AAE5CC,WAAOC,eAAe,MAAMN,iBAAgBO,SAAS;EACvD;EAEOC,gBAAwB;AAC7B,WAAO;EACT;EAEOC,YAAsB;AAC3B,WAAO,KAAKL;EACd;AACF;;;ACbO,IAAMM,oBAAN,MAAMA,2BAA0BC,gBAAAA;EAFvC,OAEuCA;;;EACrCC,YAAYC,OAAe;AACzB,UAAM,yBAAyBA,KAAAA,EAAO;AACtCC,WAAOC,eAAe,MAAML,mBAAkBM,SAAS;EACzD;AACF;;;ACLO,IAAMC,YAAN,MAAMA,WAAAA;EAFb,OAEaA;;;;EACX,YAAqCC,OAAe;SAAfA,QAAAA;AACnC,SAAKC,cAAa;EACpB;EAEA,OAAcC,OAAOC,OAA0B;AAC7C,WAAO,IAAIJ,WAAUI,KAAAA;EACvB;EAEOC,WAAmB;AACxB,WAAO,KAAKJ;EACd;EAEQC,gBAAsB;AAC5B,UAAMI,aAAa;AACnB,QAAI,CAACA,WAAWC,KAAK,KAAKN,KAAK,GAAG;AAChC,YAAM,IAAIO,kBAAkB,KAAKP,KAAK;IACxC;EACF;EAEOQ,OAAOC,OAA2B;AACvC,WAAO,KAAKT,UAAUS,MAAMT;EAC9B;AACF;;;ACzBA,SAASU,SAAS;AAEX,IAAMC,cAAN,MAAMA;EAFb,OAEaA;;;EACX,OAAuBC,cAAcC,EAClCC,OAAM,EACNC,MAAM,sBAAA,EACNC,IAAI,GAAG,mBAAA,EACPC,IAAI,KAAK,oCAAA;EAEZ,OAAuBC,aAAaL,EACjCC,OAAM,EACNE,IAAI,GAAG,sCAAA,EACPC,IAAI,KAAK,mCAAA,EACTE,MAAM,oBAAoB,0CAAA;EAE7B,OAAuBC,eAAeP,EACnCQ,OAAM,EACNC,IAAI,4BAAA,EACJC,SAAS,0BAAA;EAEZ,OAAuBC,iBAAiBX,EACrCC,OAAM,EACNE,IAAI,GAAG,wCAAA,EACPG,MACC,wEACA,0EAAA;EAGJ,OAAuBM,mBAAmBZ,EAAEa,OAAO;IACjDC,MAAM,KAAKT;IACXH,OAAO,KAAKH;IACZgB,cAAcf,EAAEC,OAAM,EAAGE,IAAI,GAAG,2BAAA;EAClC,CAAA;EAEA,OAAuBa,mBAAmBhB,EAAEa,OAAO;IACjDI,IAAI,KAAKV;IACTO,MAAM,KAAKT;IACXH,OAAO,KAAKH;IACZmB,WAAWlB,EAAEmB,KAAI;IACjBJ,cAAcf,EAAEC,OAAM,EAAGE,IAAI,GAAG,2BAAA;EAClC,CAAA;AACF;;;ACvCO,IAAMiB,WAAN,MAAMA,UAAAA;EAFb,OAEaA;;;;EACX,YAAqCC,OAAe;SAAfA,QAAAA;EAAgB;EAErD,OAAcC,OAAOC,MAAwB;AAC3C,UAAMC,gBAAgBC,YAAYC,WAAWC,MAAMJ,IAAAA;AACnD,WAAO,IAAIH,UAASI,aAAAA;EACtB;EAEOI,WAAmB;AACxB,WAAO,KAAKP;EACd;EAEOQ,OAAOC,OAA0B;AACtC,WAAO,KAAKT,UAAUS,MAAMT;EAC9B;AACF;;;ACfO,IAAMU,qBAAN,MAAMA,4BAA2BC,gBAAAA;EAFxC,OAEwCA;;;EACtCC,cAAc;AACZ,UAAM,mDAAA;AACNC,WAAOC,eAAe,MAAMJ,oBAAmBK,SAAS;EAC1D;AACF;;;ACJO,IAAMC,SAAN,MAAMA,QAAAA;EAHb,OAGaA;;;;;EACX,YACmBC,OACAC,UAAmB,OACpC;SAFiBD,QAAAA;SACAC,UAAAA;EAChB;EAEH,OAAcC,OAAOC,IAAoB;AACvC,UAAMC,cAAcC,YAAYC,aAAaC,MAAMJ,EAAAA;AACnD,WAAO,IAAIJ,QAAOK,aAAa,KAAA;EACjC;EAEA,OAAcI,YAAoB;AAChC,WAAO,IAAIT,QAAO,MAAM,IAAA;EAC1B;EAEA,OAAcU,mBAAmBN,IAAoB;AACnD,UAAMC,cAAcC,YAAYC,aAAaC,MAAMJ,EAAAA;AACnD,WAAO,IAAIJ,QAAOK,aAAa,KAAA;EACjC;EAEA,OAAcM,aAAaP,IAAoB;AAC7C,WAAO,IAAIJ,QAAOI,IAAI,KAAA;EACxB;EAEOQ,WAAmB;AACxB,QAAI,KAAKX,UAAU,MAAM;AACvB,YAAM,IAAIY,mBAAAA;IACZ;AACA,WAAO,KAAKZ;EACd;EAEOa,QAAiB;AACtB,WAAO,KAAKZ;EACd;EAEOa,OAAOC,OAAwB;AACpC,WAAO,KAAKf,UAAUe,MAAMf;EAC9B;EAEOgB,WAAmB;AACxB,WAAO,KAAKhB,OAAOgB,SAAAA,KAAc;EACnC;AACF;;;AC3CO,IAAMC,uBAAN,MAAMA,8BAA6BC,gBAAAA;EAF1C,OAE0CA;;;EACxCC,YAAYC,SAAiB;AAC3B,UAAMA,SAAS,CAAA,CAAE;AACjBC,WAAOC,eAAe,MAAML,sBAAqBM,SAAS;EAC5D;AACF;;;ACNA,OAAOC,YAAY;AAEZ,IAAMC,eAAN,MAAMA,cAAAA;EAHb,OAGaA;;;;;EACX,YACmBC,OACAC,WAAoB,OACrC;SAFiBD,QAAAA;SACAC,WAAAA;AAEjB,QAAI,CAACA,UAAU;AACb,WAAKC,iBAAgB;IACvB;EACF;EAEA,OAAcC,OAAOC,eAAqC;AACxD,WAAO,IAAIL,cAAaK,eAAe,KAAA;EACzC;EAEA,OAAcC,eAAeC,gBAAsC;AACjE,WAAO,IAAIP,cAAaO,gBAAgB,IAAA;EAC1C;EAEA,MAAaC,OAA8B;AACzC,QAAI,KAAKN,UAAU;AACjB,aAAO;IACT;AACA,UAAMO,cAAc,MAAMC,OAAOF,KAAK,KAAKP,OAAO,EAAA;AAClD,WAAO,IAAID,cAAaS,aAAa,IAAA;EACvC;EAEA,MAAaE,QAAQN,eAAyC;AAC5D,QAAI,CAAC,KAAKH,UAAU;AAClB,YAAM,IAAIU,qBAAqB,uCAAA;IACjC;AACA,WAAOF,OAAOC,QAAQN,eAAe,KAAKJ,KAAK;EACjD;EAEOY,WAAmB;AACxB,WAAO,KAAKZ;EACd;EAEOa,mBAA4B;AACjC,WAAO,KAAKZ;EACd;EAEQC,mBAAyB;AAC/B,QACE,CAAC,KAAKF,MAAMc,MACV,sEAAA,GAEF;AACA,YAAM,IAAIH,qBACR,qGAAA;IAEJ;EACF;AACF;;;ACjDO,IAAMI,aAAN,MAAMA,YAAAA;EANb,OAMaA;;;;;;;;EACX,YACmBC,IACAC,MACAC,OACAC,WACAC,UACjB;SALiBJ,KAAAA;SACAC,OAAAA;SACAC,QAAAA;SACAC,YAAAA;SACAC,WAAAA;EAChB;EAEH,OAAcC,OACZJ,MACAC,OACAI,cACY;AACZ,UAAMC,gBAAgBC,YAAYC,iBAAiBC,MAAM;MACvDT;MACAC;MACAI;IACF,CAAA;AACA,WAAO,IAAIP,YACTY,OAAOC,UAAS,GAChBC,SAASR,OAAOE,cAAcN,IAAI,GAClCa,UAAUT,OAAOE,cAAcL,KAAK,GACpC,oBAAIa,KAAAA,GACJC,aAAaC,eAAeX,YAAAA,CAAAA;EAEhC;EAEA,OAAcY,YACZlB,IACAC,MACAC,OACAC,WACAG,cACY;AACZ,UAAMC,gBAAgBC,YAAYW,iBAAiBT,MAAM;MACvDV;MACAC;MACAC;MACAC;MACAG;IACF,CAAA;AACA,WAAO,IAAIP,YACTY,OAAOS,mBAAmBb,cAAcP,EAAE,GAC1Ca,SAASR,OAAOE,cAAcN,IAAI,GAClCa,UAAUT,OAAOE,cAAcL,KAAK,GACpCK,cAAcJ,WACda,aAAaC,eAAeX,YAAAA,CAAAA;EAEhC;EAEOe,QAAgB;AACrB,WAAO,KAAKrB;EACd;EAEOsB,UAAoB;AACzB,WAAO,KAAKrB;EACd;EAEOsB,WAAsB;AAC3B,WAAO,KAAKrB;EACd;EAEOsB,eAAqB;AAC1B,WAAO,KAAKrB;EACd;EAEOsB,kBAA0B;AAC/B,WAAO,KAAKrB,SAASsB,SAAQ;EAC/B;EAEOC,gBAA+B;AACpC,WAAO;MACL3B,IAAI,KAAKA,GAAG4B,MAAK,IAAK,OAAO,KAAK5B,GAAG0B,SAAQ;MAC7CzB,MAAM,KAAKA,KAAKyB,SAAQ;MACxBxB,OAAO,KAAKA,MAAMwB,SAAQ;MAC1BvB,WAAW,KAAKA;MAChBG,cAAc,KAAKF,SAASsB,SAAQ;IACtC;EACF;EAEOG,SAA8C;AACnD,WAAO;MACL7B,IAAI,KAAKA,GAAG4B,MAAK,IAAK,OAAO,KAAK5B,GAAG0B,SAAQ;MAC7CzB,MAAM,KAAKA,KAAKyB,SAAQ;MACxBxB,OAAO,KAAKA,MAAMwB,SAAQ;MAC1BvB,WAAW,KAAKA;IAClB;EACF;AACF;;;AC3FO,IAAM2B,cAAN,MAAMA;EAJb,OAIaA;;;EACX,OAAcC,WAAWC,MAAkC;AACzD,UAAMC,gBAAgBC,YAAYC,iBAAiBC,MAAMJ,IAAAA;AACzD,WAAOK,WAAWC,OAChBL,cAAcM,MACdN,cAAcO,OACdP,cAAcQ,YAAY;EAE9B;EAEA,OAAcC,kBAAkBC,SAA8B;AAC5D,UAAMV,gBAAgBC,YAAYC,iBAAiBC,MAAMO,OAAAA;AACzD,WAAON,WAAWC,OAChBL,cAAcM,MACdN,cAAcO,OACdP,cAAcQ,YAAY;EAE9B;AACF;","names":["DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidEmailError","ValidationError","constructor","email","Object","setPrototypeOf","prototype","UserEmail","value","validateEmail","create","email","getValue","emailRegex","test","InvalidEmailError","equals","other","z","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","UserName","value","create","name","validatedName","UserSchemas","nameSchema","parse","getValue","equals","other","InvalidUserIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","UserId","value","isNewId","create","id","validatedId","UserSchemas","userIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidUserIdError","isNew","equals","other","toString","InvalidPasswordError","ValidationError","constructor","message","Object","setPrototypeOf","prototype","bcrypt","UserPassword","value","isHashed","validatePassword","create","plainPassword","createFromHash","hashedPassword","hash","hashedValue","bcrypt","compare","InvalidPasswordError","getValue","isHashedPassword","match","UserEntity","id","name","email","createdAt","password","create","passwordHash","validatedData","UserSchemas","createUserSchema","parse","UserId","createNew","UserName","UserEmail","Date","UserPassword","createFromHash","reconstruct","userEntitySchema","createFromDatabase","getId","getName","getEmail","getCreatedAt","getPasswordHash","getValue","toPersistence","isNew","toJSON","UserFactory","createUser","data","validatedData","UserSchemas","createUserSchema","parse","UserEntity","create","name","email","passwordHash","createUserFromRaw","rawData"]}