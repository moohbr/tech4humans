{"version":3,"sources":["../../../../app/domain/services/auth/index.ts"],"sourcesContent":["import { AuthServiceInterface } from \"@services/auth/interfaces\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { TokenPayload } from \"@services/auth/types\";\n\nexport class AuthService implements AuthServiceInterface {\n  private readonly jwtSecret: string;\n  private readonly jwtExpiresIn: string;\n\n  constructor() {\n    this.jwtSecret = process.env.JWT_SECRET;\n    this.jwtExpiresIn = \"1h\";\n  }\n\n  public async hashPassword(raw: string): Promise<string> {\n    return bcrypt.hash(raw, 10);\n  }\n\n  public async comparePassword(raw: string, hash: string): Promise<boolean> {\n    return bcrypt.compare(raw, hash);\n  }\n\n  public generateToken(userId: number): string {\n    return jwt.sign({ userId }, this.jwtSecret, { \n      expiresIn: this.jwtExpiresIn,\n    });\n  }\n\n  public verifyToken(token: string): TokenPayload {\n    const decoded = jwt.verify(token, this.jwtSecret) as TokenPayload;\n    return decoded;\n  }\n}\n"],"mappings":";;;;AACA,OAAOA,YAAY;AACnB,OAAOC,SAAS;AAGT,IAAMC,cAAN,MAAMA;EAJb,OAIaA;;;EACMC;EACAC;EAEjBC,cAAc;AACZ,SAAKF,YAAYG,QAAQC,IAAIC;AAC7B,SAAKJ,eAAe;EACtB;EAEA,MAAaK,aAAaC,KAA8B;AACtD,WAAOC,OAAOC,KAAKF,KAAK,EAAA;EAC1B;EAEA,MAAaG,gBAAgBH,KAAaE,MAAgC;AACxE,WAAOD,OAAOG,QAAQJ,KAAKE,IAAAA;EAC7B;EAEOG,cAAcC,QAAwB;AAC3C,WAAOC,IAAIC,KAAK;MAAEF;IAAO,GAAG,KAAKb,WAAW;MAC1CgB,WAAW,KAAKf;IAClB,CAAA;EACF;EAEOgB,YAAYC,OAA6B;AAC9C,UAAMC,UAAUL,IAAIM,OAAOF,OAAO,KAAKlB,SAAS;AAChD,WAAOmB;EACT;AACF;","names":["bcrypt","jwt","AuthService","jwtSecret","jwtExpiresIn","constructor","process","env","JWT_SECRET","hashPassword","raw","bcrypt","hash","comparePassword","compare","generateToken","userId","jwt","sign","expiresIn","verifyToken","token","decoded","verify"]}