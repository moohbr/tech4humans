{"version":3,"sources":["../../../../../app/infrastructure/http/routes/base/controller.ts","../../../../../app/infrastructure/logger/index.ts"],"sourcesContent":["import { logger } from \"@infrastructure/logger\";\nimport { Response } from \"express\";\nimport { ZodError } from \"zod\";\n\nexport abstract class BaseController {\n  protected sendSuccessResponse(\n    res: Response,\n    message: string,\n    data?: unknown,\n    statusCode: number = 200,\n  ): void {\n    const response: any = {\n      message,\n    };\n\n    if (data !== undefined) {\n      response.data = data;\n    }\n\n    res.status(statusCode).json(response);\n  }\n\n  protected sendErrorResponse(\n    res: Response,\n    message: string,\n    errors: string[] = [],\n    statusCode: number = 422,\n  ): void {\n    logger.error(\"BaseController.sendErrorResponse\", message);\n    res.status(statusCode).json({\n      message,\n      errors,\n    });\n  }\n\n  protected getErrorStatusCode(\n    message: string,\n    hasValidationErrors: boolean,\n  ): number {\n    if (hasValidationErrors) return 400;\n\n    const lowerMessage = message.toLowerCase();\n\n    if (\n      lowerMessage.includes(\"invalid credentials\") ||\n      lowerMessage.includes(\"authentication failed\")\n    ) {\n      return 401;\n    }\n\n    if (\n      lowerMessage.includes(\"unauthorized\") ||\n      lowerMessage.includes(\"permission\") ||\n      lowerMessage.includes(\"account locked\") ||\n      lowerMessage.includes(\"account disabled\")\n    ) {\n      return 403;\n    }\n\n    if (lowerMessage.includes(\"not found\")) {\n      return 404;\n    }\n\n    if (\n      lowerMessage.includes(\"already exists\") ||\n      lowerMessage.includes(\"duplicate\")\n    ) {\n      return 409;\n    }\n\n    return 422;\n  }\n\n  protected handleControllerError(\n    error: unknown,\n    res: Response,\n    controllerName: string,\n  ): void {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map((err) => ({\n        field: err.path.join(\".\"),\n        message: err.message,\n        code: err.code,\n      }));\n      res.status(400).json({\n        success: false,\n        message: \"Invalid request format\",\n        errors,\n      });\n      return;\n    }\n\n    logger.error(`${controllerName} Error:`, error);\n    res.status(500).json({\n      success: false,\n      message: error instanceof Error ? error.message : \"Internal server error\",\n    });\n  }\n\n  protected validateRequiredParam(\n    param: string | undefined,\n    paramName: string,\n    res: Response,\n  ): boolean {\n    if (!param) {\n      this.sendErrorResponse(\n        res,\n        `${paramName} is required`,\n        [`${paramName} parameter is missing`],\n        400,\n      );\n      return false;\n    }\n    return true;\n  }\n}\n","import winston from \"winston\";\n\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf((info) => {\n    const { timestamp, level, message, stack, ...meta } = info;\n\n    const levelColors: Record<string, string> = {\n      error: \"\\x1b[31m\", // red\n      warn: \"\\x1b[33m\", // yellow\n      info: \"\\x1b[32m\", // green\n      debug: \"\\x1b[36m\", // cyan\n      verbose: \"\\x1b[35m\", // magenta\n    };\n\n    const resetColor = \"\\x1b[0m\";\n    const levelColor = levelColors[level] || \"\";\n\n    let logMessage = `${timestamp} [${levelColor}${level.toUpperCase()}${resetColor}]: ${message}`;\n\n    if (stack) {\n      logMessage += `\\n${stack}`;\n    }\n\n    const excludeFields = [\"timestamp\", \"level\", \"message\", \"stack\"];\n    const filteredMeta = Object.keys(meta)\n      .filter((key) => !excludeFields.includes(key))\n      .reduce(\n        (obj, key) => {\n          obj[key] = meta[key];\n          return obj;\n        },\n        {} as Record<string, unknown>,\n      );\n\n    const metaKeys = Object.keys(filteredMeta);\n    if (metaKeys.length > 0) {\n      const metaString = JSON.stringify(filteredMeta, null, 2);\n      logMessage += `\\n${metaString}`;\n    }\n\n    return logMessage;\n  }),\n);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || (isProduction ? \"warn\" : \"debug\"),\n  defaultMeta: {\n    service: \"tech4humans\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  transports: [\n    new winston.transports.Console({\n      format: consoleFormat,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n  ],\n  exitOnError: false,\n});\n\nexport const morganStream = {\n  write: (message: string) => {\n    logger.info(message.trim(), { component: \"http\" });\n  },\n};\n\nexport const logWithContext = {\n  database: (message: string, meta?: object) => {\n    logger.info(message, { component: \"database\", ...meta });\n  },\n\n  server: (message: string, meta?: object) => {\n    logger.info(message, { component: \"server\", ...meta });\n  },\n\n  auth: (message: string, meta?: object) => {\n    logger.info(message, { component: \"auth\", ...meta });\n  },\n\n  api: (message: string, meta?: object) => {\n    logger.info(message, { component: \"api\", ...meta });\n  },\n\n  error: (message: string, error?: Error, meta?: object) => {\n    logger.error(message, {\n      error: error?.message,\n      stack: error?.stack,\n      ...meta,\n    });\n  },\n};\n"],"mappings":"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","names":["consoleFormat","winston","format","combine","timestamp","errors","stack","printf","info","level","message","meta","levelColors","error","warn","debug","verbose","resetColor","levelColor","logMessage","toUpperCase","excludeFields","filteredMeta","Object","keys","filter","key","includes","reduce","obj","metaKeys","length","metaString","JSON","stringify","isProduction","process","env","NODE_ENV","logger","createLogger","LOG_LEVEL","defaultMeta","service","environment","transports","Console","handleExceptions","handleRejections","exitOnError","BaseController","sendSuccessResponse","res","message","data","statusCode","response","undefined","status","json","sendErrorResponse","errors","logger","error","getErrorStatusCode","hasValidationErrors","lowerMessage","toLowerCase","includes","handleControllerError","controllerName","ZodError","map","err","field","path","join","code","success","Error","validateRequiredParam","param","paramName"]}