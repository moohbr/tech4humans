{"version":3,"sources":["../../../../../../node_modules/tsup/assets/esm_shims.js","../../../../../../app/infrastructure/http/middlewares/validation.ts","../../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../../app/domain/models/bank/schemas/index.ts","../../../../../../app/domain/models/user/schemas/index.ts","../../../../../../app/domain/models/account/schemas/index.ts","../../../../../../app/domain/models/account/value-objects/type.ts","../../../../../../app/domain/errors/domain-error.ts","../../../../../../app/domain/errors/validation-error.ts","../../../../../../app/domain/errors/user/invalid-user-id-error.ts","../../../../../../app/domain/models/user/value-objects/id.ts","../../../../../../app/domain/errors/account/invalid-balance-error.ts","../../../../../../app/domain/models/account/value-objects/balance.ts","../../../../../../app/domain/errors/account/invalid-account-id-error.ts","../../../../../../app/domain/models/account/value-objects/id.ts","../../../../../../app/domain/models/bank/value-objects/name.ts","../../../../../../app/domain/models/account/entity/index.ts","../../../../../../app/infrastructure/datasources/databases/typeorm/models/account.ts","../../../../../../app/infrastructure/datasources/databases/typeorm/models/user.ts","../../../../../../app/infrastructure/datasources/databases/typeorm/models/bank.ts","../../../../../../app/infrastructure/datasources/databases/typeorm/models/transactions.ts","../../../../../../app/infrastructure/datasources/databases/typeorm/index.ts","../../../../../../app/config/schemas.ts","../../../../../../app/config/enums.ts","../../../../../../app/infrastructure/logger/index.ts","../../../../../../app/config/index.ts","../../../../../../app/domain/errors/not-found-error.ts","../../../../../../app/domain/errors/account/account-not-found-error.ts","../../../../../../app/infrastructure/datasources/databases/typeorm/repositories/account/index.ts","../../../../../../app/domain/models/bank/entity/index.ts","../../../../../../app/infrastructure/datasources/databases/typeorm/repositories/bank/index.ts","../../../../../../app/infrastructure/datasources/databases/typeorm/repositories/transaction/index.ts","../../../../../../app/domain/models/transaction/schemas/index.ts","../../../../../../app/domain/errors/transaction/invalid-transaction-id-error.ts","../../../../../../app/domain/models/transaction/value-objects/id.ts","../../../../../../app/domain/models/transaction/value-objects/amount.ts","../../../../../../app/domain/models/transaction/value-objects/description.ts","../../../../../../app/domain/models/transaction/value-objects/type.ts","../../../../../../app/domain/models/transaction/entity/index.ts","../../../../../../app/domain/errors/transaction/transaction-not-found-error.ts","../../../../../../app/domain/errors/user/invalid-email-error.ts","../../../../../../app/domain/models/user/value-objects/email.ts","../../../../../../app/domain/models/user/value-objects/name.ts","../../../../../../app/domain/errors/user/invalid-password-error.ts","../../../../../../app/domain/models/user/value-objects/password.ts","../../../../../../app/domain/models/user/entity/index.ts","../../../../../../app/domain/errors/user/user-not-found-error.ts","../../../../../../app/infrastructure/datasources/databases/typeorm/repositories/user/index.ts","../../../../../../app/domain/errors/dependency-not-found-error.ts","../../../../../../app/domain/use-cases/account/add-to-a-user/schemas.ts","../../../../../../app/domain/use-cases/account/add-to-a-user/request.ts","../../../../../../app/infrastructure/http/routes/base/controller.ts","../../../../../../app/infrastructure/http/routes/v1/account/controllers/add-to-a-user.ts","../../../../../../app/domain/use-cases/account/delete-of-a-user/schemas.ts","../../../../../../app/domain/use-cases/account/delete-of-a-user/request.ts","../../../../../../app/infrastructure/http/routes/v1/account/controllers/delete-of-a-user.ts","../../../../../../app/domain/use-cases/account/get-all-of-user/schemas.ts","../../../../../../app/domain/use-cases/account/get-all-of-user/request.ts","../../../../../../app/infrastructure/http/routes/v1/account/controllers/get-all-of-user.ts","../../../../../../app/domain/use-cases/account/update-of-a-user/schemas.ts","../../../../../../app/domain/use-cases/account/update-of-a-user/request.ts","../../../../../../app/infrastructure/http/routes/v1/account/controllers/update-of-a-user.ts","../../../../../../app/infrastructure/http/routes/v1/banks/controllers/get-all-banks.ts","../../../../../../app/domain/use-cases/transaction/add-to-a-user/schemas.ts","../../../../../../app/domain/use-cases/transaction/add-to-a-user/request.ts","../../../../../../app/infrastructure/http/routes/v1/transaction/controllers/add-to-a-user.ts","../../../../../../app/domain/use-cases/transaction/get-all-of-user/schemas.ts","../../../../../../app/domain/use-cases/transaction/get-all-of-user/request.ts","../../../../../../app/infrastructure/http/routes/v1/transaction/controllers/get-all-of-user.ts","../../../../../../app/domain/use-cases/user/create/schemas.ts","../../../../../../app/domain/use-cases/user/create/request.ts","../../../../../../app/infrastructure/http/routes/v1/users/controllers/create.ts","../../../../../../app/domain/use-cases/user/delete/schemas.ts","../../../../../../app/domain/use-cases/user/delete/request.ts","../../../../../../app/infrastructure/http/routes/v1/users/controllers/delete.ts","../../../../../../app/domain/use-cases/user/login/schemas.ts","../../../../../../app/domain/use-cases/user/login/request.ts","../../../../../../app/infrastructure/http/routes/v1/users/controllers/login.ts","../../../../../../app/domain/use-cases/user/update/schemas.ts","../../../../../../app/domain/use-cases/user/update/request.ts","../../../../../../app/infrastructure/http/routes/v1/users/controllers/update.ts","../../../../../../app/domain/use-cases/account/add-to-a-user/index.ts","../../../../../../app/domain/use-cases/account/add-to-a-user/response.ts","../../../../../../app/domain/use-cases/account/delete-of-a-user/index.ts","../../../../../../app/domain/use-cases/account/delete-of-a-user/response.ts","../../../../../../app/domain/use-cases/account/get-all-of-user/index.ts","../../../../../../app/domain/use-cases/account/get-all-of-user/response.ts","../../../../../../app/domain/use-cases/account/update-of-a-user/response.ts","../../../../../../app/domain/use-cases/account/update-of-a-user/index.ts","../../../../../../app/domain/use-cases/banks/get-all/response.ts","../../../../../../app/domain/errors/bank/bank-not-found-error.ts","../../../../../../app/domain/use-cases/banks/get-all/index.ts","../../../../../../app/domain/use-cases/transaction/add-to-a-user/index.ts","../../../../../../app/domain/use-cases/transaction/add-to-a-user/response.ts","../../../../../../app/domain/errors/transaction/insufficient-funds-error.ts","../../../../../../app/domain/errors/transaction/invalid-transaction-type-error.ts","../../../../../../app/domain/use-cases/transaction/get-all-of-user/index.ts","../../../../../../app/domain/use-cases/transaction/get-all-of-user/response.ts","../../../../../../app/domain/use-cases/user/create/index.ts","../../../../../../app/domain/errors/user/invalid-user-response-error.ts","../../../../../../app/domain/use-cases/user/create/response.ts","../../../../../../app/domain/errors/conflict-error.ts","../../../../../../app/domain/errors/user/user-already-exists-error.ts","../../../../../../app/domain/use-cases/user/delete/index.ts","../../../../../../app/domain/use-cases/user/delete/response.ts","../../../../../../app/domain/use-cases/user/login/index.ts","../../../../../../app/domain/errors/user/invalid-auth-result-error.ts","../../../../../../app/domain/use-cases/user/login/response.ts","../../../../../../app/domain/errors/not-authorized-error.ts","../../../../../../app/domain/errors/user/invalid-credentials-error.ts","../../../../../../app/domain/use-cases/user/update/index.ts","../../../../../../app/domain/use-cases/user/update/response.ts","../../../../../../app/domain/services/auth/index.ts","../../../../../../app/infrastructure/di/container.ts","../../../../../../app/infrastructure/http/middlewares/error.ts","../../../../../../app/infrastructure/http/routes/factory/index.ts","../../../../../../app/infrastructure/http/routes/base/router.ts","../../../../../../app/infrastructure/http/routes/v1/users/index.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","import { Request, Response, NextFunction } from \"express\";\nimport { ZodSchema, ZodError } from \"zod\";\n\nexport class ValidationMiddleware {\n  static validate(schema: ZodSchema) {\n    return (req: Request, res: Response, next: NextFunction): void => {\n      try {\n        schema.parse({\n          body: req.body,\n          query: req.query,\n          params: req.params,\n        });\n        next();\n      } catch (error) {\n        if (error instanceof ZodError) {\n          const errors = error.errors.map((err) => ({\n            field: err.path.join(\".\"),\n            message: err.message,\n            code: err.code,\n          }));\n\n          res.status(400).json({\n            success: false,\n            message: \"Validation failed\",\n            errors,\n          });\n          return;\n        }\n\n        res.status(500).json({\n          success: false,\n          message: \"Internal server error\",\n        });\n      }\n    };\n  }\n}\n","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupança\",\n  CREDITO = \"Crédito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"Débito\",\n  CREDITO = \"Crédito\",\n  TRANSFERENCIA = \"Transferência\",\n}\n","import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AccountSchemas {\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly accountIdSchema = z\n    .number()\n    .int(\"Account ID must be an integer\")\n    .positive(\"Account ID must be positive\");\n\n  public static readonly accountTypeSchema = z.nativeEnum(AccountType);\n\n  public static readonly balanceSchema = z\n    .number()\n    // .max(9999999999, \"Balance is too high\")\n    // .min(-9999999999, \"Balance is too low\")\n    .refine((val) => Number.isFinite(val), {\n      message: \"Balance must be a finite number\",\n    });\n\n  public static readonly createAccountSchema = z.object({\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    userId: UserSchemas.userIdSchema,\n    bankName: BankSchemas.nameSchema,\n  });\n\n  public static readonly accountEntitySchema = z.object({\n    id: this.accountIdSchema,\n    name: this.nameSchema,\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    createdAt: z.date(),\n  });\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountSchemas } from \"@models/account/schemas\";\n\nexport class AccountTypeVO {\n  private constructor(private value: AccountType) {}\n\n  public static create(type: unknown): AccountTypeVO {\n    const validatedType = AccountSchemas.accountTypeSchema.parse(type);\n    return new AccountTypeVO(validatedType);\n  }\n\n  public getValue(): AccountType {\n    return this.value;\n  }\n  \n  public setValue(value: AccountType): void {\n    this.value = value;\n  }\n}\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new UserId before persistence');\n    Object.setPrototypeOf(this, InvalidUserIdError.prototype);\n  }\n} ","import { UserSchemas } from \"@models/user/schemas\";\nimport { InvalidUserIdError } from \"@errors/user/invalid-user-id-error\";\n\nexport class UserId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n  public static create(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createNew(): UserId {\n    return new UserId(null, true);\n  }\n\n  public static createFromDatabase(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): UserId {\n    return new UserId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidUserIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: UserId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"new\";\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidBalanceError extends ValidationError {\n  constructor(value: unknown) {\n    super(`Balance must be a finite number. Got: ${value}`);\n    Object.setPrototypeOf(this, InvalidBalanceError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidBalanceError } from \"@errors/account/invalid-balance-error\";\n\nexport class AccountBalance {\n  private constructor(private value: number) {\n    if (!Number.isFinite(value)) {\n      throw new InvalidBalanceError(value);\n    }\n  }\n\n  public static create(type: unknown): AccountBalance {\n    const validatedType = AccountSchemas.balanceSchema.parse(type);\n    return new AccountBalance(validatedType);\n  }\n\n  public getValue(): number {\n    return this.value;\n  }\n\n  public isNegative(): boolean {\n    return this.value < 0;\n  }\n\n  public isPositive(): boolean {\n    return this.value > 0;\n  }\n\n  public isZero(): boolean {\n    return this.value === 0;\n  }\n\n  public increase(amount: number): void {\n    this.value += amount;\n  }\n\n  public decrease(amount: number): void {\n    this.value -= amount;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidAccountIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new AccountId before persistence');\n    Object.setPrototypeOf(this, InvalidAccountIdError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidAccountIdError } from \"@errors/account/invalid-account-id-error\";\n\nexport class AccountId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n    public static create(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createNew(): AccountId {\n    return new AccountId(null, true);\n  }\n\n  public static createFromDatabase(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): AccountId {\n    return new AccountId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidAccountIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: AccountId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"\";\n  }\n}\n","import { BankSchemas } from \"@models/bank/schemas\";\n\nexport class BankName {\n  private constructor(private readonly value: string) {}\n\n  public static create(value: string): BankName {\n    const validated = BankSchemas.nameSchema.parse(value);\n    return new BankName(validated);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: BankName): boolean {\n    return this.value === other.value;\n  }\n}","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountTypeVO } from \"@models/account/value-objects/type\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { AccountBalance } from \"@models/account/value-objects/balance\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { BankName } from \"@models/bank/value-objects/name\";\nimport { AccountRawEntity } from \"./types\";\n\nexport class AccountEntity {\n  private constructor(\n    private readonly id: AccountId,\n    private readonly type: AccountTypeVO,\n    private readonly balance: AccountBalance,\n    private readonly createdAt: Date,\n    private readonly userId: UserId,\n    private readonly bankName: BankName,\n  ) {}\n\n  public static create(\n    type: AccountType,\n    balance: number,\n    userId: number,\n    bankName: string,\n  ): AccountEntity {\n    const validated = AccountSchemas.createAccountSchema.parse({\n      type,\n      balance,\n      userId,\n      bankName,\n    });\n\n    return new AccountEntity(\n      AccountId.createNew(),\n      AccountTypeVO.create(validated.type),\n      AccountBalance.create(validated.balance),\n      new Date(),\n      UserId.create(userId),\n      BankName.create(bankName),\n    );\n  }\n\n  public static reconstruct(\n    id: number,\n    type: AccountType,\n    balance: number,\n    createdAt: Date,\n    userId: number,\n      bankName: string,\n  ): AccountEntity {\n    const validated = AccountSchemas.accountEntitySchema.parse({\n      id,\n      type,\n      balance,\n      createdAt,\n    });\n\n    return new AccountEntity(\n      AccountId.create(validated.id),\n      AccountTypeVO.create(validated.type),\n      AccountBalance.create(validated.balance),\n      validated.createdAt,\n      UserId.create(userId),\n      BankName.create(bankName),\n    );\n  }\n\n  public toPersistence(): AccountRawEntity  {\n    return {\n      id: this.id.getValue(),\n      type: this.type.getValue(),\n      balance: this.balance.getValue(),\n      createdAt: this.createdAt,\n      userId: this.userId.getValue(),\n      bankName: this.bankName.getValue(),\n    };\n  }\n\n  public toJSON(): AccountRawEntity {\n    return {\n      id: this.id.getValue(),\n      type: this.type.getValue(),\n      balance: this.balance.getValue(),\n      createdAt: this.createdAt,\n      userId: this.userId.getValue(),\n      bankName: this.bankName.getValue(),\n    };\n  }\n\n  public increaseBalance(amount: number): void {\n    this.balance.increase(amount);\n  }\n\n  public decreaseBalance(amount: number): void {\n    this.balance.decrease(amount);\n  }\n\n  public getBalance(): number {\n    return this.balance.getValue();\n  }\n\n  public getUserId(): number {\n    return this.userId.getValue();\n  }\n\n  public setType(type: AccountType): void {\n    this.type.setValue(type);\n  }\n}\n","import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\n@Entity({ name: \"accounts\" })\nexport class Account {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\", enum: AccountType, default: AccountType.CORRENTE })\n  type!: AccountType;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2, default: 0 })\n  balance!: number;\n\n  @ManyToOne(() => User, (user) => user.accounts)\n  user!: User;\n\n  @ManyToOne(() => Bank, (bank) => bank.accounts)\n  bank!: Bank;\n\n  @OneToMany(() => Transaction, (t) => t.sourceAccount)\n  transactions!: Transaction[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"users\" })\nexport class User {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\" })\n  name!: string;\n\n  @Column({ type: \"text\", unique: true })\n  email!: string;\n\n  @Column({ type: \"text\", name: \"password_hash\" })\n  passwordHash!: string;\n\n  @OneToMany(() => Account, (account) => account.user, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import { Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"banks\" })\nexport class Bank {\n  @PrimaryColumn({ type: \"text\", unique: true })\n  name!: string;\n\n  @OneToMany(() => Account, (account) => account.bank, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n}\n","import {\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"transactions\" })\nexport class Transaction {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({\n    type: \"text\",\n    enum: TransactionType,\n    default: TransactionType.DEBITO,\n  })\n  type!: TransactionType;\n\n  @ManyToOne(() => Account, { nullable: true })\n  sourceAccount!: Account;\n\n  @ManyToOne(() => Account, { nullable: true })\n  destinationAccount!: Account;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2 })\n  amount!: number;\n\n  @Column({ type: \"text\", nullable: true })\n  description!: string;\n\n  @Column({ type: \"datetime\", default: () => \"CURRENT_TIMESTAMP\" })\n  transactionDate!: Date;\n}\n","import \"reflect-metadata\";\nimport \"@config\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport path from \"path\";\nimport { DataSource } from \"typeorm\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\nconst migrationsPath = path.resolve(__dirname, \"../../../../../migrations/\");\n\nexport const AppDataSource = new DataSource({\n  type: \"sqlite\",\n  database: process.env.DATABASE_PATH,\n  synchronize: process.env.NODE_ENV === \"development\",\n  logging: process.env.NODE_ENV !== \"development\",\n  entities: [User, Bank, Account, Transaction],\n  migrations: [migrationsPath + \"/*{.ts,.js}\"],\n  migrationsTableName: \"migrations\",\n});\n","import fs from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\nimport { NODE_ENV } from \"./enums\";\n\nexport class ConfigSchemas {\n  private readonly databasePathSchema = z\n    .string()\n    .min(1)\n    .refine((val) => val.endsWith(\".sqlite\"), {\n      message: \"Database path must end with .sqlite\",\n    })\n    .refine((val) => fs.existsSync(path.resolve(val)), {\n      message: \"Database file does not exist\",\n    });\n\n  public readonly envSchema = z.object({\n    DATABASE_PATH: this.databasePathSchema.default(\"db.sqlite\"),\n    APP_PORT: z.coerce.number().default(8080),\n    APP_HOST: z.string().optional().default(\"0.0.0.0\"),\n    JWT_SECRET: z.string().optional().default(\"keyboard cat\"),\n    NODE_ENV: z.nativeEnum(NODE_ENV).default(NODE_ENV.DEV),\n    SESSION_SECRET: z.string().optional().default(\"keyboard cat\"),\n    OPENAI_API_KEY: z.string().default(\"\"),\n  });\n}\n","export enum NODE_ENV {\n  DEV = \"development\",\n  PROD = \"production\",\n  TEST = \"test\",\n}\n","import winston from \"winston\";\n\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf((info) => {\n    const { timestamp, level, message, stack, ...meta } = info;\n\n    const levelColors: Record<string, string> = {\n      error: \"\\x1b[31m\", // red\n      warn: \"\\x1b[33m\", // yellow\n      info: \"\\x1b[32m\", // green\n      debug: \"\\x1b[36m\", // cyan\n      verbose: \"\\x1b[35m\", // magenta\n    };\n\n    const resetColor = \"\\x1b[0m\";\n    const levelColor = levelColors[level] || \"\";\n\n    let logMessage = `${timestamp} [${levelColor}${level.toUpperCase()}${resetColor}]: ${message}`;\n\n    if (stack) {\n      logMessage += `\\n${stack}`;\n    }\n\n    const excludeFields = [\"timestamp\", \"level\", \"message\", \"stack\"];\n    const filteredMeta = Object.keys(meta)\n      .filter((key) => !excludeFields.includes(key))\n      .reduce(\n        (obj, key) => {\n          obj[key] = meta[key];\n          return obj;\n        },\n        {} as Record<string, unknown>,\n      );\n\n    const metaKeys = Object.keys(filteredMeta);\n    if (metaKeys.length > 0) {\n      const metaString = JSON.stringify(filteredMeta, null, 2);\n      logMessage += `\\n${metaString}`;\n    }\n\n    return logMessage;\n  }),\n);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || (isProduction ? \"warn\" : \"debug\"),\n  defaultMeta: {\n    service: \"tech4humans\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  transports: [\n    new winston.transports.Console({\n      format: consoleFormat,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n  ],\n  exitOnError: false,\n});\n\nexport const morganStream = {\n  write: (message: string) => {\n    logger.info(message.trim(), { component: \"http\" });\n  },\n};\n\nexport const logWithContext = {\n  database: (message: string, meta?: object) => {\n    logger.info(message, { component: \"database\", ...meta });\n  },\n\n  server: (message: string, meta?: object) => {\n    logger.info(message, { component: \"server\", ...meta });\n  },\n\n  auth: (message: string, meta?: object) => {\n    logger.info(message, { component: \"auth\", ...meta });\n  },\n\n  api: (message: string, meta?: object) => {\n    logger.info(message, { component: \"api\", ...meta });\n  },\n\n  error: (message: string, error?: Error, meta?: object) => {\n    logger.error(message, {\n      error: error?.message,\n      stack: error?.stack,\n      ...meta,\n    });\n  },\n};\n","import { ConfigSchemas } from \"./schemas\";\nimport { logger } from \"@infrastructure/logger\";\nimport { ValidationError } from \"@errors/validation-error\";\n\nconst result = new ConfigSchemas().envSchema.safeParse(process.env);\n\nif (!result.success) {\n  throw new ValidationError(\n    \"Invalid environment variables: \" +\n      JSON.stringify(result.error?.format(), null, 2),\n  );\n} else {\n  logger.info(\"Environment variables are valid\");\n}\n\nObject.entries(result.data).forEach(([key, value]) => {\n  if (value !== undefined) {\n    process.env[key] = String(value);\n  }\n});\n","import { DomainError } from \"./domain-error\";\n\nexport class NotFoundError extends DomainError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, NotFoundError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 404;\n  }\n} ","import { NotFoundError } from \"../not-found-error\";\n\nexport class AccountNotFoundError extends NotFoundError {\n  constructor(accountId?: string) {\n    super(accountId ? `Account with ID ${accountId} not found` : 'Account not found');\n    Object.setPrototypeOf(this, AccountNotFoundError.prototype);\n  }\n} ","import { EntityManager, Repository } from \"typeorm\";\nimport { AccountEntity } from \"@models/account/entity\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { AccountNotFoundError } from \"@errors/account/account-not-found-error\";\n\nexport class TypeOrmAccountRepository implements AccountRepositoryInterface {\n  constructor(\n    private readonly repository: Repository<Account> = AppDataSource.getRepository(Account)\n  ) {}\n\n  withTransaction(manager: EntityManager): this {\n    return new TypeOrmAccountRepository(manager.getRepository(Account)) as this;\n  }\n  \n  public async create(accountEntity: AccountEntity): Promise<AccountEntity> {\n    const data = accountEntity.toPersistence();\n\n    const account = this.repository.create({\n      type: data.type,\n      balance: data.balance,\n      createdAt: data.createdAt,\n      user: { id: data.userId },\n      bank: { name: data.bankName },\n    });\n\n    const saved = await this.repository.save(account);\n\n    return AccountEntity.reconstruct(\n      saved.id,\n      saved.type,\n      saved.balance,\n      saved.createdAt,\n      saved.user.id,\n      saved.bank.name,\n    );\n  }\n\n  public async findById(id: AccountId): Promise<AccountEntity | null> {\n    const account = await this.repository.findOne({\n      where: { id: id.getValue() },\n      relations: [\"user\", \"bank\"],\n    });\n\n    if (!account) return null;\n\n    return AccountEntity.reconstruct(\n      account.id,\n      account.type,\n      account.balance,\n      account.createdAt,\n      account.user.id,\n      account.bank.name,\n    );\n  }\n\n  public async findByUserId(userId: UserId): Promise<AccountEntity[]> {\n    const accounts = await this.repository.find({\n      where: { user: { id: userId.getValue() } },\n      relations: [\"user\", \"bank\"],\n    });\n\n    if (!accounts) return [];\n\n    return accounts.map(account => AccountEntity.reconstruct(\n      account.id,\n      account.type,\n      account.balance,\n      account.createdAt,\n      account.user.id,\n      account.bank.name,\n    ));\n  }\n\n  public async update(\n    id: AccountId,\n    accountEntity: AccountEntity,\n  ): Promise<AccountEntity> {\n    const accountInDb = await this.repository.findOne({\n      where: { id: id.getValue() },\n      relations: [\"user\", \"bank\"],\n    });\n\n    if (!accountInDb) throw new AccountNotFoundError(id.getValue().toString());\n\n    const data = accountEntity.toPersistence();\n\n    const updated = this.repository.merge(accountInDb, {\n      type: data.type,\n      balance: data.balance,\n      user: { id: data.userId },\n      bank: { name: data.bankName },\n    });\n\n    const saved = await this.repository.save(updated);\n\n    return AccountEntity.reconstruct(\n      saved.id,\n      saved.type,\n      saved.balance,\n      saved.createdAt,\n      saved.user.id,\n      saved.bank.name,\n    );\n  }\n\n  public async delete(id: AccountId): Promise<void> {\n    await this.repository.delete(id.getValue());\n  }\n}\n","import { BankSchemas } from \"@models/bank/schemas\";\nimport { BankName } from \"@models/bank/value-objects/name\";\n\nexport class BankEntity {\n  private constructor(\n    private readonly name: BankName,\n  ) {}\n\n  public static create(name: string): BankEntity {\n    const validated = BankSchemas.createBankSchema.parse({ name });\n    return new BankEntity(BankName.create(validated.name));\n  }\n\n  public static reconstruct(name: string): BankEntity {\n    const validated = BankSchemas.bankEntitySchema.parse({ name });\n    return new BankEntity(BankName.create(validated.name));\n  }\n\n  public getName(): BankName {\n    return this.name;\n  }\n\n  public toJSON(): BankRawEntity {\n    return {\n      name: this.name.getValue(),\n    };\n  }\n\n  public toPersistence(): BankRawEntity {\n    return {\n      name: this.name.getValue(),\n    };\n  }\n}","import { EntityManager, Repository } from \"typeorm\";\nimport { BankEntity } from \"@models/bank/entity\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport { BankRepositoryInterface } from \"@models/bank/repository/interfaces\";\nimport { BankName } from \"@models/bank/value-objects/name\";\n\nexport class TypeOrmBankRepository implements BankRepositoryInterface {\n  constructor(\n    private readonly repository: Repository<Bank> = AppDataSource.getRepository(Bank)\n  ) {}\n\n  public withTransaction(manager: EntityManager): this {\n    return new TypeOrmBankRepository(manager.getRepository(Bank)) as this;\n  }\n\n  public async findByName(name: BankName): Promise<BankEntity | null> {\n    const bank = await this.repository.findOne({\n      where: { name: name.getValue() }\n    });\n\n    if (!bank) {\n      return null;\n    }\n\n    return BankEntity.reconstruct(bank.name);\n  }\n\n  public async findAll(): Promise<BankEntity[]> {\n    const banks = await this.repository.find();\n    return banks.map(bank => BankEntity.reconstruct(bank.name));\n  }\n\n  public async delete(name: BankName): Promise<void> {\n    await this.repository.delete(name.getValue());\n  }\n}\n","import { Between, Repository } from \"typeorm\";\nimport { TransactionEntity } from \"@models/transaction/entity\";\nimport { TransactionRepositoryInterface } from \"@models/transaction/repository/interfaces\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\nimport { TransactionId } from \"@models/transaction/value-objects/id\";\nimport { AccountId } from \"@models/account/value-objects/id\"; \nimport { UserId } from \"@models/user/value-objects/id\";\nimport { TransactionNotFoundError } from \"@errors/transaction/transaction-not-found-error\";\n\nexport class TypeOrmTransactionRepository implements TransactionRepositoryInterface {\n  constructor(\n    private readonly repository: Repository<Transaction> = AppDataSource.getRepository(Transaction)\n  ) {}\n\n  public async findAll(): Promise<TransactionEntity[]> {\n    const transactions = await this.repository.find({\n        relations: ['sourceAccount', 'destinationAccount'],\n    });\n\n    return transactions.map(transaction => TransactionEntity.reconstruct({\n        id: transaction.id,\n        amount: transaction.amount,\n        description: transaction.description,\n        destinationAccountId: transaction.destinationAccount.id,\n        sourceAccountId: transaction.sourceAccount.id,\n        type: transaction.type,\n    }));\n  }\n  \n  public async findByUserId(userId: UserId): Promise<TransactionEntity[]> {\n    const transactions = await this.repository.find({\n        where: { sourceAccount: { user: {id: userId.getValue() } } },\n        relations: ['sourceAccount', 'destinationAccount'],\n    });\n\n    return transactions.map(transaction => TransactionEntity.reconstruct({\n        id: transaction.id,\n        amount: transaction.amount,\n        description: transaction.description,\n        destinationAccountId: transaction.destinationAccount.id,\n        sourceAccountId: transaction.sourceAccount.id,\n        type: transaction.type,\n    }));\n  }\n\n  public async create(transactionEntity: TransactionEntity): Promise<TransactionEntity> {\n    const transactionData = transactionEntity.toPersistence();\n    \n    const transaction = this.repository.create({    \n      sourceAccount: { id: transactionData.sourceAccountId },\n      destinationAccount: { id: transactionData.destinationAccountId },\n      amount: transactionData.amount,\n      description: transactionData.description,\n      type: transactionData.type,\n    });\n\n    const savedTransaction = await this.repository.save(transaction);\n\n    return TransactionEntity.reconstruct({\n        id: savedTransaction.id,\n        amount: savedTransaction.amount,\n        description: savedTransaction.description,\n        destinationAccountId: savedTransaction.destinationAccount.id,\n        sourceAccountId: savedTransaction.sourceAccount.id,\n        type: savedTransaction.type,\n    });\n  }\n\n  public async findById(id: TransactionId): Promise<TransactionEntity | null> {\n    const transaction = await this.repository.findOne({\n      where: { id: id.getValue() },\n      relations: ['sourceAccount', 'destinationAccount'],\n    });\n\n    if (!transaction) {\n      return null;\n    }\n\n    return TransactionEntity.reconstruct({\n        id: transaction.id,\n        amount: transaction.amount,\n        description: transaction.description,\n        destinationAccountId: transaction.destinationAccount.id,\n        sourceAccountId: transaction.sourceAccount.id,\n        type: transaction.type,\n    });\n  }\n\n  public async findByAccountId(accountId: AccountId): Promise<TransactionEntity[]> {\n    const transactions = await this.repository.find({\n      where: [\n        { sourceAccount: { id: accountId.getValue() } },\n        { destinationAccount: { id: accountId.getValue() } }\n      ],\n      relations: ['sourceAccount', 'destinationAccount'],\n      order: { transactionDate: 'DESC' },\n    });\n\n    return transactions.map(transaction => \n      TransactionEntity.reconstruct({\n        id: transaction.id,\n        amount: transaction.amount,\n        description: transaction.description,\n        destinationAccountId: transaction.destinationAccount.id,\n        sourceAccountId: transaction.sourceAccount.id,\n        type: transaction.type,\n      })\n    );\n  }\n\n  public async findByDateRange(startDate: Date, endDate: Date): Promise<TransactionEntity[]> {\n    const transactions = await this.repository.find({\n      where: {\n        transactionDate: Between(startDate, endDate),\n      },\n      relations: ['sourceAccount', 'destinationAccount'],\n      order: { transactionDate: 'DESC' },\n    });\n\n    return transactions.map(transaction => \n      TransactionEntity.reconstruct({\n        id: transaction.id,\n        amount: transaction.amount,\n        description: transaction.description,\n        destinationAccountId: transaction.destinationAccount.id,\n        sourceAccountId: transaction.sourceAccount.id,\n        type: transaction.type,\n      })\n    );\n  }\n\n  public async update(id: TransactionId, transactionEntity: TransactionEntity): Promise<TransactionEntity> {\n    const transactionData = transactionEntity.toPersistence();\n    \n    const transactionInDatabase = await this.repository.findOne({\n      where: { id: id.getValue() },\n    });\n\n    if (!transactionInDatabase) {\n      throw new TransactionNotFoundError(id.getValue().toString());\n    }\n\n    const updatedTransaction = this.repository.merge(transactionInDatabase, {\n      amount: transactionData.amount,\n      description: transactionData.description,\n      type: transactionData.type,\n      sourceAccount: { id: transactionData.sourceAccountId },\n      destinationAccount: { id: transactionData.destinationAccountId },\n    });\n\n    const savedTransaction = await this.repository.save(updatedTransaction);\n\n    return TransactionEntity.reconstruct({\n      id: savedTransaction.id,\n      amount: savedTransaction.amount,\n      description: savedTransaction.description,\n      destinationAccountId: savedTransaction.destinationAccount.id,\n      sourceAccountId: savedTransaction.sourceAccount.id,\n      type: savedTransaction.type,\n    });\n  }\n\n  public async delete(id: TransactionId): Promise<void> {\n    await this.repository.delete(id.getValue());\n  }\n\n  public async exists(id: TransactionId): Promise<boolean> {\n    const count = await this.repository.count({\n      where: { id: id.getValue() },\n    });\n    return count > 0;\n  }\n}","import { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { z } from \"zod\";\n\nexport class TransactionSchemas {\n  public static readonly transactionIdSchema = z\n    .number()\n    .int(\"Transaction ID must be an integer\")\n    .positive(\"Transaction ID must be positive\");\n\n  public static readonly amountSchema = z\n    .number()\n    .refine((val) => Number.isFinite(val), {\n      message: \"Amount must be a finite number\",\n    });\n\n  public static readonly descriptionSchema = z\n    .string()\n    .min(2, \"Description must have at least 2 characters\")\n    .max(255, \"Description cannot exceed 255 characters\");\n\n  public static readonly accountIdSchema = AccountSchemas.accountIdSchema;\n\n  public static readonly transactionDateSchema = z.date();\n\n  public static readonly transactionTypeSchema = z.nativeEnum(TransactionType);\n\n  public static readonly createTransactionSchema = z.object({\n    amount: this.amountSchema,\n    description: this.descriptionSchema,\n    destinationAccountId: this.accountIdSchema,\n    sourceAccountId: this.accountIdSchema,\n    type: this.transactionTypeSchema,\n  });\n\n  public static readonly transactionEntitySchema = z.object({\n    id: this.transactionIdSchema,\n    amount: this.amountSchema,\n    description: this.descriptionSchema,\n    destinationAccountId: this.accountIdSchema,\n    sourceAccountId: this.accountIdSchema,\n    type: this.transactionTypeSchema,\n  });\n}","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidTransactionIdError extends ValidationError {\n  constructor(id: string) {\n    super(`Invalid transaction id: ${id}`);\n    Object.setPrototypeOf(this, InvalidTransactionIdError.prototype);\n  }\n}","import { InvalidTransactionIdError } from \"@errors/transaction/invalid-transaction-id-error\";\nimport { TransactionSchemas } from \"@models/transaction/schemas\";\n\nexport class TransactionId {\n    private constructor(\n      private readonly value: number | null,\n      private readonly isNewId: boolean = false,\n    ) {}\n  \n    public static create(id: number): TransactionId {\n      const validatedId = TransactionSchemas.transactionIdSchema.parse(id);\n      return new TransactionId(validatedId, false);\n    }\n  \n    public static createNew(): TransactionId {\n      return new TransactionId(null, true);\n    }\n  \n    public static createFromDatabase(id: number): TransactionId {\n      const validatedId = TransactionSchemas.transactionIdSchema.parse(id);\n      return new TransactionId(validatedId, false);\n    }\n  \n    public static createUnsafe(id: number): TransactionId {\n      return new TransactionId(id, false);\n    }\n  \n    public getValue(): number {\n      if (this.value === null) {\n        throw new InvalidTransactionIdError(\"new\");\n      }\n      return this.value;\n    }\n  \n    public isNew(): boolean {\n      return this.isNewId;\n    }\n  \n    public equals(other: TransactionId): boolean {\n      return this.value === other.value;\n    }\n  \n    public toString(): string {\n      return this.value?.toString() ?? \"new\";\n    }\n  }","import { TransactionSchemas } from \"@models/transaction/schemas\";\n\nexport class TransactionAmount {\n  private constructor(private readonly value: number) {}\n\n  public static create(value: number): TransactionAmount {\n    const validatedAmount = TransactionSchemas.amountSchema.parse(value);\n    return new TransactionAmount(validatedAmount);\n  }\n\n  public getValue(): number {\n    return this.value;\n  }\n\n  public equals(other: TransactionAmount): boolean {\n    return this.value === other.value;\n  }\n}","import { TransactionSchemas } from \"@models/transaction/schemas\";\n\nexport class TransactionDescription {\n  private constructor(private readonly value: string) {}\n\n  public static create(value: string): TransactionDescription {\n    const validatedDescription = TransactionSchemas.descriptionSchema.parse(value);\n    return new TransactionDescription(validatedDescription);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: TransactionDescription): boolean {\n    return this.value === other.value;\n  }\n}","import { TransactionSchemas } from \"@models/transaction/schemas\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\n\nexport class TransactionTypeVo {\n  private constructor(private readonly value: TransactionType) {}\n\n  public static create(value: TransactionType): TransactionTypeVo {\n    const validatedType = TransactionSchemas.transactionTypeSchema.parse(value);\n    return new TransactionTypeVo(validatedType);\n  }\n\n  public getValue(): TransactionType {\n    return this.value;\n  }\n\n  public equals(other: TransactionTypeVo): boolean {\n    return this.value === other.value;\n  }\n}","\nimport { z } from \"zod\";\nimport { TransactionSchemas } from \"@models/transaction/schemas\";\nimport { TransactionId } from \"@models/transaction/value-objects/id\";\nimport { TransactionAmount } from \"@models/transaction/value-objects/amount\";\nimport { TransactionDescription } from \"@models/transaction/value-objects/description\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { TransactionTypeVo } from \"@models/transaction/value-objects/type\";\nimport { TransactionRawEntity } from \"@models/transaction/entity/types\";\n\nexport class TransactionEntity {\n  private constructor(\n    private readonly id: TransactionId | null,\n    private readonly amount: TransactionAmount,\n    private readonly description: TransactionDescription,\n    private readonly destinationAccountId: AccountId,\n    private readonly sourceAccountId: AccountId,\n    private readonly type: TransactionTypeVo,\n) {}\n\n  public static create(params: z.infer<typeof TransactionSchemas.createTransactionSchema>): TransactionEntity {\n    const validatedData = TransactionSchemas.createTransactionSchema.parse(params);\n    return new TransactionEntity(\n      null,\n      TransactionAmount.create(validatedData.amount),\n      TransactionDescription.create(validatedData.description),\n      AccountId.create(validatedData.destinationAccountId),\n      AccountId.create(validatedData.sourceAccountId),\n      TransactionTypeVo.create(validatedData.type),\n    );\n  }\n\n  public static createFromDatabase(params: z.infer<typeof TransactionSchemas.transactionEntitySchema>): TransactionEntity {\n    const validatedData = TransactionSchemas.transactionEntitySchema.parse(params);\n    return new TransactionEntity(\n      TransactionId.create(validatedData.id),\n      TransactionAmount.create(validatedData.amount),\n      TransactionDescription.create(validatedData.description),\n      AccountId.create(validatedData.destinationAccountId),\n      AccountId.create(validatedData.sourceAccountId),\n      TransactionTypeVo.create(validatedData.type),\n    );\n  }\n\n  public getId(): TransactionId | null {\n    return this.id;\n  }\n\n\n  public getDestinationAccountId(): AccountId {\n    return this.destinationAccountId;\n  }\n\n  public getSourceAccountId(): AccountId {\n    return this.sourceAccountId;\n  }\n  \n  public getAmount(): TransactionAmount {\n    return this.amount;\n  }\n\n  public getDescription(): TransactionDescription {\n    return this.description;\n  }\n\n  public getType(): TransactionTypeVo {\n    return this.type;\n  }\n\n  public toPersistence(): TransactionRawEntity {\n    return {\n      id: this.id?.getValue() ?? 0,\n      amount: this.amount.getValue(),\n      description: this.description.getValue(),\n      destinationAccountId: this.destinationAccountId.getValue(),\n      sourceAccountId: this.sourceAccountId.getValue(),\n      type: this.type.getValue(),\n    };\n  }\n\n  public toJSON(): TransactionRawEntity {\n    return {\n      id: this.id?.getValue() ?? 0,\n      amount: this.amount.getValue(),\n      description: this.description.getValue(),\n      destinationAccountId: this.destinationAccountId.getValue(),\n      sourceAccountId: this.sourceAccountId.getValue(),\n      type: this.type.getValue()\n    };\n  }\n\n  public static reconstruct(params: z.infer<typeof TransactionSchemas.transactionEntitySchema>): TransactionEntity {\n    return new TransactionEntity(\n      TransactionId.create(params.id),\n      TransactionAmount.create(params.amount),\n      TransactionDescription.create(params.description),\n      AccountId.create(params.destinationAccountId),\n      AccountId.create(params.sourceAccountId),\n      TransactionTypeVo.create(params.type),\n    );\n  }\n}\n\n","import { NotFoundError } from \"../not-found-error\";\n\nexport class TransactionNotFoundError extends NotFoundError {\n  constructor(id: string) {\n    super(`Transaction not found: ${id}`);\n    Object.setPrototypeOf(this, TransactionNotFoundError.prototype);\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidEmailError extends ValidationError {\n  constructor(email: string) {\n    super(`Invalid email format: ${email}`);\n    Object.setPrototypeOf(this, InvalidEmailError.prototype);\n  }\n} ","import { InvalidEmailError } from \"@errors/user/invalid-email-error\";\n\nexport class UserEmail {\n  private constructor(private readonly value: string) {\n    this.validateEmail();\n  }\n\n  public static create(email: string): UserEmail {\n    return new UserEmail(email);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  private validateEmail(): void {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(this.value)) {\n      throw new InvalidEmailError(this.value);\n    }\n  }\n\n  public equals(other: UserEmail): boolean {\n    return this.value === other.value;\n  }\n}\n","import { UserSchemas } from \"@models/user/schemas\";\n\nexport class UserName {\n  private constructor(private readonly value: string) {}\n\n  public static create(name: string): UserName {\n    const validatedName = UserSchemas.nameSchema.parse(name);\n    return new UserName(validatedName);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: UserName): boolean {\n    return this.value === other.value;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidPasswordError extends ValidationError {\n  constructor(message: string) {\n    super(message, []);\n    Object.setPrototypeOf(this, InvalidPasswordError.prototype);\n  }\n} ","import { InvalidPasswordError } from \"@errors/user/invalid-password-error\";\nimport bcrypt from \"bcryptjs\";\n\nexport class UserPassword {\n  private constructor(\n    private readonly value: string,\n    private readonly isHashed: boolean = false,\n  ) {\n    if (!isHashed) {\n      this.validatePassword();\n    }\n  }\n\n  public static create(plainPassword: string): UserPassword {\n    return new UserPassword(plainPassword, false);\n  }\n\n  public static createFromHash(hashedPassword: string): UserPassword {\n    return new UserPassword(hashedPassword, true);\n  }\n\n  public async hash(): Promise<UserPassword> {\n    if (this.isHashed) {\n      return this;\n    }\n    const hashedValue = await bcrypt.hash(this.value, 10);\n    return new UserPassword(hashedValue, true);\n  }\n\n  public async compare(plainPassword: string): Promise<boolean> {\n    if (!this.isHashed) {\n      throw new InvalidPasswordError(\"Cannot compare with unhashed password\");\n    }\n    return bcrypt.compare(plainPassword, this.value);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public isHashedPassword(): boolean {\n    return this.isHashed;\n  }\n\n  private validatePassword(): void {\n    if (\n      !this.value.match(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      )\n    ) {\n      throw new InvalidPasswordError(\n        \"Password must contain at least 8 characters with uppercase, lowercase, number and special character\",\n      );\n    }\n  }\n}\n","import { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserName } from \"@models/user/value-objects/name\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { UserSchemas } from \"@models/user/schemas\";\n\nexport class UserEntity {\n  private constructor(\n    private readonly id: UserId,\n    private readonly name: UserName,\n    private readonly email: UserEmail,\n    private readonly createdAt: Date,\n    private readonly password: UserPassword,\n  ) {}\n\n  public static create(\n    name: string,\n    email: string,\n    passwordHash: string,\n  ): UserEntity {\n    const validatedData = UserSchemas.createUserSchema.parse({\n      name,\n      email,\n      passwordHash,\n    });\n    return new UserEntity(\n      UserId.createNew(),\n      UserName.create(validatedData.name),\n      UserEmail.create(validatedData.email),\n      new Date(),\n      UserPassword.createFromHash(passwordHash),\n    );\n  }\n\n  public static reconstruct(\n    id: number,\n    name: string,\n    email: string,\n    createdAt: Date,\n    passwordHash: string,\n  ): UserEntity {\n    const validatedData = UserSchemas.userEntitySchema.parse({\n      id,\n      name,\n      email,\n      createdAt,\n      passwordHash,\n    });\n    return new UserEntity(\n      UserId.createFromDatabase(validatedData.id),\n      UserName.create(validatedData.name),\n      UserEmail.create(validatedData.email),\n      validatedData.createdAt,\n      UserPassword.createFromHash(passwordHash),\n    );\n  }\n\n  public getId(): UserId {\n    return this.id;\n  }\n\n  public getName(): UserName {\n    return this.name;\n  }\n\n  public getEmail(): UserEmail {\n    return this.email;\n  }\n\n  public getCreatedAt(): Date {\n    return this.createdAt;\n  }\n\n  public getPasswordHash(): string {\n    return this.password.getValue();\n  }\n\n  public toPersistence(): UserRawEntity {\n    return {\n      id: this.id.isNew() ? null : this.id.getValue(),\n      name: this.name.getValue(),\n      email: this.email.getValue(),\n      createdAt: this.createdAt,  \n      passwordHash: this.password.getValue(),\n    };\n  }\n\n  public toJSON(): Omit<UserRawEntity, \"passwordHash\"> {\n    return {\n      id: this.id.isNew() ? null : this.id.getValue(),\n      name: this.name.getValue(),\n      email: this.email.getValue(),\n      createdAt: this.createdAt,\n    };\n  }\n}\n","import { NotFoundError } from \"../not-found-error\";\n\nexport class UserNotFoundError extends NotFoundError {\n  constructor(userId?: string) {\n    super(userId ? `User with ID ${userId} not found` : 'User not found');\n    Object.setPrototypeOf(this, UserNotFoundError.prototype);\n  }\n} ","import { EntityManager, Repository } from \"typeorm\";\nimport { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { UserRepositoryInterface } from \"@models/user/repository/interfaces\";\nimport { UserEntity } from \"@models/user/entity\";\nimport { UserNotFoundError } from \"@errors/user/user-not-found-error\";\nimport { logger } from \"@infrastructure/logger\";\n\nexport class TypeOrmUserRepository implements UserRepositoryInterface {\n  constructor(\n    private readonly repository: Repository<User> = AppDataSource.getRepository(User)\n  ) {}\n\n  withTransaction(manager: EntityManager): this {\n    return new TypeOrmUserRepository(manager.getRepository(User)) as this;\n  }\n  \n  public async create(userEntity: UserEntity): Promise<UserEntity> {\n    logger.info(\"Creating user\", { userEntity });\n    const userData = userEntity.toPersistence();\n    logger.info(\"User data\", { userData });\n    const user = this.repository.create({\n      name: userData.name,\n      email: userData.email,\n      createdAt: userData.createdAt,\n      passwordHash: userData.passwordHash,\n    });\n\n    logger.info(\"User created\", { user });\n    const savedUser = await this.repository.save(user);\n    logger.info(\"User saved\", { savedUser });\n    return UserEntity.reconstruct(\n      savedUser.id,\n      savedUser.name,\n      savedUser.email,\n      savedUser.createdAt,\n      savedUser.passwordHash,\n    );\n  }\n\n  public async findByEmail(email: UserEmail): Promise<UserEntity | null> {\n    const user = await this.repository.findOne({\n      where: { email: email.getValue() },\n    });\n\n    if (!user) {\n      return null;\n    }\n\n    return UserEntity.reconstruct(\n      user.id,\n      user.name,\n      user.email,\n      user.createdAt,\n      user.passwordHash,\n    );\n  }\n\n  public async findById(id: UserId): Promise<UserEntity | null> {\n    const user = await this.repository.findOne({\n      where: { id: id.getValue() },\n    });\n\n    if (!user) {\n      return null;\n    }\n\n    return UserEntity.reconstruct(\n      user.id,\n      user.name,\n      user.email,\n      user.createdAt,\n      user.passwordHash,\n    );\n  }\n\n  public async exists(email: UserEmail): Promise<boolean> {\n    const count = await this.repository.count({\n      where: { email: email.getValue() },\n    });\n    return count > 0;\n  }\n\n  public async update(id: UserId, userEntity: UserEntity): Promise<UserEntity> {\n    const userData = userEntity.toPersistence();\n    const userInDatabase = await this.repository.findOne({\n      where: { id: id.getValue() },\n    });\n\n    if (!userInDatabase) {\n        throw new UserNotFoundError(id.getValue().toString());\n    }\n\n    const updatedUser = this.repository.merge(userInDatabase, {\n      name: userData.name,\n      email: userData.email,\n      passwordHash: userData.passwordHash,\n    });\n\n    const savedUser = await this.repository.save(updatedUser);\n\n    return UserEntity.reconstruct(\n      savedUser.id,\n      savedUser.name,\n      savedUser.email,\n      savedUser.createdAt,\n      savedUser.passwordHash,\n    );\n  }\n\n  public async delete(id: UserId): Promise<void> {\n    await this.repository.delete(id.getValue());\n  }\n}\n","import { DomainError } from \"./domain-error\";\n\nexport class DependencyNotFoundError extends DomainError {\n  constructor(dependencyName: string) {\n    super(`Dependency ${dependencyName} not found`);\n    Object.setPrototypeOf(this, DependencyNotFoundError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 500;\n  }\n}","import { AccountSchemas } from \"@models/account/schemas\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AddAccountToUserSchemas {\n  public static readonly requestSchema = z.object({\n    user: z.object({\n      id: UserSchemas.userIdSchema,\n    }),\n    account: z.object({\n      type: AccountSchemas.accountTypeSchema,\n      balance: AccountSchemas.balanceSchema,\n      bankName: BankSchemas.nameSchema,\n    }),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    body: this.requestSchema,\n  });\n}\n","import { AccountTypeVO } from \"@models/account/value-objects/type\";\nimport { AddAccountToUserSchemas } from \"@useCases/account/add-to-a-user/schemas\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { AccountBalance } from \"@models/account/value-objects/balance\";\nimport { BankName } from \"@models/bank/value-objects/name\";\nimport { AccountEntity } from \"@models/account/entity\";\n\nexport class AddAccountToUserRequest {\n  constructor(\n    private readonly userId: UserId,\n    private readonly accountType: AccountTypeVO,\n    private readonly initialBalance: AccountBalance,\n    private readonly bankName: BankName\n  ) {}\n\n  // These getters should return PRIMITIVE VALUES for schema validation\n  public getUserId(): number {\n    return this.userId.getValue(); // Return primitive number\n  }\n\n  public getAccountType(): string {\n    return this.accountType.getValue(); // Return primitive string\n  }\n\n  public getInitialBalance(): number {\n    return this.initialBalance.getValue(); // Return primitive number\n  }\n\n  public getBankName(): string {\n    return this.bankName.getValue(); // Return primitive string\n  }\n\n  // If you need the Value Objects themselves, add separate methods:\n  public getUserIdVO(): UserId {\n    return this.userId;\n  }\n\n  public getAccountTypeVO(): AccountTypeVO {\n    return this.accountType;\n  }\n\n  public getInitialBalanceVO(): AccountBalance {\n    return this.initialBalance;\n  }\n\n  public getBankNameVO(): BankName {\n    return this.bankName;\n  }\n\n  public static createFromRaw(raw: unknown): AddAccountToUserRequest {\n    const parsed = AddAccountToUserSchemas.httpRequestSchema.parse(raw);\n    return new AddAccountToUserRequest(\n      UserId.create(parsed.body.user.id),\n      AccountTypeVO.create(parsed.body.account.type),\n      AccountBalance.create(parsed.body.account.balance),\n      BankName.create(parsed.body.account.bankName)\n    );\n  }\n}\n  ","import { logger } from \"@infrastructure/logger\";\nimport { Response } from \"express\";\nimport { ZodError } from \"zod\";\n\nexport abstract class BaseController {\n  protected sendSuccessResponse(\n    res: Response,\n    message: string,\n    data?: unknown,\n    statusCode: number = 200,\n  ): void {\n    const response: any = {\n      message,\n    };\n\n    if (data !== undefined) {\n      response.data = data;\n    }\n\n    res.status(statusCode).json(response);\n  }\n\n  protected sendErrorResponse(\n    res: Response,\n    message: string,\n    errors: string[] = [],\n    statusCode: number = 422,\n  ): void {\n    logger.error(\"BaseController.sendErrorResponse\", message);\n    res.status(statusCode).json({\n      message,\n      errors,\n    });\n  }\n\n  protected getErrorStatusCode(\n    message: string,\n    hasValidationErrors: boolean,\n  ): number {\n    if (hasValidationErrors) return 400;\n\n    const lowerMessage = message.toLowerCase();\n\n    if (\n      lowerMessage.includes(\"invalid credentials\") ||\n      lowerMessage.includes(\"authentication failed\")\n    ) {\n      return 401;\n    }\n\n    if (\n      lowerMessage.includes(\"unauthorized\") ||\n      lowerMessage.includes(\"permission\") ||\n      lowerMessage.includes(\"account locked\") ||\n      lowerMessage.includes(\"account disabled\")\n    ) {\n      return 403;\n    }\n\n    if (lowerMessage.includes(\"not found\")) {\n      return 404;\n    }\n\n    if (\n      lowerMessage.includes(\"already exists\") ||\n      lowerMessage.includes(\"duplicate\")\n    ) {\n      return 409;\n    }\n\n    return 422;\n  }\n\n  protected handleControllerError(\n    error: unknown,\n    res: Response,\n    controllerName: string,\n  ): void {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map((err) => ({\n        field: err.path.join(\".\"),\n        message: err.message,\n        code: err.code,\n      }));\n      res.status(400).json({\n        success: false,\n        message: \"Invalid request format\",\n        errors,\n      });\n      return;\n    }\n\n    logger.error(`${controllerName} Error:`, error);\n    res.status(500).json({\n      success: false,\n      message: error instanceof Error ? error.message : \"Internal server error\",\n    });\n  }\n\n  protected validateRequiredParam(\n    param: string | undefined,\n    paramName: string,\n    res: Response,\n  ): boolean {\n    if (!param) {\n      this.sendErrorResponse(\n        res,\n        `${paramName} is required`,\n        [`${paramName} parameter is missing`],\n        400,\n      );\n      return false;\n    }\n    return true;\n  }\n}\n","import { Request, Response } from \"express\";\nimport { AddAccountToUserUseCaseInterface } from \"@useCases/account/add-to-a-user/interfaces\";\nimport { AddAccountToUserRequest } from \"@useCases/account/add-to-a-user/request\";\nimport { BaseController } from \"@infrastructure/http/routes/base/controller\";\nimport { AccountNotFoundError } from \"app/domain/errors/account/account-not-found-error\";\n\nexport class AddAccountToUserController extends BaseController {\n  constructor(private readonly useCase: AddAccountToUserUseCaseInterface) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      const request = AddAccountToUserRequest.createFromRaw(req.body);\n      const response = await this.useCase.execute(request);\n\n      if (response.isSuccess()) {\n        const account = response.getData();\n        if (!account) {\n          throw new AccountNotFoundError(\"Account not created\");\n        }\n        this.sendSuccessResponse(\n          res,\n          \"Account created successfully\",\n          account.toJSON(),\n          201,\n        );\n        return;\n      }\n\n      const statusCode = this.getErrorStatusCode(\n        \"AddAccountToUser\",\n        !!response.getValidationErrors(),\n      );\n      this.sendErrorResponse(\n        res,\n        response.getError() || \"Failed to create account\",\n        response.getValidationErrors(),\n        statusCode,\n      );\n    } catch (error) {\n      this.handleControllerError(error, res, \"AddAccountToUserController\");\n    }\n  }\n}","import { AccountSchemas } from \"@models/account/schemas\";\nimport { z } from \"zod\";\n\nexport class DeleteAccountOfUserSchemas {\n  public static readonly requestSchema = z.object({\n    accountId: AccountSchemas.accountIdSchema,\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    params: this.requestSchema,\n  });\n}\n","import { DeleteAccountOfUserSchemas } from \"@useCases/account/delete-of-a-user/schemas\";\nimport { AccountId } from \"@models/account/value-objects/id\";\n\nexport class DeleteAccountOfUserRequest {\n  constructor(\n    private readonly accountId: AccountId\n  ) {}\n\n  public getAccountId(): number | string {\n    return this.accountId.getValue();\n  }\n\n  public getAccountIdVO(): AccountId {\n    return this.accountId;\n  }\n\n  public static createFromRaw(raw: unknown): DeleteAccountOfUserRequest {\n    const parsed = DeleteAccountOfUserSchemas.httpRequestSchema.parse(raw);\n    return new DeleteAccountOfUserRequest(\n      AccountId.create(parsed.params.accountId)\n    );\n  }\n}","import { DeleteAccountOfUserUseCaseInterface } from \"@useCases/account/delete-of-a-user/interfaces\";\nimport { DeleteAccountOfUserRequest } from \"@useCases/account/delete-of-a-user/request\";\nimport { BaseController } from \"../../../base/controller\";\nimport { Request, Response } from \"express\";\n\nexport class DeleteAccountOfUserController extends BaseController {\n  constructor(private readonly useCase: DeleteAccountOfUserUseCaseInterface) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      const accountId = req.params.accountId;\n      if (!this.validateRequiredParam(accountId, \"Account ID\", res)) return;\n\n      const request = DeleteAccountOfUserRequest.createFromRaw({\n        accountId,\n      });\n      const response = await this.useCase.execute(request);\n\n      if (response.isSuccess()) {\n        this.sendSuccessResponse(res, \"Account deleted successfully\", null, 200);\n        return;\n      }\n\n      const statusCode = this.getErrorStatusCode(\"DeleteAccount\", !!response.getValidationErrors());\n      this.sendErrorResponse(res, response.getError() || \"Failed to delete account\", response.getValidationErrors(), statusCode);\n    } catch (error) {\n      this.handleControllerError(error, res, \"DeleteAccountOfUserController\");\n    }\n  }\n}","import { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class GetAllAccountsOfUserSchemas {\n  public static readonly requestSchema = z.object({\n    userId: UserSchemas.userIdSchema,\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    params: this.requestSchema,\n  });\n}\n","import { UserId } from \"@models/user/value-objects/id\";\nimport { GetAllAccountsOfUserSchemas } from \"@useCases/account/get-all-of-user/schemas\";\n\nexport class GetAllAccountsOfUserRequest {\n  constructor(\n    private readonly userId: UserId\n  ) {}\n\n  public getUserId(): number {\n    return this.userId.getValue();\n  }\n\n  public getUserIdVO(): UserId {\n    return this.userId;\n  }\n\n  public static createFromRaw(raw: unknown): GetAllAccountsOfUserRequest {\n    const parsed = GetAllAccountsOfUserSchemas.httpRequestSchema.parse(raw);\n    return new GetAllAccountsOfUserRequest(\n      UserId.create(parsed.params.userId)\n    );\n  }\n}","import { GetAllAccountsOfUserUseCaseInterface } from \"@useCases/account/get-all-of-user/interfaces\";\nimport { GetAllAccountsOfUserRequest } from \"@useCases/account/get-all-of-user/request\";\nimport { BaseController } from \"../../../base/controller\";\nimport { Request, Response } from \"express\";\n\nexport class GetAllAccountsOfUserController extends BaseController {\n  constructor(private readonly useCase: GetAllAccountsOfUserUseCaseInterface) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      const userId = req.params.userId;\n      if (!this.validateRequiredParam(userId, \"User ID\", res)) return;\n\n      const request = GetAllAccountsOfUserRequest.createFromRaw({\n        userId,\n      });\n      const response = await this.useCase.execute(request);\n\n      if (response.isSuccess()) {\n        this.sendSuccessResponse(res, \"Accounts retrieved successfully\", response.getData(), 200);\n        return;\n      }\n\n      const statusCode = this.getErrorStatusCode(\"GetAllAccountsOfUser\", !!response.getValidationErrors());\n      this.sendErrorResponse(res, response.getError() || \"Failed to retrieve accounts\", response.getValidationErrors(), statusCode);\n    } catch (error) {\n      this.handleControllerError(error, res, \"GetAllAccountsOfUserController\");\n    }\n  }\n}","import { AccountSchemas } from \"@models/account/schemas\";\nimport { z } from \"zod\";\n\nexport class UpdateAccountOfUserSchemas {\n  public static readonly requestSchema = z.object({\n    accountId: AccountSchemas.accountIdSchema,\n    account: z.object({\n      type: AccountSchemas.accountTypeSchema.optional(),\n    }),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    params: z.object({\n      accountId: AccountSchemas.accountIdSchema,\n    }),\n    body: this.requestSchema,\n  });\n}\n","import { AccountId } from \"@models/account/value-objects/id\";\nimport { AccountTypeVO } from \"@models/account/value-objects/type\";\nimport { UpdateAccountOfUserSchemas } from \"@useCases/account/update-of-a-user/schemas\";\n\nexport class UpdateAccountOfUserRequest {\n  constructor(\n    private readonly accountId: AccountId,\n    private readonly accountType?: AccountTypeVO,\n  ) {}\n\n  public getAccountId(): number {\n    return this.accountId.getValue();\n  }\n\n  public getAccountIdVO(): AccountId {\n    return this.accountId;\n  }\n\n  public getAccountType(): AccountTypeVO {\n    if (!this.accountType) {\n      throw new Error(\"Account type not provided\");\n    }\n    return this.accountType;\n  }\n\n  public hasAccountType(): boolean {\n    return this.accountType !== undefined;\n  }\n\n  public static createFromRaw(raw: unknown): UpdateAccountOfUserRequest {\n    const parsed = UpdateAccountOfUserSchemas.httpRequestSchema.parse(raw);\n    \n    const accountType = parsed.body.account.type \n      ? AccountTypeVO.create(parsed.body.account.type) \n      : undefined;\n\n    return new UpdateAccountOfUserRequest(\n      AccountId.create(parsed.params.accountId),\n      accountType\n    );\n  }\n}","import { UpdateAccountOfUserUseCaseInterface } from \"@useCases/account/update-of-a-user/interfaces\";\nimport { UpdateAccountOfUserRequest } from \"@useCases/account/update-of-a-user/request\";\nimport { BaseController } from \"../../../base/controller\";\nimport { Request, Response } from \"express\";\n\nexport class UpdateAccountOfUserController extends BaseController {\n  constructor(private readonly useCase: UpdateAccountOfUserUseCaseInterface) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      const accountId = req.params.accountId;\n      if (!this.validateRequiredParam(accountId, \"Account ID\", res)) return;\n\n      const request = UpdateAccountOfUserRequest.createFromRaw({\n        accountId,\n        ...req.body,\n      });\n\n      const response = await this.useCase.execute(request);\n\n      if (response.isSuccess()) {\n        this.sendSuccessResponse(res, \"Account updated successfully\", response.getData(), 200);\n        return;\n      }\n\n      const statusCode = this.getErrorStatusCode(\"UpdateAccount\", !!response.getValidationErrors());\n      this.sendErrorResponse(res, response.getError() || \"Failed to update account\", response.getValidationErrors(), statusCode);\n    } catch (error) {\n      this.handleControllerError(error, res, \"UpdateAccountOfUserController\");\n    }\n  }\n}","import { Request, Response } from \"express\";\nimport { BaseController } from \"@infrastructure/http/routes/base/controller\";\nimport { GetAllBanksUseCaseInterface } from \"@useCases/banks/get-all/interfaces\";\n\nexport class GetAllBanksController extends BaseController {\n  constructor(private readonly getAllBanksUseCase: GetAllBanksUseCaseInterface) {\n    super();\n  }\n\n  async handle(_req: Request, res: Response): Promise<void> {\n    try {\n      const response = await this.getAllBanksUseCase.execute();\n\n    if (response.isSuccess()) {\n      this.sendSuccessResponse(\n        res,\n        response.getMessage(),\n        response.getBanks(),\n        200,\n      );\n      return;\n    }\n    const statusCode = this.getErrorStatusCode(\n      response.getMessage(),\n      response.hasErrors(),\n    );\n    this.sendErrorResponse(\n      res,\n      response.getMessage(),\n      response.getErrors(),\n        statusCode,\n      );\n    } catch (error) {\n      this.handleControllerError(error, res, \"GetAllBanksController\");\n    }\n  }\n}   ","import { TransactionSchemas } from \"@models/transaction/schemas\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { z } from \"zod\";\n\nexport class AddTransactionToUserSchemas {\n  public static readonly requestSchema = z.object({\n    params: z.object({\n      sourceAccountId: AccountSchemas.accountIdSchema,\n      destinationAccountId: AccountSchemas.accountIdSchema,\n    }),\n    transaction: z.object({\n      type: TransactionSchemas.transactionTypeSchema,\n      amount: TransactionSchemas.amountSchema,\n    }),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    params: z.object({\n      sourceAccountId: AccountSchemas.accountIdSchema,\n      destinationAccountId: AccountSchemas.accountIdSchema,\n    }),\n    body: z.object({\n      transaction: z.object({\n        type: TransactionSchemas.transactionTypeSchema,\n        amount: TransactionSchemas.amountSchema,\n      }),\n    }),\n  });\n}","import { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AddTransactionToUserSchemas } from \"@useCases/transaction/add-to-a-user/schemas\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { TransactionTypeVo } from \"@models/transaction/value-objects/type\";\nimport { TransactionAmount } from \"@models/transaction/value-objects/amount\";\n\nexport class AddTransactionToUserRequest {\n    constructor(\n        private readonly sourceAccountId: AccountId,\n        private readonly destinationAccountId: AccountId,\n        private readonly type: TransactionTypeVo,\n        private readonly amount: TransactionAmount,\n    ) {}\n\n    public static createFromRaw(raw: unknown): AddTransactionToUserRequest {\n        const parsed = AddTransactionToUserSchemas.httpRequestSchema.parse(raw);\n        \n        return new AddTransactionToUserRequest(\n            AccountId.create(parsed.params.sourceAccountId),\n            AccountId.create(parsed.params.destinationAccountId),\n            TransactionTypeVo.create(parsed.body.transaction.type),\n            TransactionAmount.create(parsed.body.transaction.amount)\n        );\n    }\n\n    // Return primitive values for schema validation\n    public getSourceAccountId(): number {\n        return this.sourceAccountId.getValue();\n    }\n\n    public getDestinationAccountId(): number {\n        return this.destinationAccountId.getValue();\n    }\n\n    public getType(): TransactionType {\n        return this.type.getValue();\n    }\n\n    public getAmount(): number {\n        return this.amount.getValue();\n    }\n\n    // Return value objects for domain logic\n    public getSourceAccountIdVO(): AccountId {\n        return this.sourceAccountId;\n    }\n\n    public getDestinationAccountIdVO(): AccountId {\n        return this.destinationAccountId;\n    }\n\n    public getTypeVO(): TransactionTypeVo {\n        return this.type;\n    }\n\n    public getAmountVO(): TransactionAmount {\n        return this.amount;\n    }\n}","import { Request, Response } from \"express\";\nimport { BaseController } from \"@infrastructure/http/routes/base/controller\";\nimport { AddTransactionToUserUseCaseInterface } from \"@useCases/transaction/add-to-a-user/interfaces\";\nimport { AddTransactionToUserRequest } from \"@useCases/transaction/add-to-a-user/request\";\n\nexport class AddTransactionToUserController extends BaseController {\n  constructor(\n    private readonly addTransactionToUserUseCase: AddTransactionToUserUseCaseInterface,\n  ) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      const userId = req.params.userId;\n      if (!this.validateRequiredParam(userId, \"User ID\", res)) return;\n\n      const request = AddTransactionToUserRequest.createFromRaw({\n        userId,\n        ...req.body,\n      });\n\n      const response = await this.addTransactionToUserUseCase.execute(request);\n\n      if (response.isSuccess()) {\n        const transaction = response.getTransaction();\n        this.sendSuccessResponse(\n          res,\n          response.getMessage(),\n          transaction.toJSON(),\n          201,\n        );\n        return;\n      }\n\n      const statusCode = this.getErrorStatusCode(\n        response.getMessage(),\n        response.hasErrors(),\n      );\n      this.sendErrorResponse(\n        res,\n        response.getMessage(),\n        response.getErrors(),\n        statusCode,\n      );\n    } catch (error) {\n      this.handleControllerError(error, res, \"AddTransactionToUserController\");\n    }\n  }\n}","import { UserSchemas } from \"@models/user/schemas\";\nimport z from \"zod\";\n\nexport class GetAllOfUserSchemas {\n    public static readonly requestSchema = z.object({\n        userId: UserSchemas.userIdSchema,\n    });\n\n    public static readonly httpRequestSchema = z.object({\n        params: this.requestSchema,\n    });\n}","import { GetAllOfUserSchemas } from \"@useCases/transaction/get-all-of-user/schemas\";\n\nexport class GetAllOfUserRequest {\n    constructor(\n        private readonly userId: number,\n    ) {}\n\n    public static createFromRaw(raw: unknown): GetAllOfUserRequest {\n        const parsed = GetAllOfUserSchemas.requestSchema.parse(raw);\n        return new GetAllOfUserRequest(parsed.userId);\n    }\n\n    public getUserId(): number {\n        return this.userId;\n    }\n}   ","import { Request, Response } from \"express\";\nimport { BaseController } from \"@infrastructure/http/routes/base/controller\";\nimport { GetAllOfUserUseCaseInterface } from \"@useCases/transaction/get-all-of-user/interfaces\";\nimport { GetAllOfUserRequest } from \"@useCases/transaction/get-all-of-user/request\";\n\nexport class GetAllTransactionsOfUserController extends BaseController {\n  constructor(\n    private readonly getAllOfUserUseCase: GetAllOfUserUseCaseInterface,\n  ) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      const userId = req.params.userId;\n      if (!this.validateRequiredParam(userId, \"User ID\", res)) return;\n\n      const request = GetAllOfUserRequest.createFromRaw({\n        userId,\n      });\n\n      const response = await this.getAllOfUserUseCase.execute(request);\n\n      if (response.isSuccess()) {\n        this.sendSuccessResponse(\n          res,\n          response.getMessage(),\n          response.getTransactions().map((t) => t.toJSON()),\n        );\n        return;\n      }\n\n      const statusCode = this.getErrorStatusCode(\n        response.getMessage(),\n        response.hasErrors(),\n      );\n      this.sendErrorResponse(\n        res,\n        response.getMessage(),\n        response.getErrors(),\n        statusCode,\n      );\n    } catch (error) {\n      this.handleControllerError(error, res, \"GetAllTransactionsOfUserController\");\n    }\n  }\n}","import { z } from \"zod\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { BankSchemas } from \"@models/bank/schemas\";\n\nexport class CreateUserSchemas {\n  public static readonly requestSchema = z.object({\n    account: z.object({\n      type: AccountSchemas.accountTypeSchema,\n      balance: AccountSchemas.balanceSchema,\n    }),\n    bank: z.object({\n      name: BankSchemas.nameSchema,\n    }),\n    user: z.object({\n      name: UserSchemas.nameSchema,\n      email: UserSchemas.emailSchema,\n      password: UserSchemas.passwordSchema,\n    }),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    body: this.requestSchema,\n  });\n}\n","import { CreateUserSchemas } from \"@useCases/user/create/schemas\";\nimport { UserName } from \"@models/user/value-objects/name\";\nimport { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { AccountBalance } from \"@models/account/value-objects/balance\";\nimport { BankName } from \"@models/bank/value-objects/name\";\nimport { AccountTypeVO } from \"@models/account/value-objects/type\";\n\nexport class CreateUserRequest {\n  constructor(\n    private readonly name: UserName,\n    private readonly email: UserEmail,\n    private readonly password: UserPassword,\n    private readonly accountType: AccountTypeVO,\n    private readonly accountBalance: AccountBalance,\n    private readonly bankName: BankName,\n  ) {}\n\n  public static createFromRaw(raw: unknown): CreateUserRequest {\n    const parsed = CreateUserSchemas.requestSchema.parse(raw);\n    return new CreateUserRequest(\n      UserName.create(parsed.user.name),\n      UserEmail.create(parsed.user.email),\n      UserPassword.create(parsed.user.password),\n      AccountTypeVO.create(parsed.account.type),\n      AccountBalance.create(parsed.account.balance),\n      BankName.create(parsed.bank.name),\n    );\n  }\n\n  public getName(): UserName {\n    return this.name;\n  }\n\n  public getEmail(): UserEmail {\n    return this.email;\n  }\n\n  public getPassword(): UserPassword {\n    return this.password;\n  }\n\n  public getAccountType(): AccountTypeVO {\n    return this.accountType;\n  }\n\n  public getAccountBalance(): AccountBalance {\n    return this.accountBalance;\n  }\n\n  public getBankName(): BankName {\n    return this.bankName;\n  }\n}\n","import { CreateUserUseCaseInterface } from \"@useCases/user/create/interfaces\";\nimport { CreateUserRequest } from \"@useCases/user/create/request\";\nimport { Request, Response } from \"express\";\nimport { BaseController } from \"@infrastructure/http/routes/base/controller\";\nimport { logger } from \"@infrastructure/logger\";\n\nexport class CreateUserController extends BaseController {\n  constructor(private readonly createUserUseCase: CreateUserUseCaseInterface) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      logger.info(\"Creating user\", { body: req.body });\n      const request = CreateUserRequest.createFromRaw({\n        ...req.body,\n      });\n      logger.info(\"Request created\", { request });\n      const response = await this.createUserUseCase.execute(request);\n      logger.info(\"Response\", { response });\n      if (response.isSuccess()) {\n        logger.info(\"Response is success\", { response });\n        const user = response.getUser();\n        logger.info(\"User\", { user });\n        this.sendSuccessResponse(\n          res,\n          response.getMessage(),\n          user.toJSON(),\n          201,\n        );\n        return;\n      }\n\n      logger.info(\"Response is not success\", { response });\n      const statusCode = this.getErrorStatusCode(\n        response.getMessage(),\n        response.hasErrors(),\n      );\n      logger.info(\"Status code\", { statusCode });\n      this.sendErrorResponse(\n        res,\n        response.getMessage(),\n        response.getErrors(),\n        statusCode,\n      );\n    } catch (error) {\n      this.handleControllerError(error, res, \"CreateUserController\");\n    }\n  }\n}\n","import { z } from \"zod\";\nimport { UserSchemas } from \"@models/user/schemas\";\n\nexport class DeleteUserSchemas {\n  public static readonly requestSchema = z.object({\n    id: UserSchemas.userIdSchema,\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    params: this.requestSchema,\n  });\n}\n","import { DeleteUserSchemas } from \"@useCases/user/delete/schemas\";\n\nexport class DeleteUserRequest {\n  constructor(private readonly id: number) {}\n\n  public static createFromRaw(raw: unknown): DeleteUserRequest {\n    const parsed = DeleteUserSchemas.requestSchema.parse(raw);\n    return new DeleteUserRequest(parsed.id);\n  }\n\n  public getId(): number {\n    return this.id;\n  }\n}\n","import { DeleteUserUseCaseInterface } from \"@useCases/user/delete/interfaces\";\nimport { DeleteUserRequest } from \"@useCases/user/delete/request\";\nimport { Request, Response } from \"express\";\nimport { BaseController } from \"@infrastructure/http/routes/base/controller\";\n\nexport class DeleteUserController extends BaseController {\n  constructor(private readonly deleteUserUseCase: DeleteUserUseCaseInterface) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      const userId = req.params.id;\n      if (!this.validateRequiredParam(userId, \"User ID\", res)) return;\n\n      const request = DeleteUserRequest.createFromRaw({ id: userId });\n      const response = await this.deleteUserUseCase.execute(request);\n\n      if (response.isSuccess()) {\n        this.sendSuccessResponse(res, response.getMessage());\n        return;\n      }\n\n      const statusCode = this.getErrorStatusCode(\n        response.getMessage(),\n        response.hasErrors(),\n      );\n      this.sendErrorResponse(\n        res,\n        response.getMessage(),\n        response.getErrors(),\n        statusCode,\n      );\n    } catch (error) {\n      this.handleControllerError(error, res, \"DeleteUserController\");\n    }\n  }\n}\n","import { z } from \"zod\";\nimport { UserSchemas } from \"@models/user/schemas\";\n\nexport class UserLoginSchemas {\n  public static readonly requestSchema = z.object({\n    email: UserSchemas.emailSchema,\n    password: z.string().min(8).max(100),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    body: this.requestSchema,\n  });\n}\n","import { UserLoginSchemas } from \"@useCases/user/login/schemas\";\n\nexport class LoginRequest {\n  constructor(\n    private readonly email: string,\n    private readonly password: string,\n  ) {}\n\n  public static createFromRaw(raw: unknown): LoginRequest {\n    const parsed = UserLoginSchemas.requestSchema.parse(raw);\n    return new LoginRequest(parsed.email, parsed.password);\n  }\n\n  public getEmail(): string {\n    return this.email;\n  }\n\n  public getPassword(): string {\n    return this.password;\n  }\n}\n","import { LoginUseCaseInterface } from \"@useCases/user/login/interfaces\";\nimport { LoginRequest } from \"@useCases/user/login/request\";\nimport { Request, Response } from \"express\";\nimport { BaseController } from \"@infrastructure/http/routes/base/controller\";\n\nexport class LoginController extends BaseController {\n  constructor(private readonly loginUseCase: LoginUseCaseInterface) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      const request = LoginRequest.createFromRaw(req.body);\n      const response = await this.loginUseCase.execute(request);\n\n      if (response.isSuccess()) {\n        const authResult = response.getAuthResult();\n        this.sendSuccessResponse(res, response.getMessage(), authResult);\n        return;\n      }\n\n      const statusCode = this.getErrorStatusCode(\n        response.getMessage(),\n        response.hasErrors(),\n      );\n      this.sendErrorResponse(\n        res,\n        response.getMessage(),\n        response.getErrors(),\n        statusCode,\n      );\n    } catch (error) {\n      this.handleControllerError(error, res, \"LoginController\");\n    }\n  }\n}\n","import { z } from \"zod\";\nimport { UserSchemas } from \"@models/user/schemas\";\n\nexport class UpdateUserSchemas {\n  public static readonly requestSchema = z.object({\n    user: z.object({\n      name: UserSchemas.nameSchema,\n      email: UserSchemas.emailSchema,\n      password: UserSchemas.passwordSchema,\n    }),\n    params: z.object({\n      id: UserSchemas.userIdSchema,\n    }),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    body: this.requestSchema,\n    params: z.object({\n      id: UserSchemas.userIdSchema,\n    }),\n  });\n}\n","import { UpdateUserSchemas } from \"@useCases/user/update/schemas\";\n\nexport class UpdateUserRequest {\n  constructor(\n    private readonly id: number,\n    private readonly name?: string,\n    private readonly email?: string,\n    private readonly password?: string,\n  ) {}\n\n  public static createFromRaw(raw: unknown): UpdateUserRequest {\n    const parsed = UpdateUserSchemas.httpRequestSchema.parse(raw);\n    return new UpdateUserRequest(\n      parsed.params.id,\n      parsed.body.user.name,\n      parsed.body.user.email,\n      parsed.body.user.password,\n    );\n  }\n\n  public getId(): number {\n    return this.id;\n  }\n\n  public getName(): string | undefined {\n    return this.name;\n  }\n\n  public getEmail(): string | undefined {\n    return this.email;\n  }\n\n  public getPassword(): string | undefined {\n    return this.password;\n  }\n}\n","import { BaseController } from \"@infrastructure/http/routes/base/controller\";\nimport { UpdateUserUseCaseInterface } from \"@useCases/user/update/interfaces\";\nimport { UpdateUserRequest } from \"@useCases/user/update/request\";\nimport { Request, Response } from \"express\";\n\nexport class UpdateUserController extends BaseController {\n  constructor(private readonly updateUserUseCase: UpdateUserUseCaseInterface) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      const userId = req.params.id;\n      if (!this.validateRequiredParam(userId, \"User ID\", res)) return;\n\n      const request = UpdateUserRequest.createFromRaw({\n        params: {\n          id: userId,\n        },\n        body: req.body,\n      });\n      const response = await this.updateUserUseCase.execute(request);\n\n      if (response.isSuccess()) {\n        const user = response.getUser();\n        this.sendSuccessResponse(res, response.getMessage(), user.toJSON());\n        return;\n      }\n\n      const statusCode = this.getErrorStatusCode(\n        response.getMessage(),\n        response.hasErrors(),\n      );\n      this.sendErrorResponse(\n        res,\n        response.getMessage(),\n        response.getErrors(),\n        statusCode,\n      );\n    } catch (error) {\n      this.handleControllerError(error, res, \"UpdateUserController\");\n    }\n  }\n}\n","import { ZodError } from \"zod\";\nimport { AddAccountToUserRequest } from \"@useCases/account/add-to-a-user/request\";\nimport { AddAccountToUserResponse } from \"@useCases/account/add-to-a-user/response\";\nimport { AddAccountToUserUseCaseInterface } from \"@useCases/account/add-to-a-user/interfaces\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { UserRepositoryInterface } from \"@models/user/repository/interfaces\";\nimport { AccountEntity } from \"@models/account/entity\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { UserNotFoundError } from \"@errors/user/user-not-found-error\";\n\nexport class AddAccountToUserUseCase\n  implements AddAccountToUserUseCaseInterface\n{\n  constructor(\n    private readonly accountRepository: AccountRepositoryInterface,\n    private readonly userRepository: UserRepositoryInterface,\n  ) {}\n\n  public async execute(\n    request: AddAccountToUserRequest,\n  ): Promise<AddAccountToUserResponse> {\n    try {\n      const userId = request.getUserIdVO();\n      \n      const user = await this.userRepository.findById(userId);\n      if (!user) {\n        throw new UserNotFoundError(userId.getValue().toString());\n      }\n  \n      const account = AccountEntity.create(\n        request.getAccountTypeVO().getValue(),\n        request.getInitialBalanceVO().getValue(),\n        userId.getValue(),\n        request.getBankNameVO().getValue(),\n      );\n  \n      const savedAccount = await AppDataSource.transaction(async (manager) => {\n        return await this.accountRepository.create(account, manager);\n      });\n  \n      return AddAccountToUserResponse.success(savedAccount);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): AddAccountToUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return AddAccountToUserResponse.validationFailure(errors);\n    }\n\n    const message =\n      error instanceof Error ? error.message : \"Unknown error occurred\";\n    return AddAccountToUserResponse.failure(message);\n  }\n}\n","import { AccountEntity } from \"@models/account/entity\";\n\nexport class AddAccountToUserResponse {\n  private constructor(\n    private readonly success: boolean,\n    private readonly data?: AccountEntity,\n    private readonly error?: string,\n    private readonly validationErrors?: string[]\n  ) {}\n\n  public static success(data: AccountEntity): AddAccountToUserResponse {\n    return new AddAccountToUserResponse(true, data);\n  }\n\n  public static failure(error: string): AddAccountToUserResponse {\n    return new AddAccountToUserResponse(false, undefined, error);\n  }\n\n  public static validationFailure(errors: string[]): AddAccountToUserResponse {\n    return new AddAccountToUserResponse(false, undefined, undefined, errors);\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getData(): AccountEntity | undefined {\n    return this.data;\n  }\n\n  public getError(): string | undefined {\n    return this.error;\n  }\n\n  public getValidationErrors(): string[] | undefined {\n    return this.validationErrors;\n  }\n}\n","import { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { ZodError } from \"zod\";\nimport { DeleteAccountOfUserRequest } from \"@useCases/account/delete-of-a-user/request\";\nimport { DeleteAccountOfUserUseCaseInterface } from \"@useCases/account/delete-of-a-user/interfaces\";\nimport { DeleteAccountOfUserResponse } from \"@useCases/account/delete-of-a-user/response\";\n\nexport class DeleteAccountOfUserUseCase implements DeleteAccountOfUserUseCaseInterface {\n  constructor(\n    private readonly accountRepository: AccountRepositoryInterface,\n  ) {}\n\n  public async execute(request: DeleteAccountOfUserRequest): Promise<DeleteAccountOfUserResponse> {\n    try {\n      const accountId = request.getAccountIdVO();\n      \n      await AppDataSource.transaction(async (manager) => {\n        await this.accountRepository.delete(accountId, manager);\n      });\n  \n      return DeleteAccountOfUserResponse.success();\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): DeleteAccountOfUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return DeleteAccountOfUserResponse.validationFailure(errors);\n    }\n\n    const message = error instanceof Error ? error.message : \"Unknown error occurred\";\n    return DeleteAccountOfUserResponse.failure(message);\n  }\n}\n","export class DeleteAccountOfUserResponse {\n    private constructor(\n      private readonly success: boolean,\n      private readonly error?: string,\n      private readonly validationErrors?: string[]\n    ) {}\n  \n    public static success(): DeleteAccountOfUserResponse {\n      return new DeleteAccountOfUserResponse(true);\n    }\n  \n    public static failure(error: string): DeleteAccountOfUserResponse {\n      return new DeleteAccountOfUserResponse(false, error);\n    }\n  \n    public static validationFailure(errors: string[]): DeleteAccountOfUserResponse {\n      return new DeleteAccountOfUserResponse(false, undefined, errors);\n    }\n  \n    public isSuccess(): boolean {\n      return this.success;\n    }\n  \n    public getError(): string | undefined {\n      return this.error;\n    }\n  \n    public getValidationErrors(): string[] | undefined {\n      return this.validationErrors;\n    }\n  }\n  ","import { ZodError } from \"zod\";\nimport { GetAllAccountsOfUserRequest } from \"@useCases/account/get-all-of-user/request\";\nimport { GetAllAccountsOfUserResponse } from \"@useCases/account/get-all-of-user/response\";\nimport { GetAllAccountsOfUserUseCaseInterface } from \"@useCases/account/get-all-of-user/interfaces\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\n\nexport class GetAllAccountsOfUserUseCase implements GetAllAccountsOfUserUseCaseInterface {\n  constructor(\n    private readonly accountRepository: AccountRepositoryInterface,\n  ) {}\n\n  public async execute(request: GetAllAccountsOfUserRequest): Promise<GetAllAccountsOfUserResponse> {\n    try {\n      const userId = request.getUserIdVO();\n      \n      const accounts = await this.accountRepository.findByUserId(userId);\n      \n      if (!accounts || accounts.length === 0) {\n        return GetAllAccountsOfUserResponse.failure(\"No accounts found\");\n      }\n\n      return GetAllAccountsOfUserResponse.success(accounts);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): GetAllAccountsOfUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return GetAllAccountsOfUserResponse.validationFailure(errors);\n    }\n\n    const message = error instanceof Error ? error.message : \"Unknown error occurred\";\n    return GetAllAccountsOfUserResponse.failure(message);\n  }\n}","import { AccountEntity } from \"@models/account/entity\";\n\nexport class GetAllAccountsOfUserResponse {\n  private constructor(\n    private readonly success: boolean,\n    private readonly data?: AccountEntity[],\n    private readonly error?: string,\n    private readonly validationErrors?: string[]\n  ) {}\n\n  public static success(data: AccountEntity[]): GetAllAccountsOfUserResponse {\n    return new GetAllAccountsOfUserResponse(true, data);\n  }\n\n  public static failure(error: string): GetAllAccountsOfUserResponse {\n    return new GetAllAccountsOfUserResponse(false, undefined, error);\n  }\n\n  public static validationFailure(errors: string[]): GetAllAccountsOfUserResponse {\n    return new GetAllAccountsOfUserResponse(false, undefined, undefined, errors);\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getData(): AccountEntity[] | undefined {\n    return this.data;\n  }\n\n  public getError(): string | undefined {\n    return this.error;\n  }\n\n  public getValidationErrors(): string[] | undefined {\n    return this.validationErrors;\n  }\n}\n","import { AccountEntity } from \"@models/account/entity\";\n\nexport class UpdateAccountOfUserResponse {\n  private constructor(\n    private readonly success: boolean,\n    private readonly data?: AccountEntity,\n    private readonly error?: string,\n    private readonly validationErrors?: string[]\n  ) {}\n\n  public static success(data: AccountEntity): UpdateAccountOfUserResponse {\n    return new UpdateAccountOfUserResponse(true, data);\n  }\n\n  public static failure(error: string): UpdateAccountOfUserResponse {\n    return new UpdateAccountOfUserResponse(false, undefined, error);\n  }\n\n  public static validationFailure(errors: string[]): UpdateAccountOfUserResponse {\n    return new UpdateAccountOfUserResponse(false, undefined, undefined, errors);\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getData(): AccountEntity | undefined {\n    return this.data;\n  }\n\n  public getError(): string | undefined {\n    return this.error;\n  }\n\n  public getValidationErrors(): string[] | undefined {\n    return this.validationErrors;\n  }\n}\n","import { UpdateAccountOfUserRequest } from \"@useCases/account/update-of-a-user/request\";\nimport { UpdateAccountOfUserResponse } from \"@useCases/account/update-of-a-user/response\";\nimport { UpdateAccountOfUserUseCaseInterface } from \"@useCases/account/update-of-a-user/interfaces\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { AccountNotFoundError } from \"@errors/account/account-not-found-error\";\n\nexport class UpdateAccountOfUserUseCase implements UpdateAccountOfUserUseCaseInterface {\n  constructor(\n    private readonly accountRepository: AccountRepositoryInterface,\n  ) {}\n\n  public async execute(request: UpdateAccountOfUserRequest): Promise<UpdateAccountOfUserResponse> {\n    try {\n      const account = await AppDataSource.transaction(async (manager) => {\n        const account = await this.accountRepository.findById(request.getAccountIdVO(), manager);\n        \n        if (!account) {\n          throw new AccountNotFoundError(request.getAccountId().toString());\n        }\n\n        // Only update type if provided\n        if (request.hasAccountType()) {\n          account.setType(request.getAccountType().getValue());\n        }\n\n        await this.accountRepository.update(request.getAccountIdVO(), account, manager);\n        return account;\n      });\n\n      return UpdateAccountOfUserResponse.success(account);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): UpdateAccountOfUserResponse {\n    const message = error instanceof Error ? error.message : \"Unknown error occurred\";\n    return UpdateAccountOfUserResponse.failure(message);\n  }\n}","import { BankEntity } from \"@models/bank/entity\";\n\nexport class GetAllBanksResponse {\n  private constructor(\n    private readonly banks: BankEntity[],\n    private readonly success: boolean,\n    private readonly message: string,\n    private readonly errors: string[],\n  ) {}\n\n  public static success(banks: BankEntity[]): GetAllBanksResponse {\n    return new GetAllBanksResponse(banks, true, \"Banks fetched successfully\", []);\n  }\n\n  public static failure(message: string, errors: string[] = []): GetAllBanksResponse {\n    const allErrors = errors.length > 0 ? errors : [message];\n    return new GetAllBanksResponse([], false, message, allErrors);\n  }\n\n  public static validationFailure(errors: string[]): GetAllBanksResponse {\n    return new GetAllBanksResponse([], false, \"Validation failed\", errors);\n  }\n\n  public getBanks(): BankEntity[] {\n    return this.banks;\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}   ","import { NotFoundError } from \"../not-found-error\";\n\nexport class BankNotFoundError extends NotFoundError {\n  constructor(name: string) {\n    super(`Bank not found: ${name}`);\n    Object.setPrototypeOf(this, BankNotFoundError.prototype);\n  }\n}","import { GetAllBanksResponse } from \"@useCases/banks/get-all/response\";\nimport { GetAllBanksUseCaseInterface } from \"@useCases/banks/get-all/interfaces\";\nimport { BankRepositoryInterface } from \"@models/bank/repository/interfaces\";\nimport { BankNotFoundError } from \"@domain/errors/bank/bank-not-found-error\";\n\nexport class GetAllBanksUseCase implements GetAllBanksUseCaseInterface {\n  constructor(private readonly bankRepository: BankRepositoryInterface) {}\n\n  async execute(): Promise<GetAllBanksResponse> {\n    try {\n      const banks = await this.bankRepository.findAll();\n      \n      if (!banks || banks.length === 0) {\n        throw new BankNotFoundError(\"No banks found\");\n      }\n\n      return GetAllBanksResponse.success(banks);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): GetAllBanksResponse {\n    const message = error instanceof Error ? error.message : \"Unknown error occurred\";\n    return GetAllBanksResponse.failure(message);\n  }\n}","import { ZodError } from \"zod\";\nimport { AddTransactionToUserRequest } from \"@useCases/transaction/add-to-a-user/request\";\nimport { AddTransactionToUserResponse } from \"@useCases/transaction/add-to-a-user/response\";\nimport { AddTransactionToUserUseCaseInterface } from \"@useCases/transaction/add-to-a-user/interfaces\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { TransactionRepositoryInterface } from \"@models/transaction/repository/interfaces\";\nimport { TransactionEntity } from \"@models/transaction/entity\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { AccountNotFoundError } from \"@errors/account/account-not-found-error\";\nimport { InsufficientFundsError } from \"@errors/transaction/insufficient-funds-error\";\nimport { InvalidTransactionTypeError } from \"@errors/transaction/invalid-transaction-type-error\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\n\nexport class AddTransactionToUserUseCase implements AddTransactionToUserUseCaseInterface {\n  constructor(\n    private readonly accountRepository: AccountRepositoryInterface,\n    private readonly transactionRepository: TransactionRepositoryInterface,\n  ) {}\n\n  public async execute(request: AddTransactionToUserRequest): Promise<AddTransactionToUserResponse> {\n    try {\n      const transaction = await AppDataSource.transaction(async (manager) => {\n        const sourceAccount = await this.accountRepository.findById(request.getSourceAccountIdVO(), manager);\n        const destinationAccount = await this.accountRepository.findById(request.getDestinationAccountIdVO(), manager);\n\n        if (!sourceAccount) {\n          throw new AccountNotFoundError(request.getSourceAccountIdVO().getValue().toString());\n        }\n        \n        if (!destinationAccount) {\n          throw new AccountNotFoundError(request.getDestinationAccountIdVO().getValue().toString());\n        }\n\n        switch (request.getType()) {\n          case TransactionType.TRANSFERENCIA:\n            if (sourceAccount.getBalance() < request.getAmount()) {\n              throw new InsufficientFundsError();\n            }\n\n            const transferAmount = request.getAmount();\n            sourceAccount.decreaseBalance(transferAmount);\n            destinationAccount.increaseBalance(transferAmount);\n            break;\n          default:\n            throw new InvalidTransactionTypeError();\n        }\n\n        await this.accountRepository.update(request.getSourceAccountIdVO(), sourceAccount, manager);\n        await this.accountRepository.update(request.getDestinationAccountIdVO(), destinationAccount, manager);\n\n        const newTransaction = TransactionEntity.create({\n          type: request.getType(),\n          amount: request.getAmount(),\n          sourceAccountId: request.getSourceAccountId(),\n          destinationAccountId: request.getDestinationAccountId(),\n          description: `\n          ${request.getType()} from ${request.getSourceAccountId()} to ${request.getDestinationAccountId()} with amount ${request.getAmount()}`,\n        });\n        \n\n        return await this.transactionRepository.create(newTransaction, manager);\n      });\n\n      return AddTransactionToUserResponse.success(transaction);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): AddTransactionToUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return AddTransactionToUserResponse.validationFailure(errors);\n    }\n\n    if (error instanceof AccountNotFoundError) {\n      return AddTransactionToUserResponse.failure(\"\", [error.message]);\n    }\n\n    if (error instanceof InsufficientFundsError) {\n      return AddTransactionToUserResponse.failure(\"\", [error.message]);\n    }\n\n    if (error instanceof InvalidTransactionTypeError) {\n      return AddTransactionToUserResponse.failure(\"\", [error.message]);\n    }\n\n    if (error instanceof Error) {\n      if (error.message.includes(\"Description must have at least 2 characters\")) {\n        return AddTransactionToUserResponse.failure(\"\", [error.message]);\n      }\n      return AddTransactionToUserResponse.failure(error.message);\n    }\n\n    return AddTransactionToUserResponse.failure(\"Unknown error occurred\");\n  }\n}","import { TransactionEntity } from \"@models/transaction/entity\";\nimport { InvalidTransactionIdError } from \"@errors/transaction/invalid-transaction-id-error\";\n\nexport class AddTransactionToUserResponse {\n  private constructor(\n    private readonly transaction: TransactionEntity | null,\n    private readonly success: boolean,\n    private readonly message: string | TransactionEntity,\n    private readonly errors: string[] \n  ) {}\n\n  public static success(transaction: TransactionEntity): AddTransactionToUserResponse {\n    return new AddTransactionToUserResponse(transaction, true, transaction, []);\n  }\n\n  public static failure(\n    message: string,\n    errors: string[] = [],\n  ): AddTransactionToUserResponse {\n    const finalErrors = errors.length > 0 ? errors : (message ? [message] : []);\n    return new AddTransactionToUserResponse(null, false, message, finalErrors);\n  }\n\n  public static validationFailure(errors: string[]): AddTransactionToUserResponse {\n    return new AddTransactionToUserResponse(null, false, \"Validation failed\", errors);\n  }\n\n  public getTransaction(): TransactionEntity {\n    if (!this.transaction) {\n      throw new InvalidTransactionIdError(\"Cannot get transaction from failed response\");\n    }\n    return this.transaction;\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string | TransactionEntity {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}","import { ValidationError } from \"../validation-error\";\n\nexport class InsufficientFundsError extends ValidationError {\n  constructor() {\n    super('Insufficient funds');\n    Object.setPrototypeOf(this, InsufficientFundsError.prototype);\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidTransactionTypeError extends ValidationError {\n  constructor() {\n    super('Invalid transaction type');\n    Object.setPrototypeOf(this, InvalidTransactionTypeError.prototype);\n  }\n} ","import { ZodError } from \"zod\";\nimport { GetAllOfUserRequest } from \"@useCases/transaction/get-all-of-user/request\";\nimport { GetAllOfUserResponse } from \"@useCases/transaction/get-all-of-user/response\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { GetAllOfUserUseCaseInterface } from \"@useCases/transaction/get-all-of-user/interfaces\";\nimport { GetAllOfUserSchemas } from \"@useCases/transaction/get-all-of-user/schemas\";\nimport { TransactionRepositoryInterface } from \"@models/transaction/repository/interfaces\";\n\nexport class GetAllOfUserUseCase implements GetAllOfUserUseCaseInterface {\n  constructor(\n    private readonly transactionRepository: TransactionRepositoryInterface,\n  ) {}\n\n  public async execute(request: GetAllOfUserRequest): Promise<GetAllOfUserResponse> {\n    try {\n      const validated = GetAllOfUserSchemas.httpRequestSchema.parse({\n        params: {\n          userId: request.getUserId(),\n        },\n      });\n\n      const userId = UserId.create(validated.params.userId);\n      const transactions = await this.transactionRepository.findByUserId(userId);\n      if (!transactions || transactions.length === 0) {\n        return GetAllOfUserResponse.failure(\"No transactions found\", []);\n      }     \n\n      return GetAllOfUserResponse.success(transactions);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): GetAllOfUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`\n      );\n      return GetAllOfUserResponse.failure(\"Failed to fetch transactions\", errors);\n    }\n\n    const message = error instanceof Error ? error.message : \"Unknown error\";\n    return GetAllOfUserResponse.failure(\"Failed to fetch transactions\", [message]);\n  }\n}\n","import { TransactionEntity } from \"@models/transaction/entity\";\n\nexport class GetAllOfUserResponse {\n    constructor(\n        private readonly transactions: TransactionEntity[],\n        private readonly success: boolean,\n        private readonly message: string,\n        private readonly errors: string[],\n      ) {}\n\n      public static success(transactions: TransactionEntity[]): GetAllOfUserResponse {\n        return new GetAllOfUserResponse(transactions, true, \"Transactions fetched successfully\", []);\n      }\n\n      public static failure(message: string, errors: string[]): GetAllOfUserResponse {\n        return new GetAllOfUserResponse([], false, message, errors);\n      }\n\n      public getTransactions(): TransactionEntity[] {\n        return this.transactions;\n      }\n\n      public isSuccess(): boolean {\n        return this.success;\n      }\n\n      public getMessage(): string {\n        return this.message;\n      }\n    \n      public getErrors(): string[] {\n        return this.errors;\n      }\n    \n      public hasErrors(): boolean {\n        return this.errors.length > 0;\n      }\n}   ","import { ZodError } from \"zod\";\nimport { CreateUserRequest } from \"@useCases/user/create/request\";\nimport { CreateUserResponse } from \"@useCases/user/create/response\";\nimport { CreateUserUseCaseInterface } from \"@useCases/user/create/interfaces\";\nimport { UserRepositoryInterface } from \"@models/user/repository/interfaces\";\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { UserEntity } from \"@models/user/entity\";\nimport { AccountEntity } from \"@models/account/entity\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { BankRepositoryInterface } from \"@models/bank/repository/interfaces\";\nimport { BankName } from \"@models/bank/value-objects/name\";\nimport { BankNotFoundError } from \"@errors/bank/bank-not-found-error\";\nimport { UserAlreadyExistsError } from \"@errors/user/user-already-exists-error\";\nimport { logger } from \"@infrastructure/logger\";\n\nexport class CreateUserUseCase implements CreateUserUseCaseInterface {\n  constructor(\n    private readonly userRepository: UserRepositoryInterface,\n    private readonly accountRepository: AccountRepositoryInterface,\n    private readonly bankRepository: BankRepositoryInterface,\n  ) { }\n\n  public async execute(\n    request: CreateUserRequest,\n  ): Promise<CreateUserResponse> {\n    try {\n      logger.info(\"Creating user\", { request });\n      const name = request.getName();\n      const email = request.getEmail();\n      const password = request.getPassword();\n      const bankName = request.getBankName();\n      const accountType = request.getAccountType();\n      const accountBalance = request.getAccountBalance();\n\n      logger.info(\"Checking if user exists\", { email });\n      const userExists = await this.userRepository.exists(email);\n      if (userExists) {\n        throw new UserAlreadyExistsError(email.getValue());\n      }\n\n      logger.info(\"Hashing password\", { password });\n      const passwordVO = UserPassword.create(password.getValue());\n      const hashedPassword = await passwordVO.hash();\n\n      logger.info(\"Finding bank\", { bankName });\n      const bankNameVO = BankName.create(bankName.getValue());\n      const bank = await this.bankRepository.findByName(bankNameVO);\n      if (!bank) {\n        throw new BankNotFoundError(bankName.getValue());\n      }\n\n      logger.info(\"Creating user\", { name, email, hashedPassword });\n      const user = UserEntity.create(\n          name.getValue(),\n        email.getValue(),\n        hashedPassword.getValue(),\n      );\n\n      logger.info(\"Creating account\", { accountType, accountBalance, bankName });\n\n      await AppDataSource.transaction(async (manager) => {\n        const transactionalUserRepo = this.userRepository.withTransaction(manager);\n        const transactionalAccountRepo = this.accountRepository.withTransaction(manager);\n        await transactionalUserRepo.create(user);\n        logger.info(\"User created in transaction\");\n        const account = AccountEntity.create(\n          accountType.getValue(),\n          accountBalance.getValue(),\n          user.getId().getValue(),\n          bank.getName().getValue(),\n        );\n        logger.info(\"Account created\", { account });\n        await transactionalAccountRepo.create(account);\n        logger.info(\"Account created in transaction\");\n      });\n\n      logger.info(\"User created\");\n      return CreateUserResponse.success(user);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): CreateUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return CreateUserResponse.validationFailure(errors);\n    }\n\n    const message =\n      error instanceof Error ? error.message : \"Unknown error occurred\";\n\n    return CreateUserResponse.failure(message);\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserResponseError extends ValidationError {\n  constructor() {\n    super(\"Cannot get user from failed response\");\n    Object.setPrototypeOf(this, InvalidUserResponseError.prototype);\n  }\n}","import { UserEntity } from \"@models/user/entity\";\nimport { InvalidUserResponseError } from \"@errors/user/invalid-user-response-error\";\n\nexport class CreateUserResponse {\n  private constructor(\n    private readonly user: UserEntity | null,\n    private readonly success: boolean,\n    private readonly message: string,\n    private readonly errors: string[],\n  ) {}\n\n  public static success(user: UserEntity): CreateUserResponse {\n    return new CreateUserResponse(user, true, \"User created successfully\", []);\n  }\n\n  public static failure(\n    message: string,\n    errors: string[] = [],\n  ): CreateUserResponse {\n    return new CreateUserResponse(null, false, message, errors);\n  }\n\n  public static validationFailure(errors: string[]): CreateUserResponse {\n    return new CreateUserResponse(null, false, \"Validation failed\", errors);\n  }\n\n  public getUser(): UserEntity {\n    if (!this.user) {\n      throw new InvalidUserResponseError();\n    }\n    return this.user;\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}\n","import { DomainError } from \"./domain-error\";\n\nexport class ConflictError extends DomainError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, ConflictError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 409;\n  }\n}","import { ConflictError } from \"../conflict-error\";\n\nexport class UserAlreadyExistsError extends ConflictError {\n  constructor(email: string) {\n    super(`User already exists: ${email}`);\n    Object.setPrototypeOf(this, UserAlreadyExistsError.prototype);\n  }\n}","import { ZodError } from \"zod\";\nimport { DeleteUserRequest } from \"@useCases/user/delete/request\";\nimport { DeleteUserResponse } from \"@useCases/user/delete/response\";\nimport { DeleteUserUseCaseInterface } from \"@useCases/user/delete/interfaces\";\n\nimport { UserRepositoryInterface } from \"@models/user/repository/interfaces\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { DeleteUserSchemas } from \"@useCases/user/delete/schemas\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { UserNotFoundError } from \"@errors/user/user-not-found-error\";\n\nexport class DeleteUserUseCase implements DeleteUserUseCaseInterface {\n  constructor(\n    private readonly userRepository: UserRepositoryInterface,\n  ) {}\n\n  public async execute(\n    request: DeleteUserRequest,\n  ): Promise<DeleteUserResponse> {\n    try {\n      const validated = DeleteUserSchemas.httpRequestSchema.parse({\n        params: {\n          id: request.getId(),\n        },\n      });\n\n      const userId = UserId.create(validated.params.id);\n\n      await AppDataSource.transaction(async (manager) => {\n        const transactionalUserRepo = this.userRepository.withTransaction(manager);\n\n        const user = await transactionalUserRepo.findById(userId);\n        if (!user) {\n          throw new UserNotFoundError(validated.params.id.toString());\n        }\n\n        await transactionalUserRepo.delete(userId);\n      });\n\n      return DeleteUserResponse.success();\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): DeleteUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return DeleteUserResponse.validationFailure(errors);\n    }\n\n    const message =\n      error instanceof Error ? error.message : \"Unknown error occurred\";\n    return DeleteUserResponse.failure(message);\n  }\n}\n","export class DeleteUserResponse {\n  private constructor(\n    private readonly success: boolean,\n    private readonly message: string,\n    private readonly errors: string[],\n  ) {}\n\n  public static success(): DeleteUserResponse {\n    return new DeleteUserResponse(true, \"User deleted successfully\", []);\n  }\n\n  public static failure(\n    message: string,\n    errors: string[] = [],\n  ): DeleteUserResponse {\n    return new DeleteUserResponse(false, message, errors);\n  }\n\n  public static validationFailure(errors: string[]): DeleteUserResponse {\n    return new DeleteUserResponse(false, \"Validation failed\", errors);\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}\n","import { ZodError } from \"zod\";\nimport { LoginRequest } from \"@useCases/user/login/request\";\nimport { LoginResponse } from \"@useCases/user/login/response\";\nimport { LoginUseCaseInterface } from \"@useCases/user/login/interfaces\";\nimport { UserRepositoryInterface } from \"@models/user/repository/interfaces\";\nimport { AuthServiceInterface } from \"@services/auth/interfaces\";\nimport { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { UserLoginSchemas } from \"@useCases/user/login/schemas\";\nimport { InvalidCredentialsError } from \"@errors/user/invalid-credentials-error\";\n\nexport class LoginUseCase implements LoginUseCaseInterface {\n  constructor(\n    private readonly userRepository: UserRepositoryInterface,\n    private readonly authService: AuthServiceInterface,\n  ) {}\n\n  public async execute(request: LoginRequest): Promise<LoginResponse> {\n    try {\n      const validated = UserLoginSchemas.requestSchema.parse({\n        email: request.getEmail(),\n        password: request.getPassword(),\n      });\n\n      const email = UserEmail.create(validated.email);\n      const user = await this.userRepository.findByEmail(email);\n\n      if (!user) {\n        throw new InvalidCredentialsError();\n      }\n\n      const userPassword = UserPassword.createFromHash(user.getPasswordHash());\n      const isValid = await userPassword.compare(validated.password);\n\n      if (!isValid) {\n        throw new InvalidCredentialsError();\n      }\n\n      const token = this.authService.generateToken(user.getId().getValue());\n\n      return LoginResponse.success({\n        token,\n        user,\n      });\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): LoginResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return LoginResponse.validationFailure(errors);\n    }\n\n    const message =\n      error instanceof Error ? error.message : \"Unknown error occurred\";\n    return LoginResponse.failure(message);\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidAuthResultError extends ValidationError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, InvalidAuthResultError.prototype);\n  }\n}","import { InvalidAuthResultError } from \"@errors/user/invalid-auth-result-error\";\nimport { AuthResult } from \"@useCases/user/login/types\";\n\nexport class LoginResponse {\n  private constructor(\n    private readonly authResult: AuthResult | null,\n    private readonly success: boolean,\n    private readonly message: string,\n    private readonly errors: string[],\n  ) {}\n\n  public static success(authResult: AuthResult): LoginResponse {\n    return new LoginResponse(authResult, true, \"Login successful\", []);\n  }\n\n  public static failure(message: string, errors: string[] = []): LoginResponse {\n    return new LoginResponse(null, false, message, errors);\n  }\n\n  public static validationFailure(errors: string[]): LoginResponse {\n    return new LoginResponse(null, false, \"Validation failed\", errors);\n  }\n\n  public getAuthResult(): AuthResult {\n    if (!this.authResult) {\n      throw new InvalidAuthResultError(\"Cannot get auth result from failed response\");\n    }\n    return this.authResult;\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}\n","import { DomainError } from \"./domain-error\";\n\nexport class NotAuthorizedError extends DomainError {\n  constructor() {\n    super(\"Not authorized\");\n  }\n\n  public getStatusCode(): number {\n    return 401;\n  }\n}","import { NotAuthorizedError } from \"../not-authorized-error\";\n\nexport class InvalidCredentialsError extends NotAuthorizedError {\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, InvalidCredentialsError.prototype);\n  }\n} ","import { ZodError } from \"zod\";\nimport { UpdateUserRequest } from \"@useCases/user/update/request\";\nimport { UpdateUserResponse } from \"@useCases/user/update/response\";\nimport { UpdateUserUseCaseInterface } from \"@useCases/user/update/interfaces\";\nimport { UserRepositoryInterface } from \"@models/user/repository/interfaces\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { UpdateUserSchemas } from \"@useCases/user/update/schemas\";  \nimport { UserEntity } from \"@models/user/entity\";\nimport { UserNotFoundError } from \"@errors/user/user-not-found-error\";\n\nexport class UpdateUserUseCase implements UpdateUserUseCaseInterface {\n  constructor(\n    private readonly userRepository: UserRepositoryInterface,\n  ) {}\n\n  public async execute(\n    request: UpdateUserRequest,\n  ): Promise<UpdateUserResponse> {\n    try {\n      const validated = UpdateUserSchemas.httpRequestSchema.parse({\n        body: {\n          user: {\n            name: request.getName(),\n            email: request.getEmail(),\n            password: request.getPassword(),\n          },\n        },\n        params: {\n          id: request.getId(),\n        },\n      });\n\n      const userId = UserId.create(validated.params.id);\n      const user = await this.userRepository.findById(userId);\n      if (!user) {\n        throw new UserNotFoundError(validated.params.id.toString());\n      }\n\n      const updatedUser = await this.userRepository.update(userId, UserEntity.create(\n        validated.body.user.name,\n        validated.body.user.email,\n        validated.body.user.password,\n      ));\n\n      return UpdateUserResponse.success(updatedUser);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private handleError(error: unknown): UpdateUserResponse {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map(\n        (err) => `${err.path.join(\".\")}: ${err.message}`,\n      );\n      return UpdateUserResponse.validationFailure(errors);\n    }\n    const message =\n      error instanceof Error ? error.message : \"Unknown error occurred\";\n    return UpdateUserResponse.failure(message);\n  }\n}\n","import { UserEntity } from \"@models/user/entity\";\nimport { InvalidUserResponseError } from \"@errors/user/invalid-user-response-error\";\n\nexport class UpdateUserResponse {\n  private constructor(\n    private readonly user: UserEntity | null,\n    private readonly success: boolean,\n    private readonly message: string,\n    private readonly errors: string[],\n  ) {}\n\n  public static success(user: UserEntity): UpdateUserResponse {\n    return new UpdateUserResponse(user, true, \"User updated successfully\", []);\n  }\n\n  public static failure(\n    message: string,\n    errors: string[] = [],\n  ): UpdateUserResponse {\n    return new UpdateUserResponse(null, false, message, errors);\n  }\n\n  public static validationFailure(errors: string[]): UpdateUserResponse {\n    return new UpdateUserResponse(null, false, \"Validation failed\", errors);\n  }\n\n  public getUser(): UserEntity {\n    if (!this.user) {\n      throw new InvalidUserResponseError();\n    }\n    return this.user;\n  }\n\n  public isSuccess(): boolean {\n    return this.success;\n  }\n\n  public getMessage(): string {\n    return this.message;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n\n  public hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n}\n","import { AuthServiceInterface } from \"@services/auth/interfaces\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { TokenPayload } from \"@services/auth/types\";\n\nexport class AuthService implements AuthServiceInterface {\n  private readonly jwtSecret: string;\n  private readonly jwtExpiresIn: string;\n\n  constructor() {\n    this.jwtSecret = process.env.JWT_SECRET;\n    this.jwtExpiresIn = \"1h\";\n  }\n\n  public async hashPassword(raw: string): Promise<string> {\n    return bcrypt.hash(raw, 10);\n  }\n\n  public async comparePassword(raw: string, hash: string): Promise<boolean> {\n    return bcrypt.compare(raw, hash);\n  }\n\n  public generateToken(userId: number): string {\n    return jwt.sign({ userId }, this.jwtSecret, { \n      expiresIn: this.jwtExpiresIn,\n    });\n  }\n\n  public verifyToken(token: string): TokenPayload {\n    const decoded = jwt.verify(token, this.jwtSecret) as TokenPayload;\n    return decoded;\n  }\n}\n","// Repositories\nimport { TypeOrmAccountRepository } from \"@infrastructure/datasources/databases/typeorm/repositories/account\";\nimport { TypeOrmBankRepository } from \"@infrastructure/datasources/databases/typeorm/repositories/bank\";\nimport { TypeOrmTransactionRepository } from \"@infrastructure/datasources/databases/typeorm/repositories/transaction\";\nimport { TypeOrmUserRepository } from \"@infrastructure/datasources/databases/typeorm/repositories/user\";\n// Errors\nimport { DependencyNotFoundError } from \"@errors/dependency-not-found-error\";\n// Models\nimport { AccountRepositoryInterface } from \"@models/account/repository/interfaces\";\nimport { BankRepositoryInterface } from \"@models/bank/repository/interfaces\";\nimport { TransactionRepositoryInterface } from \"@models/transaction/repository/interfaces\";\nimport { UserRepositoryInterface } from \"@models/user/repository/interfaces\";\n// Controllers\n// Account\nimport { AddAccountToUserController } from \"@infrastructure/http/routes/v1/account/controllers/add-to-a-user\";\nimport { DeleteAccountOfUserController } from \"@infrastructure/http/routes/v1/account/controllers/delete-of-a-user\";\nimport { GetAllAccountsOfUserController } from \"@infrastructure/http/routes/v1/account/controllers/get-all-of-user\";\nimport { UpdateAccountOfUserController } from \"@infrastructure/http/routes/v1/account/controllers/update-of-a-user\";\n// Banks\nimport { GetAllBanksController } from \"@infrastructure/http/routes/v1/banks/controllers/get-all-banks\";\n// Transactions\nimport { AddTransactionToUserController } from \"@infrastructure/http/routes/v1/transaction/controllers/add-to-a-user\";\nimport { GetAllTransactionsOfUserController } from \"@infrastructure/http/routes/v1/transaction/controllers/get-all-of-user\";\n// Users\nimport { CreateUserController } from \"@infrastructure/http/routes/v1/users/controllers/create\";\nimport { DeleteUserController } from \"@infrastructure/http/routes/v1/users/controllers/delete\";\nimport { LoginController } from \"@infrastructure/http/routes/v1/users/controllers/login\";\nimport { UpdateUserController } from \"@infrastructure/http/routes/v1/users/controllers/update\";\n// Use Cases\n// Account\nimport { AddAccountToUserUseCase } from \"@useCases/account/add-to-a-user\";\nimport { AddAccountToUserUseCaseInterface } from \"@useCases/account/add-to-a-user/interfaces\";\nimport { DeleteAccountOfUserUseCase } from \"@useCases/account/delete-of-a-user\";\nimport { DeleteAccountOfUserUseCaseInterface } from \"@useCases/account/delete-of-a-user/interfaces\";\nimport { GetAllAccountsOfUserUseCase } from \"@useCases/account/get-all-of-user\";\nimport { GetAllAccountsOfUserUseCaseInterface } from \"@useCases/account/get-all-of-user/interfaces\";\nimport { UpdateAccountOfUserUseCase } from \"@useCases/account/update-of-a-user\";\nimport { UpdateAccountOfUserUseCaseInterface } from \"@useCases/account/update-of-a-user/interfaces\";\n// Banks\nimport { GetAllBanksUseCase } from \"@useCases/banks/get-all\";\nimport { GetAllBanksUseCaseInterface } from \"@useCases/banks/get-all/interfaces\";\n// Transactions\nimport { AddTransactionToUserUseCase } from \"@useCases/transaction/add-to-a-user\";\nimport { AddTransactionToUserUseCaseInterface } from \"@useCases/transaction/add-to-a-user/interfaces\";\nimport { GetAllOfUserUseCase } from \"@useCases/transaction/get-all-of-user\";\nimport { GetAllOfUserUseCaseInterface } from \"@useCases/transaction/get-all-of-user/interfaces\";\n// Users\nimport { CreateUserUseCase } from \"@useCases/user/create\";\nimport { CreateUserUseCaseInterface } from \"@useCases/user/create/interfaces\";\nimport { DeleteUserUseCase } from \"@useCases/user/delete\";\nimport { DeleteUserUseCaseInterface } from \"@useCases/user/delete/interfaces\";\nimport { LoginUseCase } from \"@useCases/user/login\";\nimport { LoginUseCaseInterface } from \"@useCases/user/login/interfaces\";\nimport { UpdateUserUseCase } from \"@useCases/user/update\";\nimport { UpdateUserUseCaseInterface } from \"@useCases/user/update/interfaces\";\n// Services\nimport { AuthService } from \"@services/auth\";\nimport { AuthServiceInterface } from \"@services/auth/interfaces\";\n\n\nexport class DIContainer {\n  private static instance: DIContainer;\n  private dependencies: Map<string, unknown> = new Map();\n\n  private constructor() {\n    this.registerDependencies();\n  }\n\n  static getInstance(): DIContainer {\n    if (!DIContainer.instance) {\n      DIContainer.instance = new DIContainer();\n    }\n    return DIContainer.instance;\n  }\n\n  private registerDependencies(): void {\n    this.registerRepositories();\n    this.registerServices();\n    this.registerUseCases();\n    this.registerControllers();\n  }\n\n  private registerRepositories(): void {\n    this.dependencies.set(\"UserRepository\", new TypeOrmUserRepository());\n    this.dependencies.set(\"AccountRepository\", new TypeOrmAccountRepository());\n    this.dependencies.set(\"BankRepository\", new TypeOrmBankRepository());\n    this.dependencies.set(\"TransactionRepository\", new TypeOrmTransactionRepository());\n  }\n\n  private registerServices(): void {\n    this.dependencies.set(\"AuthService\", new AuthService());\n  }\n\n  private registerUseCases(): void {\n    this.dependencies.set(\n      \"AddAccountToUserUseCase\",\n      new AddAccountToUserUseCase(\n        this.get<AccountRepositoryInterface>(\"AccountRepository\"),\n        this.get<UserRepositoryInterface>(\"UserRepository\"),\n      ),\n    );\n    this.dependencies.set(\n      \"DeleteAccountOfUserUseCase\",\n      new DeleteAccountOfUserUseCase(\n        this.get<AccountRepositoryInterface>(\"AccountRepository\"),\n      ),\n    );\n    this.dependencies.set(\n      \"GetAllAccountsOfUserUseCase\",\n      new GetAllAccountsOfUserUseCase(\n        this.get<AccountRepositoryInterface>(\"AccountRepository\"),\n      ),\n    );\n    this.dependencies.set(\n      \"UpdateAccountOfUserUseCase\",\n      new UpdateAccountOfUserUseCase(\n        this.get<AccountRepositoryInterface>(\"AccountRepository\"),\n      ),\n    );\n    this.dependencies.set(\n      \"GetAllBanksUseCase\",\n      new GetAllBanksUseCase(\n        this.get<BankRepositoryInterface>(\"BankRepository\"),\n      ),\n    );\n    this.dependencies.set(\n      \"CreateUserUseCase\",\n      new CreateUserUseCase(\n        this.get<UserRepositoryInterface>(\"UserRepository\"),\n        this.get<AccountRepositoryInterface>(\"AccountRepository\"),\n        this.get<BankRepositoryInterface>(\"BankRepository\"),\n      ),\n    );\n    this.dependencies.set(\n      \"DeleteUserUseCase\",\n      new DeleteUserUseCase(\n        this.get<UserRepositoryInterface>(\"UserRepository\"),\n      ),\n    );\n    this.dependencies.set(\n      \"LoginUserUseCase\",\n      new LoginUseCase(\n        this.get<UserRepositoryInterface>(\"UserRepository\"),\n        this.get<AuthServiceInterface>(\"AuthService\"),\n      ),\n    );\n    this.dependencies.set(\n      \"UpdateUserUseCase\",\n      new UpdateUserUseCase(\n        this.get<UserRepositoryInterface>(\"UserRepository\"),\n      ),\n    );\n    this.dependencies.set(\n      \"AddTransactionToUserUseCase\",\n      new AddTransactionToUserUseCase(\n        this.get<AccountRepositoryInterface>(\"AccountRepository\"),\n        this.get<TransactionRepositoryInterface>(\"TransactionRepository\"),\n      ),\n    );\n    this.dependencies.set(\n      \"GetAllTransactionsOfUserUseCase\",\n      new GetAllOfUserUseCase(\n        this.get<TransactionRepositoryInterface>(\"TransactionRepository\"),\n      ),\n    );\n  }\n\n  private registerControllers(): void {\n    this.dependencies.set(\n      \"AddAccountToUserController\",\n      new AddAccountToUserController(\n        this.get<AddAccountToUserUseCaseInterface>(\"AddAccountToUserUseCase\"),\n      ),\n    );\n    this.dependencies.set(\n      \"DeleteAccountOfUserController\",\n      new DeleteAccountOfUserController(\n        this.get<DeleteAccountOfUserUseCaseInterface>(\"DeleteAccountOfUserUseCase\"),\n      ),\n    );\n    this.dependencies.set(\n      \"GetAllAccountsOfUserController\",\n      new GetAllAccountsOfUserController(\n        this.get<GetAllAccountsOfUserUseCaseInterface>(\"GetAllAccountsOfUserUseCase\"),\n      ),\n    );\n    this.dependencies.set(\n      \"UpdateAccountOfUserController\",\n      new UpdateAccountOfUserController(\n        this.get<UpdateAccountOfUserUseCaseInterface>(\"UpdateAccountOfUserUseCase\"),\n      ),\n    );\n    this.dependencies.set(\n      \"GetAllBanksController\",\n      new GetAllBanksController(\n        this.get<GetAllBanksUseCaseInterface>(\"GetAllBanksUseCase\"),\n      ),\n    );\n    this.dependencies.set(\n      \"CreateUserController\",\n      new CreateUserController(\n        this.get<CreateUserUseCaseInterface>(\"CreateUserUseCase\"),\n      ),\n    );\n    this.dependencies.set(\n      \"DeleteUserController\",\n      new DeleteUserController(\n        this.get<DeleteUserUseCaseInterface>(\"DeleteUserUseCase\"),\n      ),\n    );\n    this.dependencies.set(\n      \"LoginController\",\n      new LoginController(\n        this.get<LoginUseCaseInterface>(\"LoginUserUseCase\"),\n      ),\n    );\n    this.dependencies.set(\n      \"UpdateUserController\",\n      new UpdateUserController(\n        this.get<UpdateUserUseCaseInterface>(\"UpdateUserUseCase\"),\n      ),\n    );\n    this.dependencies.set(\n      \"AddTransactionToUserController\",\n      new AddTransactionToUserController(\n        this.get<AddTransactionToUserUseCaseInterface>(\"AddTransactionToUserUseCase\"),\n      ),\n    );\n    this.dependencies.set(\n      \"GetAllTransactionsOfUserController\",\n      new GetAllTransactionsOfUserController(\n        this.get<GetAllOfUserUseCaseInterface>(\"GetAllTransactionsOfUserUseCase\"),\n      ),\n    );\n\n  }\n\n  public get<T>(key: string): T {\n    const dependency = this.dependencies.get(key) as T;\n    if (!dependency) {\n      throw new DependencyNotFoundError(key);\n    }\n    return dependency;\n  }\n\n  public register<T>(key: string, instance: T): void {\n    this.dependencies.set(key, instance);\n  }\n\n  public has(key: string): boolean {\n    return this.dependencies.has(key);\n  }\n}\n","import { logger } from '@infrastructure/logger'\nimport { NextFunction, Request, Response } from 'express'\nimport zod from 'zod'\n\n\nexport function errorHandler(\n  err: unknown,\n  _req: Request,\n  res: Response,\n  next: NextFunction,\n) {\n  if (res.headersSent) {\n    return next(err)\n  }\n\n  if (err instanceof zod.ZodError) {\n    logger.http(err.message)\n    res.status(404).json({\n      error: 'Invalid input. Please check your request body. ' + err.message,\n    })\n    return\n  }\n\n  logger.error(err)\n  res.status(500).json({ error: 'Internal Server Error' })\n  next(err)\n}\n\n","import { Router } from \"express\";\n\nexport class RouterFactory {\n  public static createRouter(config: RouterConfiguration = {}): Router {\n    return Router({\n      mergeParams: config.mergeParams ?? true,\n      caseSensitive: config.caseSensitive ?? true,\n      strict: config.strict ?? true,\n    });\n  }\n\n  public static createStandardRouter(): Router {\n    return this.createRouter({\n      mergeParams: true,\n      caseSensitive: true,\n      strict: true,\n    });\n  }\n}\n","import { DIContainer } from \"@infrastructure/di/container\";\nimport { errorHandler } from \"@infrastructure/http/middlewares\";\nimport { Router } from \"express\";\nimport { RouterFactory } from \"@infrastructure/http/routes/factory\";\n\nexport abstract class BaseRouter {\n  protected readonly router: Router;\n  protected readonly container: DIContainer;\n\n  constructor() {\n    this.container = DIContainer.getInstance();\n    this.router = RouterFactory.createStandardRouter();\n    this.setupMiddleware();\n    this.setupRoutes();\n  }\n\n  protected setupMiddleware(): void {\n    this.router.use(errorHandler);\n  }\n\n  protected abstract setupRoutes(): void;\n\n  public getRouter(): Router {\n    return this.router;\n  }\n}\n","import { Request, Response } from \"express\";\nimport { ValidationMiddleware } from \"@infrastructure/http/middlewares/validation\";\nimport { BaseRouter } from \"@infrastructure/http/routes/base/router\";\nimport { CreateUserController } from \"@infrastructure/http/routes/v1/users/controllers/create\";\nimport { DeleteUserController } from \"@infrastructure/http/routes/v1/users/controllers/delete\";\nimport { UpdateUserController } from \"@infrastructure/http/routes/v1/users/controllers/update\";\nimport { LoginController } from \"@infrastructure/http/routes/v1/users/controllers/login\";\nimport { DeleteUserSchemas } from \"@useCases/user/delete/schemas\";\nimport { UpdateUserSchemas } from \"@useCases/user/update/schemas\";\nimport { UserLoginSchemas } from \"@useCases/user/login/schemas\";\n\nexport class UserRouter extends BaseRouter {\n  private static instance: UserRouter;\n\n  static getInstance(): UserRouter {\n    if (!UserRouter.instance) {\n      UserRouter.instance = new UserRouter();\n    }\n    return UserRouter.instance;\n  }\n\n  protected setupRoutes(): void {\n    this.setupCreateUserRoute();\n    this.setupUpdateUserRoute();\n    this.setupDeleteUserRoute();\n    this.setupLoginRoute();\n  }\n\n  private setupCreateUserRoute(): void {\n    this.router.post(\n      \"/\",\n      this.handleCreateUser.bind(this),\n    );\n  }\n\n  private setupDeleteUserRoute(): void {\n    this.router.delete(\n      \"/:id\",\n      ValidationMiddleware.validate(DeleteUserSchemas.httpRequestSchema),\n      this.handleDeleteUser.bind(this),\n    );\n  }\n\n  private setupUpdateUserRoute(): void {\n    this.router.put(\"/:id\", ValidationMiddleware.validate(UpdateUserSchemas.httpRequestSchema), this.handleUpdateUser.bind(this));\n  }\n\n  private setupLoginRoute(): void {\n    this.router.post(\"/login\", ValidationMiddleware.validate(UserLoginSchemas.httpRequestSchema), this.handleLoginUser.bind(this));\n  }\n\n  private async handleCreateUser(req: Request, res: Response): Promise<void> {\n    const controller = this.container.get<CreateUserController>(\n      \"CreateUserController\",\n    );\n    await controller.handle(req, res);\n  }\n\n  private async handleDeleteUser(\n    req: Request<{ id: string }>,\n    res: Response,\n  ): Promise<void> {\n    const controller = this.container.get<DeleteUserController>(\n      \"DeleteUserController\",\n    );\n    await controller.handle(req, res);\n  }\n\n  private async handleLoginUser(req: Request, res: Response): Promise<void> {\n    const controller = this.container.get<LoginController>(\"LoginController\");\n    await controller.handle(req, res);\n  }\n\n  private async handleUpdateUser(\n    req: Request<{ id: string }>,\n    res: Response,\n  ): Promise<void> {\n    const controller = this.container.get<UpdateUserController>(\n      \"UpdateUserController\",\n    );\n    await controller.handle(req, res);\n  }\n}\n\nexport default UserRouter.getInstance;\n"],"mappings":"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","names":["path","fileURLToPath","getFilename","fileURLToPath","url","getDirname","path","dirname","__dirname","ZodError","ValidationMiddleware","validate","schema","req","res","next","parse","body","query","params","error","ZodError","errors","map","err","field","path","join","message","code","status","json","success","AccountType","TransactionType","z","BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","z","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","z","AccountSchemas","nameSchema","z","string","min","max","regex","accountIdSchema","number","int","positive","accountTypeSchema","nativeEnum","AccountType","balanceSchema","refine","val","Number","isFinite","message","createAccountSchema","object","type","balance","userId","UserSchemas","userIdSchema","bankName","BankSchemas","accountEntitySchema","id","name","createdAt","date","AccountTypeVO","value","create","type","validatedType","AccountSchemas","accountTypeSchema","parse","getValue","setValue","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidUserIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","UserId","value","isNewId","create","id","validatedId","UserSchemas","userIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidUserIdError","isNew","equals","other","toString","InvalidBalanceError","ValidationError","constructor","value","Object","setPrototypeOf","prototype","AccountBalance","value","Number","isFinite","InvalidBalanceError","create","type","validatedType","AccountSchemas","balanceSchema","parse","getValue","isNegative","isPositive","isZero","increase","amount","decrease","InvalidAccountIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","AccountId","value","isNewId","create","id","validatedId","AccountSchemas","accountIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidAccountIdError","isNew","equals","other","toString","BankName","value","create","validated","BankSchemas","nameSchema","parse","getValue","equals","other","AccountEntity","id","type","balance","createdAt","userId","bankName","create","validated","AccountSchemas","createAccountSchema","parse","AccountId","createNew","AccountTypeVO","AccountBalance","Date","UserId","BankName","reconstruct","accountEntitySchema","toPersistence","getValue","toJSON","increaseBalance","amount","increase","decreaseBalance","decrease","getBalance","getUserId","setType","setValue","Entity","PrimaryGeneratedColumn","Column","ManyToOne","OneToMany","CreateDateColumn","Column","CreateDateColumn","Entity","OneToMany","PrimaryGeneratedColumn","User","id","name","email","passwordHash","accounts","createdAt","type","unique","Account","account","user","onDelete","Entity","OneToMany","PrimaryColumn","Bank","name","accounts","type","unique","Account","account","bank","onDelete","Column","Entity","ManyToOne","PrimaryGeneratedColumn","Transaction","id","type","sourceAccount","destinationAccount","amount","description","transactionDate","enum","TransactionType","default","DEBITO","Account","nullable","precision","scale","name","Account","id","type","balance","user","bank","transactions","createdAt","enum","AccountType","default","CORRENTE","precision","scale","User","accounts","Bank","Transaction","t","sourceAccount","name","fs","path","z","NODE_ENV","ConfigSchemas","databasePathSchema","z","string","min","refine","val","endsWith","message","fs","existsSync","path","resolve","envSchema","object","DATABASE_PATH","default","APP_PORT","coerce","number","APP_HOST","optional","JWT_SECRET","NODE_ENV","nativeEnum","DEV","SESSION_SECRET","OPENAI_API_KEY","winston","consoleFormat","winston","format","combine","timestamp","errors","stack","printf","info","level","message","meta","levelColors","error","warn","debug","verbose","resetColor","levelColor","logMessage","toUpperCase","excludeFields","filteredMeta","Object","keys","filter","key","includes","reduce","obj","metaKeys","length","metaString","JSON","stringify","isProduction","process","env","NODE_ENV","logger","createLogger","LOG_LEVEL","defaultMeta","service","environment","transports","Console","handleExceptions","handleRejections","exitOnError","result","ConfigSchemas","envSchema","safeParse","process","env","success","ValidationError","JSON","stringify","error","format","logger","info","Object","entries","data","forEach","key","value","undefined","String","path","DataSource","migrationsPath","path","resolve","__dirname","AppDataSource","DataSource","type","database","process","env","DATABASE_PATH","synchronize","NODE_ENV","logging","entities","User","Bank","Account","Transaction","migrations","migrationsTableName","NotFoundError","DomainError","constructor","message","Object","setPrototypeOf","prototype","getStatusCode","AccountNotFoundError","NotFoundError","constructor","accountId","Object","setPrototypeOf","prototype","TypeOrmAccountRepository","constructor","repository","AppDataSource","getRepository","Account","withTransaction","manager","create","accountEntity","data","toPersistence","account","type","balance","createdAt","user","id","userId","bank","name","bankName","saved","save","AccountEntity","reconstruct","findById","findOne","where","getValue","relations","findByUserId","accounts","find","map","update","accountInDb","AccountNotFoundError","toString","updated","merge","delete","BankEntity","name","create","validated","BankSchemas","createBankSchema","parse","BankName","reconstruct","bankEntitySchema","getName","toJSON","getValue","toPersistence","TypeOrmBankRepository","constructor","repository","AppDataSource","getRepository","Bank","withTransaction","manager","findByName","name","bank","findOne","where","getValue","BankEntity","reconstruct","findAll","banks","find","map","delete","Between","z","TransactionSchemas","transactionIdSchema","z","number","int","positive","amountSchema","refine","val","Number","isFinite","message","descriptionSchema","string","min","max","accountIdSchema","AccountSchemas","transactionDateSchema","date","transactionTypeSchema","nativeEnum","TransactionType","createTransactionSchema","object","amount","description","destinationAccountId","sourceAccountId","type","transactionEntitySchema","id","InvalidTransactionIdError","ValidationError","constructor","id","Object","setPrototypeOf","prototype","TransactionId","value","isNewId","create","id","validatedId","TransactionSchemas","transactionIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidTransactionIdError","isNew","equals","other","toString","TransactionAmount","value","create","validatedAmount","TransactionSchemas","amountSchema","parse","getValue","equals","other","TransactionDescription","value","create","validatedDescription","TransactionSchemas","descriptionSchema","parse","getValue","equals","other","TransactionTypeVo","value","create","validatedType","TransactionSchemas","transactionTypeSchema","parse","getValue","equals","other","TransactionEntity","id","amount","description","destinationAccountId","sourceAccountId","type","create","params","validatedData","TransactionSchemas","createTransactionSchema","parse","TransactionAmount","TransactionDescription","AccountId","TransactionTypeVo","createFromDatabase","transactionEntitySchema","TransactionId","getId","getDestinationAccountId","getSourceAccountId","getAmount","getDescription","getType","toPersistence","getValue","toJSON","reconstruct","TransactionNotFoundError","NotFoundError","constructor","id","Object","setPrototypeOf","prototype","TypeOrmTransactionRepository","constructor","repository","AppDataSource","getRepository","Transaction","findAll","transactions","find","relations","map","transaction","TransactionEntity","reconstruct","id","amount","description","destinationAccountId","destinationAccount","sourceAccountId","sourceAccount","type","findByUserId","userId","where","user","getValue","create","transactionEntity","transactionData","toPersistence","savedTransaction","save","findById","findOne","findByAccountId","accountId","order","transactionDate","findByDateRange","startDate","endDate","Between","update","transactionInDatabase","TransactionNotFoundError","toString","updatedTransaction","merge","delete","exists","count","InvalidEmailError","ValidationError","constructor","email","Object","setPrototypeOf","prototype","UserEmail","value","validateEmail","create","email","getValue","emailRegex","test","InvalidEmailError","equals","other","UserName","value","create","name","validatedName","UserSchemas","nameSchema","parse","getValue","equals","other","InvalidPasswordError","ValidationError","constructor","message","Object","setPrototypeOf","prototype","bcrypt","UserPassword","value","isHashed","validatePassword","create","plainPassword","createFromHash","hashedPassword","hash","hashedValue","bcrypt","compare","InvalidPasswordError","getValue","isHashedPassword","match","UserEntity","id","name","email","createdAt","password","create","passwordHash","validatedData","UserSchemas","createUserSchema","parse","UserId","createNew","UserName","UserEmail","Date","UserPassword","createFromHash","reconstruct","userEntitySchema","createFromDatabase","getId","getName","getEmail","getCreatedAt","getPasswordHash","getValue","toPersistence","isNew","toJSON","UserNotFoundError","NotFoundError","constructor","userId","Object","setPrototypeOf","prototype","TypeOrmUserRepository","constructor","repository","AppDataSource","getRepository","User","withTransaction","manager","create","userEntity","logger","info","userData","toPersistence","user","name","email","createdAt","passwordHash","savedUser","save","UserEntity","reconstruct","id","findByEmail","findOne","where","getValue","findById","exists","count","update","userInDatabase","UserNotFoundError","toString","updatedUser","merge","delete","DependencyNotFoundError","DomainError","constructor","dependencyName","Object","setPrototypeOf","prototype","getStatusCode","z","AddAccountToUserSchemas","requestSchema","z","object","user","id","UserSchemas","userIdSchema","account","type","AccountSchemas","accountTypeSchema","balance","balanceSchema","bankName","BankSchemas","nameSchema","httpRequestSchema","body","AddAccountToUserRequest","constructor","userId","accountType","initialBalance","bankName","getUserId","getValue","getAccountType","getInitialBalance","getBankName","getUserIdVO","getAccountTypeVO","getInitialBalanceVO","getBankNameVO","createFromRaw","raw","parsed","AddAccountToUserSchemas","httpRequestSchema","parse","UserId","create","body","user","id","AccountTypeVO","account","type","AccountBalance","balance","BankName","ZodError","BaseController","sendSuccessResponse","res","message","data","statusCode","response","undefined","status","json","sendErrorResponse","errors","logger","error","getErrorStatusCode","hasValidationErrors","lowerMessage","toLowerCase","includes","handleControllerError","controllerName","ZodError","map","err","field","path","join","code","success","Error","validateRequiredParam","param","paramName","AddAccountToUserController","BaseController","constructor","useCase","handle","req","res","request","AddAccountToUserRequest","createFromRaw","body","response","execute","isSuccess","account","getData","AccountNotFoundError","sendSuccessResponse","toJSON","statusCode","getErrorStatusCode","getValidationErrors","sendErrorResponse","getError","error","handleControllerError","z","DeleteAccountOfUserSchemas","requestSchema","z","object","accountId","AccountSchemas","accountIdSchema","httpRequestSchema","params","DeleteAccountOfUserRequest","constructor","accountId","getAccountId","getValue","getAccountIdVO","createFromRaw","raw","parsed","DeleteAccountOfUserSchemas","httpRequestSchema","parse","AccountId","create","params","DeleteAccountOfUserController","BaseController","constructor","useCase","handle","req","res","accountId","params","validateRequiredParam","request","DeleteAccountOfUserRequest","createFromRaw","response","execute","isSuccess","sendSuccessResponse","statusCode","getErrorStatusCode","getValidationErrors","sendErrorResponse","getError","error","handleControllerError","z","GetAllAccountsOfUserSchemas","requestSchema","z","object","userId","UserSchemas","userIdSchema","httpRequestSchema","params","GetAllAccountsOfUserRequest","constructor","userId","getUserId","getValue","getUserIdVO","createFromRaw","raw","parsed","GetAllAccountsOfUserSchemas","httpRequestSchema","parse","UserId","create","params","GetAllAccountsOfUserController","BaseController","constructor","useCase","handle","req","res","userId","params","validateRequiredParam","request","GetAllAccountsOfUserRequest","createFromRaw","response","execute","isSuccess","sendSuccessResponse","getData","statusCode","getErrorStatusCode","getValidationErrors","sendErrorResponse","getError","error","handleControllerError","z","UpdateAccountOfUserSchemas","requestSchema","z","object","accountId","AccountSchemas","accountIdSchema","account","type","accountTypeSchema","optional","httpRequestSchema","params","body","UpdateAccountOfUserRequest","constructor","accountId","accountType","getAccountId","getValue","getAccountIdVO","getAccountType","Error","hasAccountType","undefined","createFromRaw","raw","parsed","UpdateAccountOfUserSchemas","httpRequestSchema","parse","body","account","type","AccountTypeVO","create","AccountId","params","UpdateAccountOfUserController","BaseController","constructor","useCase","handle","req","res","accountId","params","validateRequiredParam","request","UpdateAccountOfUserRequest","createFromRaw","body","response","execute","isSuccess","sendSuccessResponse","getData","statusCode","getErrorStatusCode","getValidationErrors","sendErrorResponse","getError","error","handleControllerError","GetAllBanksController","BaseController","constructor","getAllBanksUseCase","handle","_req","res","response","execute","isSuccess","sendSuccessResponse","getMessage","getBanks","statusCode","getErrorStatusCode","hasErrors","sendErrorResponse","getErrors","error","handleControllerError","z","AddTransactionToUserSchemas","requestSchema","z","object","params","sourceAccountId","AccountSchemas","accountIdSchema","destinationAccountId","transaction","type","TransactionSchemas","transactionTypeSchema","amount","amountSchema","httpRequestSchema","body","AddTransactionToUserRequest","constructor","sourceAccountId","destinationAccountId","type","amount","createFromRaw","raw","parsed","AddTransactionToUserSchemas","httpRequestSchema","parse","AccountId","create","params","TransactionTypeVo","body","transaction","TransactionAmount","getSourceAccountId","getValue","getDestinationAccountId","getType","getAmount","getSourceAccountIdVO","getDestinationAccountIdVO","getTypeVO","getAmountVO","AddTransactionToUserController","BaseController","constructor","addTransactionToUserUseCase","handle","req","res","userId","params","validateRequiredParam","request","AddTransactionToUserRequest","createFromRaw","body","response","execute","isSuccess","transaction","getTransaction","sendSuccessResponse","getMessage","toJSON","statusCode","getErrorStatusCode","hasErrors","sendErrorResponse","getErrors","error","handleControllerError","z","GetAllOfUserSchemas","requestSchema","z","object","userId","UserSchemas","userIdSchema","httpRequestSchema","params","GetAllOfUserRequest","constructor","userId","createFromRaw","raw","parsed","GetAllOfUserSchemas","requestSchema","parse","getUserId","GetAllTransactionsOfUserController","BaseController","constructor","getAllOfUserUseCase","handle","req","res","userId","params","validateRequiredParam","request","GetAllOfUserRequest","createFromRaw","response","execute","isSuccess","sendSuccessResponse","getMessage","getTransactions","map","t","toJSON","statusCode","getErrorStatusCode","hasErrors","sendErrorResponse","getErrors","error","handleControllerError","z","CreateUserSchemas","requestSchema","z","object","account","type","AccountSchemas","accountTypeSchema","balance","balanceSchema","bank","name","BankSchemas","nameSchema","user","UserSchemas","email","emailSchema","password","passwordSchema","httpRequestSchema","body","CreateUserRequest","constructor","name","email","password","accountType","accountBalance","bankName","createFromRaw","raw","parsed","CreateUserSchemas","requestSchema","parse","UserName","create","user","UserEmail","UserPassword","AccountTypeVO","account","type","AccountBalance","balance","BankName","bank","getName","getEmail","getPassword","getAccountType","getAccountBalance","getBankName","CreateUserController","BaseController","constructor","createUserUseCase","handle","req","res","logger","info","body","request","CreateUserRequest","createFromRaw","response","execute","isSuccess","user","getUser","sendSuccessResponse","getMessage","toJSON","statusCode","getErrorStatusCode","hasErrors","sendErrorResponse","getErrors","error","handleControllerError","z","DeleteUserSchemas","requestSchema","z","object","id","UserSchemas","userIdSchema","httpRequestSchema","params","DeleteUserRequest","constructor","id","createFromRaw","raw","parsed","DeleteUserSchemas","requestSchema","parse","getId","DeleteUserController","BaseController","constructor","deleteUserUseCase","handle","req","res","userId","params","id","validateRequiredParam","request","DeleteUserRequest","createFromRaw","response","execute","isSuccess","sendSuccessResponse","getMessage","statusCode","getErrorStatusCode","hasErrors","sendErrorResponse","getErrors","error","handleControllerError","z","UserLoginSchemas","requestSchema","z","object","email","UserSchemas","emailSchema","password","string","min","max","httpRequestSchema","body","LoginRequest","constructor","email","password","createFromRaw","raw","parsed","UserLoginSchemas","requestSchema","parse","getEmail","getPassword","LoginController","BaseController","constructor","loginUseCase","handle","req","res","request","LoginRequest","createFromRaw","body","response","execute","isSuccess","authResult","getAuthResult","sendSuccessResponse","getMessage","statusCode","getErrorStatusCode","hasErrors","sendErrorResponse","getErrors","error","handleControllerError","z","UpdateUserSchemas","requestSchema","z","object","user","name","UserSchemas","nameSchema","email","emailSchema","password","passwordSchema","params","id","userIdSchema","httpRequestSchema","body","UpdateUserRequest","constructor","id","name","email","password","createFromRaw","raw","parsed","UpdateUserSchemas","httpRequestSchema","parse","params","body","user","getId","getName","getEmail","getPassword","UpdateUserController","BaseController","constructor","updateUserUseCase","handle","req","res","userId","params","id","validateRequiredParam","request","UpdateUserRequest","createFromRaw","body","response","execute","isSuccess","user","getUser","sendSuccessResponse","getMessage","toJSON","statusCode","getErrorStatusCode","hasErrors","sendErrorResponse","getErrors","error","handleControllerError","ZodError","AddAccountToUserResponse","success","data","error","validationErrors","failure","undefined","validationFailure","errors","isSuccess","getData","getError","getValidationErrors","AddAccountToUserUseCase","constructor","accountRepository","userRepository","execute","request","userId","getUserIdVO","user","findById","UserNotFoundError","getValue","toString","account","AccountEntity","create","getAccountTypeVO","getInitialBalanceVO","getBankNameVO","savedAccount","AppDataSource","transaction","manager","AddAccountToUserResponse","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error","failure","ZodError","DeleteAccountOfUserResponse","success","error","validationErrors","failure","validationFailure","errors","undefined","isSuccess","getError","getValidationErrors","DeleteAccountOfUserUseCase","constructor","accountRepository","execute","request","accountId","getAccountIdVO","AppDataSource","transaction","manager","delete","DeleteAccountOfUserResponse","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error","failure","ZodError","GetAllAccountsOfUserResponse","success","data","error","validationErrors","failure","undefined","validationFailure","errors","isSuccess","getData","getError","getValidationErrors","GetAllAccountsOfUserUseCase","constructor","accountRepository","execute","request","userId","getUserIdVO","accounts","findByUserId","length","GetAllAccountsOfUserResponse","failure","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error","UpdateAccountOfUserResponse","success","data","error","validationErrors","failure","undefined","validationFailure","errors","isSuccess","getData","getError","getValidationErrors","UpdateAccountOfUserUseCase","constructor","accountRepository","execute","request","account","AppDataSource","transaction","manager","findById","getAccountIdVO","AccountNotFoundError","getAccountId","toString","hasAccountType","setType","getAccountType","getValue","update","UpdateAccountOfUserResponse","success","error","handleError","message","Error","failure","GetAllBanksResponse","banks","success","message","errors","failure","allErrors","length","validationFailure","getBanks","isSuccess","getMessage","getErrors","hasErrors","BankNotFoundError","NotFoundError","constructor","name","Object","setPrototypeOf","prototype","GetAllBanksUseCase","constructor","bankRepository","execute","banks","findAll","length","BankNotFoundError","GetAllBanksResponse","success","error","handleError","message","Error","failure","ZodError","AddTransactionToUserResponse","transaction","success","message","errors","failure","finalErrors","length","validationFailure","getTransaction","InvalidTransactionIdError","isSuccess","getMessage","getErrors","hasErrors","InsufficientFundsError","ValidationError","constructor","Object","setPrototypeOf","prototype","InvalidTransactionTypeError","ValidationError","constructor","Object","setPrototypeOf","prototype","AddTransactionToUserUseCase","constructor","accountRepository","transactionRepository","execute","request","transaction","AppDataSource","manager","sourceAccount","findById","getSourceAccountIdVO","destinationAccount","getDestinationAccountIdVO","AccountNotFoundError","getValue","toString","getType","TransactionType","TRANSFERENCIA","getBalance","getAmount","InsufficientFundsError","transferAmount","decreaseBalance","increaseBalance","InvalidTransactionTypeError","update","newTransaction","TransactionEntity","create","type","amount","sourceAccountId","getSourceAccountId","destinationAccountId","getDestinationAccountId","description","AddTransactionToUserResponse","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","failure","Error","includes","ZodError","GetAllOfUserResponse","constructor","transactions","success","message","errors","failure","getTransactions","isSuccess","getMessage","getErrors","hasErrors","length","GetAllOfUserUseCase","constructor","transactionRepository","execute","request","validated","GetAllOfUserSchemas","httpRequestSchema","parse","params","userId","getUserId","UserId","create","transactions","findByUserId","length","GetAllOfUserResponse","failure","success","error","handleError","ZodError","errors","map","err","path","join","message","Error","ZodError","InvalidUserResponseError","ValidationError","constructor","Object","setPrototypeOf","prototype","CreateUserResponse","user","success","message","errors","failure","validationFailure","getUser","InvalidUserResponseError","isSuccess","getMessage","getErrors","hasErrors","length","ConflictError","DomainError","constructor","message","Object","setPrototypeOf","prototype","getStatusCode","UserAlreadyExistsError","ConflictError","constructor","email","Object","setPrototypeOf","prototype","CreateUserUseCase","constructor","userRepository","accountRepository","bankRepository","execute","request","logger","info","name","getName","email","getEmail","password","getPassword","bankName","getBankName","accountType","getAccountType","accountBalance","getAccountBalance","userExists","exists","UserAlreadyExistsError","getValue","passwordVO","UserPassword","create","hashedPassword","hash","bankNameVO","BankName","bank","findByName","BankNotFoundError","user","UserEntity","AppDataSource","transaction","manager","transactionalUserRepo","withTransaction","transactionalAccountRepo","account","AccountEntity","getId","CreateUserResponse","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error","failure","ZodError","DeleteUserResponse","success","message","errors","failure","validationFailure","isSuccess","getMessage","getErrors","hasErrors","length","DeleteUserUseCase","constructor","userRepository","execute","request","validated","DeleteUserSchemas","httpRequestSchema","parse","params","id","getId","userId","UserId","create","AppDataSource","transaction","manager","transactionalUserRepo","withTransaction","user","findById","UserNotFoundError","toString","delete","DeleteUserResponse","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error","failure","ZodError","InvalidAuthResultError","ValidationError","constructor","message","Object","setPrototypeOf","prototype","LoginResponse","authResult","success","message","errors","failure","validationFailure","getAuthResult","InvalidAuthResultError","isSuccess","getMessage","getErrors","hasErrors","length","NotAuthorizedError","DomainError","constructor","getStatusCode","InvalidCredentialsError","NotAuthorizedError","constructor","Object","setPrototypeOf","prototype","LoginUseCase","constructor","userRepository","authService","execute","request","validated","UserLoginSchemas","requestSchema","parse","email","getEmail","password","getPassword","UserEmail","create","user","findByEmail","InvalidCredentialsError","userPassword","UserPassword","createFromHash","getPasswordHash","isValid","compare","token","generateToken","getId","getValue","LoginResponse","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error","failure","ZodError","UpdateUserResponse","user","success","message","errors","failure","validationFailure","getUser","InvalidUserResponseError","isSuccess","getMessage","getErrors","hasErrors","length","UpdateUserUseCase","constructor","userRepository","execute","request","validated","UpdateUserSchemas","httpRequestSchema","parse","body","user","name","getName","email","getEmail","password","getPassword","params","id","getId","userId","UserId","create","findById","UserNotFoundError","toString","updatedUser","update","UserEntity","UpdateUserResponse","success","error","handleError","ZodError","errors","map","err","path","join","message","validationFailure","Error","failure","bcrypt","jwt","AuthService","jwtSecret","jwtExpiresIn","constructor","process","env","JWT_SECRET","hashPassword","raw","bcrypt","hash","comparePassword","compare","generateToken","userId","jwt","sign","expiresIn","verifyToken","token","decoded","verify","DIContainer","instance","dependencies","Map","registerDependencies","getInstance","registerRepositories","registerServices","registerUseCases","registerControllers","set","TypeOrmUserRepository","TypeOrmAccountRepository","TypeOrmBankRepository","TypeOrmTransactionRepository","AuthService","AddAccountToUserUseCase","get","DeleteAccountOfUserUseCase","GetAllAccountsOfUserUseCase","UpdateAccountOfUserUseCase","GetAllBanksUseCase","CreateUserUseCase","DeleteUserUseCase","LoginUseCase","UpdateUserUseCase","AddTransactionToUserUseCase","GetAllOfUserUseCase","AddAccountToUserController","DeleteAccountOfUserController","GetAllAccountsOfUserController","UpdateAccountOfUserController","GetAllBanksController","CreateUserController","DeleteUserController","LoginController","UpdateUserController","AddTransactionToUserController","GetAllTransactionsOfUserController","key","dependency","DependencyNotFoundError","register","has","zod","errorHandler","err","_req","res","next","headersSent","zod","ZodError","logger","http","message","status","json","error","Router","RouterFactory","createRouter","config","Router","mergeParams","caseSensitive","strict","createStandardRouter","BaseRouter","router","container","constructor","DIContainer","getInstance","RouterFactory","createStandardRouter","setupMiddleware","setupRoutes","use","errorHandler","getRouter","UserRouter","BaseRouter","instance","getInstance","setupRoutes","setupCreateUserRoute","setupUpdateUserRoute","setupDeleteUserRoute","setupLoginRoute","router","post","handleCreateUser","bind","delete","ValidationMiddleware","validate","DeleteUserSchemas","httpRequestSchema","handleDeleteUser","put","UpdateUserSchemas","handleUpdateUser","UserLoginSchemas","handleLoginUser","req","res","controller","container","get","handle"]}