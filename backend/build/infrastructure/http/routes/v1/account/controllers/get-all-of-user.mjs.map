{"version":3,"sources":["../../../../../../../app/domain/models/user/schemas/index.ts","../../../../../../../app/domain/errors/domain-error.ts","../../../../../../../app/domain/errors/validation-error.ts","../../../../../../../app/domain/errors/user/invalid-user-id-error.ts","../../../../../../../app/domain/models/user/value-objects/id.ts","../../../../../../../app/domain/use-cases/account/get-all-of-user/schemas.ts","../../../../../../../app/domain/use-cases/account/get-all-of-user/request.ts","../../../../../../../app/infrastructure/logger/index.ts","../../../../../../../app/infrastructure/http/routes/base/controller.ts","../../../../../../../app/infrastructure/http/routes/v1/account/controllers/get-all-of-user.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new UserId before persistence');\n    Object.setPrototypeOf(this, InvalidUserIdError.prototype);\n  }\n} ","import { UserSchemas } from \"@models/user/schemas\";\nimport { InvalidUserIdError } from \"@errors/user/invalid-user-id-error\";\n\nexport class UserId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n  public static create(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createNew(): UserId {\n    return new UserId(null, true);\n  }\n\n  public static createFromDatabase(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): UserId {\n    return new UserId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidUserIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: UserId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"new\";\n  }\n}\n","import { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class GetAllAccountsOfUserSchemas {\n  public static readonly requestSchema = z.object({\n    userId: UserSchemas.userIdSchema,\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    params: this.requestSchema,\n  });\n}\n","import { UserId } from \"@models/user/value-objects/id\";\nimport { GetAllAccountsOfUserSchemas } from \"@useCases/account/get-all-of-user/schemas\";\n\nexport class GetAllAccountsOfUserRequest {\n  constructor(\n    private readonly userId: UserId\n  ) {}\n\n  public getUserId(): number {\n    return this.userId.getValue();\n  }\n\n  public getUserIdVO(): UserId {\n    return this.userId;\n  }\n\n  public static createFromRaw(raw: unknown): GetAllAccountsOfUserRequest {\n    const parsed = GetAllAccountsOfUserSchemas.httpRequestSchema.parse(raw);\n    return new GetAllAccountsOfUserRequest(\n      UserId.create(parsed.params.userId)\n    );\n  }\n}","import winston from \"winston\";\n\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf((info) => {\n    const { timestamp, level, message, stack, ...meta } = info;\n\n    const levelColors: Record<string, string> = {\n      error: \"\\x1b[31m\", // red\n      warn: \"\\x1b[33m\", // yellow\n      info: \"\\x1b[32m\", // green\n      debug: \"\\x1b[36m\", // cyan\n      verbose: \"\\x1b[35m\", // magenta\n    };\n\n    const resetColor = \"\\x1b[0m\";\n    const levelColor = levelColors[level] || \"\";\n\n    let logMessage = `${timestamp} [${levelColor}${level.toUpperCase()}${resetColor}]: ${message}`;\n\n    if (stack) {\n      logMessage += `\\n${stack}`;\n    }\n\n    const excludeFields = [\"timestamp\", \"level\", \"message\", \"stack\"];\n    const filteredMeta = Object.keys(meta)\n      .filter((key) => !excludeFields.includes(key))\n      .reduce(\n        (obj, key) => {\n          obj[key] = meta[key];\n          return obj;\n        },\n        {} as Record<string, unknown>,\n      );\n\n    const metaKeys = Object.keys(filteredMeta);\n    if (metaKeys.length > 0) {\n      const metaString = JSON.stringify(filteredMeta, null, 2);\n      logMessage += `\\n${metaString}`;\n    }\n\n    return logMessage;\n  }),\n);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || (isProduction ? \"warn\" : \"debug\"),\n  defaultMeta: {\n    service: \"tech4humans\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  transports: [\n    new winston.transports.Console({\n      format: consoleFormat,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n  ],\n  exitOnError: false,\n});\n\nexport const morganStream = {\n  write: (message: string) => {\n    logger.info(message.trim(), { component: \"http\" });\n  },\n};\n\nexport const logWithContext = {\n  database: (message: string, meta?: object) => {\n    logger.info(message, { component: \"database\", ...meta });\n  },\n\n  server: (message: string, meta?: object) => {\n    logger.info(message, { component: \"server\", ...meta });\n  },\n\n  auth: (message: string, meta?: object) => {\n    logger.info(message, { component: \"auth\", ...meta });\n  },\n\n  api: (message: string, meta?: object) => {\n    logger.info(message, { component: \"api\", ...meta });\n  },\n\n  error: (message: string, error?: Error, meta?: object) => {\n    logger.error(message, {\n      error: error?.message,\n      stack: error?.stack,\n      ...meta,\n    });\n  },\n};\n","import { logger } from \"@infrastructure/logger\";\nimport { Response } from \"express\";\nimport { ZodError } from \"zod\";\n\nexport abstract class BaseController {\n  protected sendSuccessResponse(\n    res: Response,\n    message: string,\n    data?: unknown,\n    statusCode: number = 200,\n  ): void {\n    const response: any = {\n      message,\n    };\n\n    if (data !== undefined) {\n      response.data = data;\n    }\n\n    res.status(statusCode).json(response);\n  }\n\n  protected sendErrorResponse(\n    res: Response,\n    message: string,\n    errors: string[] = [],\n    statusCode: number = 422,\n  ): void {\n    logger.error(\"BaseController.sendErrorResponse\", message);\n    res.status(statusCode).json({\n      message,\n      errors,\n    });\n  }\n\n  protected getErrorStatusCode(\n    message: string,\n    hasValidationErrors: boolean,\n  ): number {\n    if (hasValidationErrors) return 400;\n\n    const lowerMessage = message.toLowerCase();\n\n    if (\n      lowerMessage.includes(\"invalid credentials\") ||\n      lowerMessage.includes(\"authentication failed\")\n    ) {\n      return 401;\n    }\n\n    if (\n      lowerMessage.includes(\"unauthorized\") ||\n      lowerMessage.includes(\"permission\") ||\n      lowerMessage.includes(\"account locked\") ||\n      lowerMessage.includes(\"account disabled\")\n    ) {\n      return 403;\n    }\n\n    if (lowerMessage.includes(\"not found\")) {\n      return 404;\n    }\n\n    if (\n      lowerMessage.includes(\"already exists\") ||\n      lowerMessage.includes(\"duplicate\")\n    ) {\n      return 409;\n    }\n\n    return 422;\n  }\n\n  protected handleControllerError(\n    error: unknown,\n    res: Response,\n    controllerName: string,\n  ): void {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map((err) => ({\n        field: err.path.join(\".\"),\n        message: err.message,\n        code: err.code,\n      }));\n      res.status(400).json({\n        success: false,\n        message: \"Invalid request format\",\n        errors,\n      });\n      return;\n    }\n\n    logger.error(`${controllerName} Error:`, error);\n    res.status(500).json({\n      success: false,\n      message: error instanceof Error ? error.message : \"Internal server error\",\n    });\n  }\n\n  protected validateRequiredParam(\n    param: string | undefined,\n    paramName: string,\n    res: Response,\n  ): boolean {\n    if (!param) {\n      this.sendErrorResponse(\n        res,\n        `${paramName} is required`,\n        [`${paramName} parameter is missing`],\n        400,\n      );\n      return false;\n    }\n    return true;\n  }\n}\n","import { GetAllAccountsOfUserUseCaseInterface } from \"@useCases/account/get-all-of-user/interfaces\";\nimport { GetAllAccountsOfUserRequest } from \"@useCases/account/get-all-of-user/request\";\nimport { BaseController } from \"../../../base/controller\";\nimport { Request, Response } from \"express\";\n\nexport class GetAllAccountsOfUserController extends BaseController {\n  constructor(private readonly useCase: GetAllAccountsOfUserUseCaseInterface) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      const userId = req.params.userId;\n      if (!this.validateRequiredParam(userId, \"User ID\", res)) return;\n\n      const request = GetAllAccountsOfUserRequest.createFromRaw({\n        userId,\n      });\n      const response = await this.useCase.execute(request);\n\n      if (response.isSuccess()) {\n        this.sendSuccessResponse(res, \"Accounts retrieved successfully\", response.getData(), 200);\n        return;\n      }\n\n      const statusCode = this.getErrorStatusCode(\"GetAllAccountsOfUser\", !!response.getValidationErrors());\n      this.sendErrorResponse(res, response.getError() || \"Failed to retrieve accounts\", response.getValidationErrors(), statusCode);\n    } catch (error) {\n      this.handleControllerError(error, res, \"GetAllAccountsOfUserController\");\n    }\n  }\n}"],"mappings":"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","names":["z","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidUserIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","UserId","value","isNewId","create","id","validatedId","UserSchemas","userIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidUserIdError","isNew","equals","other","toString","z","GetAllAccountsOfUserSchemas","requestSchema","z","object","userId","UserSchemas","userIdSchema","httpRequestSchema","params","GetAllAccountsOfUserRequest","constructor","userId","getUserId","getValue","getUserIdVO","createFromRaw","raw","parsed","GetAllAccountsOfUserSchemas","httpRequestSchema","parse","UserId","create","params","winston","consoleFormat","winston","format","combine","timestamp","errors","stack","printf","info","level","message","meta","levelColors","error","warn","debug","verbose","resetColor","levelColor","logMessage","toUpperCase","excludeFields","filteredMeta","Object","keys","filter","key","includes","reduce","obj","metaKeys","length","metaString","JSON","stringify","isProduction","process","env","NODE_ENV","logger","createLogger","LOG_LEVEL","defaultMeta","service","environment","transports","Console","handleExceptions","handleRejections","exitOnError","ZodError","BaseController","sendSuccessResponse","res","message","data","statusCode","response","undefined","status","json","sendErrorResponse","errors","logger","error","getErrorStatusCode","hasValidationErrors","lowerMessage","toLowerCase","includes","handleControllerError","controllerName","ZodError","map","err","field","path","join","code","success","Error","validateRequiredParam","param","paramName","GetAllAccountsOfUserController","BaseController","constructor","useCase","handle","req","res","userId","params","validateRequiredParam","request","GetAllAccountsOfUserRequest","createFromRaw","response","execute","isSuccess","sendSuccessResponse","getData","statusCode","getErrorStatusCode","getValidationErrors","sendErrorResponse","getError","error","handleControllerError"]}