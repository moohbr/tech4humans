{"version":3,"sources":["../../../../../../../app/infrastructure/http/routes/v1/account/controllers/add-to-a-user.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../../../app/domain/models/bank/schemas/index.ts","../../../../../../../app/domain/models/user/schemas/index.ts","../../../../../../../app/domain/models/account/schemas/index.ts","../../../../../../../app/domain/models/account/value-objects/type.ts","../../../../../../../app/domain/use-cases/account/add-to-a-user/schemas.ts","../../../../../../../app/domain/errors/domain-error.ts","../../../../../../../app/domain/errors/validation-error.ts","../../../../../../../app/domain/errors/user/invalid-user-id-error.ts","../../../../../../../app/domain/models/user/value-objects/id.ts","../../../../../../../app/domain/errors/account/invalid-balance-error.ts","../../../../../../../app/domain/models/account/value-objects/balance.ts","../../../../../../../app/domain/models/bank/value-objects/name.ts","../../../../../../../app/domain/use-cases/account/add-to-a-user/request.ts","../../../../../../../app/infrastructure/logger/index.ts","../../../../../../../app/infrastructure/http/routes/base/controller.ts","../../../../../../../app/domain/errors/not-found-error.ts","../../../../../../../app/domain/errors/account/account-not-found-error.ts"],"sourcesContent":["import { Request, Response } from \"express\";\nimport { AddAccountToUserUseCaseInterface } from \"@useCases/account/add-to-a-user/interfaces\";\nimport { AddAccountToUserRequest } from \"@useCases/account/add-to-a-user/request\";\nimport { BaseController } from \"@infrastructure/http/routes/base/controller\";\nimport { AccountNotFoundError } from \"app/domain/errors/account/account-not-found-error\";\n\nexport class AddAccountToUserController extends BaseController {\n  constructor(private readonly useCase: AddAccountToUserUseCaseInterface) {\n    super();\n  }\n\n  async handle(req: Request, res: Response): Promise<void> {\n    try {\n      const request = AddAccountToUserRequest.createFromRaw(req.body);\n      const response = await this.useCase.execute(request);\n\n      if (response.isSuccess()) {\n        const account = response.getData();\n        if (!account) {\n          throw new AccountNotFoundError(\"Account not created\");\n        }\n        this.sendSuccessResponse(\n          res,\n          \"Account created successfully\",\n          account.toJSON(),\n          201,\n        );\n        return;\n      }\n\n      const statusCode = this.getErrorStatusCode(\n        \"AddAccountToUser\",\n        !!response.getValidationErrors(),\n      );\n      this.sendErrorResponse(\n        res,\n        response.getError() || \"Failed to create account\",\n        response.getValidationErrors(),\n        statusCode,\n      );\n    } catch (error) {\n      this.handleControllerError(error, res, \"AddAccountToUserController\");\n    }\n  }\n}","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupança\",\n  CREDITO = \"Crédito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"Débito\",\n  CREDITO = \"Crédito\",\n  TRANSFERENCIA = \"Transferência\",\n}\n","import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AccountSchemas {\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly accountIdSchema = z\n    .number()\n    .int(\"Account ID must be an integer\")\n    .positive(\"Account ID must be positive\");\n\n  public static readonly accountTypeSchema = z.nativeEnum(AccountType);\n\n  public static readonly balanceSchema = z\n    .number()\n    // .max(9999999999, \"Balance is too high\")\n    // .min(-9999999999, \"Balance is too low\")\n    .refine((val) => Number.isFinite(val), {\n      message: \"Balance must be a finite number\",\n    });\n\n  public static readonly createAccountSchema = z.object({\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    userId: UserSchemas.userIdSchema,\n    bankName: BankSchemas.nameSchema,\n  });\n\n  public static readonly accountEntitySchema = z.object({\n    id: this.accountIdSchema,\n    name: this.nameSchema,\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    createdAt: z.date(),\n  });\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountSchemas } from \"@models/account/schemas\";\n\nexport class AccountTypeVO {\n  private constructor(private value: AccountType) {}\n\n  public static create(type: unknown): AccountTypeVO {\n    const validatedType = AccountSchemas.accountTypeSchema.parse(type);\n    return new AccountTypeVO(validatedType);\n  }\n\n  public getValue(): AccountType {\n    return this.value;\n  }\n  \n  public setValue(value: AccountType): void {\n    this.value = value;\n  }\n}\n","import { AccountSchemas } from \"@models/account/schemas\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AddAccountToUserSchemas {\n  public static readonly requestSchema = z.object({\n    user: z.object({\n      id: UserSchemas.userIdSchema,\n    }),\n    account: z.object({\n      type: AccountSchemas.accountTypeSchema,\n      balance: AccountSchemas.balanceSchema,\n      bankName: BankSchemas.nameSchema,\n    }),\n  });\n\n  public static readonly httpRequestSchema = z.object({\n    body: this.requestSchema,\n  });\n}\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new UserId before persistence');\n    Object.setPrototypeOf(this, InvalidUserIdError.prototype);\n  }\n} ","import { UserSchemas } from \"@models/user/schemas\";\nimport { InvalidUserIdError } from \"@errors/user/invalid-user-id-error\";\n\nexport class UserId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n  public static create(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createNew(): UserId {\n    return new UserId(null, true);\n  }\n\n  public static createFromDatabase(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): UserId {\n    return new UserId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidUserIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: UserId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"new\";\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidBalanceError extends ValidationError {\n  constructor(value: unknown) {\n    super(`Balance must be a finite number. Got: ${value}`);\n    Object.setPrototypeOf(this, InvalidBalanceError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidBalanceError } from \"@errors/account/invalid-balance-error\";\n\nexport class AccountBalance {\n  private constructor(private value: number) {\n    if (!Number.isFinite(value)) {\n      throw new InvalidBalanceError(value);\n    }\n  }\n\n  public static create(type: unknown): AccountBalance {\n    const validatedType = AccountSchemas.balanceSchema.parse(type);\n    return new AccountBalance(validatedType);\n  }\n\n  public getValue(): number {\n    return this.value;\n  }\n\n  public isNegative(): boolean {\n    return this.value < 0;\n  }\n\n  public isPositive(): boolean {\n    return this.value > 0;\n  }\n\n  public isZero(): boolean {\n    return this.value === 0;\n  }\n\n  public increase(amount: number): void {\n    this.value += amount;\n  }\n\n  public decrease(amount: number): void {\n    this.value -= amount;\n  }\n}\n","import { BankSchemas } from \"@models/bank/schemas\";\n\nexport class BankName {\n  private constructor(private readonly value: string) {}\n\n  public static create(value: string): BankName {\n    const validated = BankSchemas.nameSchema.parse(value);\n    return new BankName(validated);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: BankName): boolean {\n    return this.value === other.value;\n  }\n}","import { AccountTypeVO } from \"@models/account/value-objects/type\";\nimport { AddAccountToUserSchemas } from \"@useCases/account/add-to-a-user/schemas\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { AccountBalance } from \"@models/account/value-objects/balance\";\nimport { BankName } from \"@models/bank/value-objects/name\";\nimport { AccountEntity } from \"@models/account/entity\";\n\nexport class AddAccountToUserRequest {\n  constructor(\n    private readonly userId: UserId,\n    private readonly accountType: AccountTypeVO,\n    private readonly initialBalance: AccountBalance,\n    private readonly bankName: BankName\n  ) {}\n\n  // These getters should return PRIMITIVE VALUES for schema validation\n  public getUserId(): number {\n    return this.userId.getValue(); // Return primitive number\n  }\n\n  public getAccountType(): string {\n    return this.accountType.getValue(); // Return primitive string\n  }\n\n  public getInitialBalance(): number {\n    return this.initialBalance.getValue(); // Return primitive number\n  }\n\n  public getBankName(): string {\n    return this.bankName.getValue(); // Return primitive string\n  }\n\n  // If you need the Value Objects themselves, add separate methods:\n  public getUserIdVO(): UserId {\n    return this.userId;\n  }\n\n  public getAccountTypeVO(): AccountTypeVO {\n    return this.accountType;\n  }\n\n  public getInitialBalanceVO(): AccountBalance {\n    return this.initialBalance;\n  }\n\n  public getBankNameVO(): BankName {\n    return this.bankName;\n  }\n\n  public static createFromRaw(raw: unknown): AddAccountToUserRequest {\n    const parsed = AddAccountToUserSchemas.httpRequestSchema.parse(raw);\n    return new AddAccountToUserRequest(\n      UserId.create(parsed.body.user.id),\n      AccountTypeVO.create(parsed.body.account.type),\n      AccountBalance.create(parsed.body.account.balance),\n      BankName.create(parsed.body.account.bankName)\n    );\n  }\n}\n  ","import winston from \"winston\";\n\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf((info) => {\n    const { timestamp, level, message, stack, ...meta } = info;\n\n    const levelColors: Record<string, string> = {\n      error: \"\\x1b[31m\", // red\n      warn: \"\\x1b[33m\", // yellow\n      info: \"\\x1b[32m\", // green\n      debug: \"\\x1b[36m\", // cyan\n      verbose: \"\\x1b[35m\", // magenta\n    };\n\n    const resetColor = \"\\x1b[0m\";\n    const levelColor = levelColors[level] || \"\";\n\n    let logMessage = `${timestamp} [${levelColor}${level.toUpperCase()}${resetColor}]: ${message}`;\n\n    if (stack) {\n      logMessage += `\\n${stack}`;\n    }\n\n    const excludeFields = [\"timestamp\", \"level\", \"message\", \"stack\"];\n    const filteredMeta = Object.keys(meta)\n      .filter((key) => !excludeFields.includes(key))\n      .reduce(\n        (obj, key) => {\n          obj[key] = meta[key];\n          return obj;\n        },\n        {} as Record<string, unknown>,\n      );\n\n    const metaKeys = Object.keys(filteredMeta);\n    if (metaKeys.length > 0) {\n      const metaString = JSON.stringify(filteredMeta, null, 2);\n      logMessage += `\\n${metaString}`;\n    }\n\n    return logMessage;\n  }),\n);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || (isProduction ? \"warn\" : \"debug\"),\n  defaultMeta: {\n    service: \"tech4humans\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  transports: [\n    new winston.transports.Console({\n      format: consoleFormat,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n  ],\n  exitOnError: false,\n});\n\nexport const morganStream = {\n  write: (message: string) => {\n    logger.info(message.trim(), { component: \"http\" });\n  },\n};\n\nexport const logWithContext = {\n  database: (message: string, meta?: object) => {\n    logger.info(message, { component: \"database\", ...meta });\n  },\n\n  server: (message: string, meta?: object) => {\n    logger.info(message, { component: \"server\", ...meta });\n  },\n\n  auth: (message: string, meta?: object) => {\n    logger.info(message, { component: \"auth\", ...meta });\n  },\n\n  api: (message: string, meta?: object) => {\n    logger.info(message, { component: \"api\", ...meta });\n  },\n\n  error: (message: string, error?: Error, meta?: object) => {\n    logger.error(message, {\n      error: error?.message,\n      stack: error?.stack,\n      ...meta,\n    });\n  },\n};\n","import { logger } from \"@infrastructure/logger\";\nimport { Response } from \"express\";\nimport { ZodError } from \"zod\";\n\nexport abstract class BaseController {\n  protected sendSuccessResponse(\n    res: Response,\n    message: string,\n    data?: unknown,\n    statusCode: number = 200,\n  ): void {\n    const response: any = {\n      message,\n    };\n\n    if (data !== undefined) {\n      response.data = data;\n    }\n\n    res.status(statusCode).json(response);\n  }\n\n  protected sendErrorResponse(\n    res: Response,\n    message: string,\n    errors: string[] = [],\n    statusCode: number = 422,\n  ): void {\n    logger.error(\"BaseController.sendErrorResponse\", message);\n    res.status(statusCode).json({\n      message,\n      errors,\n    });\n  }\n\n  protected getErrorStatusCode(\n    message: string,\n    hasValidationErrors: boolean,\n  ): number {\n    if (hasValidationErrors) return 400;\n\n    const lowerMessage = message.toLowerCase();\n\n    if (\n      lowerMessage.includes(\"invalid credentials\") ||\n      lowerMessage.includes(\"authentication failed\")\n    ) {\n      return 401;\n    }\n\n    if (\n      lowerMessage.includes(\"unauthorized\") ||\n      lowerMessage.includes(\"permission\") ||\n      lowerMessage.includes(\"account locked\") ||\n      lowerMessage.includes(\"account disabled\")\n    ) {\n      return 403;\n    }\n\n    if (lowerMessage.includes(\"not found\")) {\n      return 404;\n    }\n\n    if (\n      lowerMessage.includes(\"already exists\") ||\n      lowerMessage.includes(\"duplicate\")\n    ) {\n      return 409;\n    }\n\n    return 422;\n  }\n\n  protected handleControllerError(\n    error: unknown,\n    res: Response,\n    controllerName: string,\n  ): void {\n    if (error instanceof ZodError) {\n      const errors = error.errors.map((err) => ({\n        field: err.path.join(\".\"),\n        message: err.message,\n        code: err.code,\n      }));\n      res.status(400).json({\n        success: false,\n        message: \"Invalid request format\",\n        errors,\n      });\n      return;\n    }\n\n    logger.error(`${controllerName} Error:`, error);\n    res.status(500).json({\n      success: false,\n      message: error instanceof Error ? error.message : \"Internal server error\",\n    });\n  }\n\n  protected validateRequiredParam(\n    param: string | undefined,\n    paramName: string,\n    res: Response,\n  ): boolean {\n    if (!param) {\n      this.sendErrorResponse(\n        res,\n        `${paramName} is required`,\n        [`${paramName} parameter is missing`],\n        400,\n      );\n      return false;\n    }\n    return true;\n  }\n}\n","import { DomainError } from \"./domain-error\";\n\nexport class NotFoundError extends DomainError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, NotFoundError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 404;\n  }\n} ","import { NotFoundError } from \"../not-found-error\";\n\nexport class AccountNotFoundError extends NotFoundError {\n  constructor(accountId?: string) {\n    super(accountId ? `Account with ID ${accountId} not found` : 'Account not found');\n    Object.setPrototypeOf(this, AccountNotFoundError.prototype);\n  }\n} "],"mappings":"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","names":["AccountType","BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","import_zod","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","import_zod","AccountSchemas","nameSchema","z","string","min","max","regex","accountIdSchema","number","int","positive","accountTypeSchema","nativeEnum","AccountType","balanceSchema","refine","val","Number","isFinite","message","createAccountSchema","object","type","balance","userId","UserSchemas","userIdSchema","bankName","BankSchemas","accountEntitySchema","id","name","createdAt","date","AccountTypeVO","value","create","type","validatedType","AccountSchemas","accountTypeSchema","parse","getValue","setValue","import_zod","AddAccountToUserSchemas","requestSchema","z","object","user","id","UserSchemas","userIdSchema","account","type","AccountSchemas","accountTypeSchema","balance","balanceSchema","bankName","BankSchemas","nameSchema","httpRequestSchema","body","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidUserIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","UserId","value","isNewId","create","id","validatedId","UserSchemas","userIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidUserIdError","isNew","equals","other","toString","InvalidBalanceError","ValidationError","constructor","value","Object","setPrototypeOf","prototype","AccountBalance","value","Number","isFinite","InvalidBalanceError","create","type","validatedType","AccountSchemas","balanceSchema","parse","getValue","isNegative","isPositive","isZero","increase","amount","decrease","BankName","value","create","validated","BankSchemas","nameSchema","parse","getValue","equals","other","AddAccountToUserRequest","constructor","userId","accountType","initialBalance","bankName","getUserId","getValue","getAccountType","getInitialBalance","getBankName","getUserIdVO","getAccountTypeVO","getInitialBalanceVO","getBankNameVO","createFromRaw","raw","parsed","AddAccountToUserSchemas","httpRequestSchema","parse","UserId","create","body","user","id","AccountTypeVO","account","type","AccountBalance","balance","BankName","consoleFormat","winston","format","combine","timestamp","errors","stack","printf","info","level","message","meta","levelColors","error","warn","debug","verbose","resetColor","levelColor","logMessage","toUpperCase","excludeFields","filteredMeta","Object","keys","filter","key","includes","reduce","obj","metaKeys","length","metaString","JSON","stringify","isProduction","process","env","NODE_ENV","logger","createLogger","LOG_LEVEL","defaultMeta","service","environment","transports","Console","handleExceptions","handleRejections","exitOnError","import_zod","BaseController","sendSuccessResponse","res","message","data","statusCode","response","undefined","status","json","sendErrorResponse","errors","logger","error","getErrorStatusCode","hasValidationErrors","lowerMessage","toLowerCase","includes","handleControllerError","controllerName","ZodError","map","err","field","path","join","code","success","Error","validateRequiredParam","param","paramName","NotFoundError","DomainError","constructor","message","Object","setPrototypeOf","prototype","getStatusCode","AccountNotFoundError","NotFoundError","constructor","accountId","Object","setPrototypeOf","prototype","AddAccountToUserController","BaseController","constructor","useCase","handle","req","res","request","AddAccountToUserRequest","createFromRaw","body","response","execute","isSuccess","account","getData","AccountNotFoundError","sendSuccessResponse","toJSON","statusCode","getErrorStatusCode","getValidationErrors","sendErrorResponse","getError","error","handleControllerError"]}