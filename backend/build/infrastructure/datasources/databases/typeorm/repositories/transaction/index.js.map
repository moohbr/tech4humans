{"version":3,"sources":["../../../../../../../app/infrastructure/datasources/databases/typeorm/repositories/transaction/index.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../../../app/domain/models/bank/schemas/index.ts","../../../../../../../app/domain/models/user/schemas/index.ts","../../../../../../../app/domain/models/account/schemas/index.ts","../../../../../../../app/domain/models/transaction/schemas/index.ts","../../../../../../../app/domain/errors/domain-error.ts","../../../../../../../app/domain/errors/validation-error.ts","../../../../../../../app/domain/errors/transaction/invalid-transaction-id-error.ts","../../../../../../../app/domain/models/transaction/value-objects/id.ts","../../../../../../../app/domain/models/transaction/value-objects/amount.ts","../../../../../../../app/domain/models/transaction/value-objects/description.ts","../../../../../../../app/domain/errors/account/invalid-account-id-error.ts","../../../../../../../app/domain/models/account/value-objects/id.ts","../../../../../../../app/domain/models/transaction/value-objects/type.ts","../../../../../../../app/domain/models/transaction/entity/index.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/index.ts","../../../../../../../app/config/schemas.ts","../../../../../../../app/config/enums.ts","../../../../../../../app/infrastructure/logger/index.ts","../../../../../../../app/config/index.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/models/bank.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/models/account.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/models/user.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/models/transactions.ts","../../../../../../../app/domain/errors/not-found-error.ts","../../../../../../../app/domain/errors/transaction/transaction-not-found-error.ts"],"sourcesContent":["import { Between, Repository } from \"typeorm\";\nimport { TransactionEntity } from \"@models/transaction/entity\";\nimport { TransactionRepositoryInterface } from \"@models/transaction/repository/interfaces\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\nimport { TransactionId } from \"@models/transaction/value-objects/id\";\nimport { AccountId } from \"@models/account/value-objects/id\"; \nimport { UserId } from \"@models/user/value-objects/id\";\nimport { TransactionNotFoundError } from \"@errors/transaction/transaction-not-found-error\";\n\nexport class TypeOrmTransactionRepository implements TransactionRepositoryInterface {\n  constructor(\n    private readonly repository: Repository<Transaction> = AppDataSource.getRepository(Transaction)\n  ) {}\n\n  public async findAll(): Promise<TransactionEntity[]> {\n    const transactions = await this.repository.find({\n        relations: ['sourceAccount', 'destinationAccount'],\n    });\n\n    return transactions.map(transaction => TransactionEntity.reconstruct({\n        id: transaction.id,\n        amount: transaction.amount,\n        description: transaction.description,\n        destinationAccountId: transaction.destinationAccount.id,\n        sourceAccountId: transaction.sourceAccount.id,\n        type: transaction.type,\n    }));\n  }\n  \n  public async findByUserId(userId: UserId): Promise<TransactionEntity[]> {\n    const transactions = await this.repository.find({\n        where: { sourceAccount: { user: {id: userId.getValue() } } },\n        relations: ['sourceAccount', 'destinationAccount'],\n    });\n\n    return transactions.map(transaction => TransactionEntity.reconstruct({\n        id: transaction.id,\n        amount: transaction.amount,\n        description: transaction.description,\n        destinationAccountId: transaction.destinationAccount.id,\n        sourceAccountId: transaction.sourceAccount.id,\n        type: transaction.type,\n    }));\n  }\n\n  public async create(transactionEntity: TransactionEntity): Promise<TransactionEntity> {\n    const transactionData = transactionEntity.toPersistence();\n    \n    const transaction = this.repository.create({    \n      sourceAccount: { id: transactionData.sourceAccountId },\n      destinationAccount: { id: transactionData.destinationAccountId },\n      amount: transactionData.amount,\n      description: transactionData.description,\n      type: transactionData.type,\n    });\n\n    const savedTransaction = await this.repository.save(transaction);\n\n    return TransactionEntity.reconstruct({\n        id: savedTransaction.id,\n        amount: savedTransaction.amount,\n        description: savedTransaction.description,\n        destinationAccountId: savedTransaction.destinationAccount.id,\n        sourceAccountId: savedTransaction.sourceAccount.id,\n        type: savedTransaction.type,\n    });\n  }\n\n  public async findById(id: TransactionId): Promise<TransactionEntity | null> {\n    const transaction = await this.repository.findOne({\n      where: { id: id.getValue() },\n      relations: ['sourceAccount', 'destinationAccount'],\n    });\n\n    if (!transaction) {\n      return null;\n    }\n\n    return TransactionEntity.reconstruct({\n        id: transaction.id,\n        amount: transaction.amount,\n        description: transaction.description,\n        destinationAccountId: transaction.destinationAccount.id,\n        sourceAccountId: transaction.sourceAccount.id,\n        type: transaction.type,\n    });\n  }\n\n  public async findByAccountId(accountId: AccountId): Promise<TransactionEntity[]> {\n    const transactions = await this.repository.find({\n      where: [\n        { sourceAccount: { id: accountId.getValue() } },\n        { destinationAccount: { id: accountId.getValue() } }\n      ],\n      relations: ['sourceAccount', 'destinationAccount'],\n      order: { transactionDate: 'DESC' },\n    });\n\n    return transactions.map(transaction => \n      TransactionEntity.reconstruct({\n        id: transaction.id,\n        amount: transaction.amount,\n        description: transaction.description,\n        destinationAccountId: transaction.destinationAccount.id,\n        sourceAccountId: transaction.sourceAccount.id,\n        type: transaction.type,\n      })\n    );\n  }\n\n  public async findByDateRange(startDate: Date, endDate: Date): Promise<TransactionEntity[]> {\n    const transactions = await this.repository.find({\n      where: {\n        transactionDate: Between(startDate, endDate),\n      },\n      relations: ['sourceAccount', 'destinationAccount'],\n      order: { transactionDate: 'DESC' },\n    });\n\n    return transactions.map(transaction => \n      TransactionEntity.reconstruct({\n        id: transaction.id,\n        amount: transaction.amount,\n        description: transaction.description,\n        destinationAccountId: transaction.destinationAccount.id,\n        sourceAccountId: transaction.sourceAccount.id,\n        type: transaction.type,\n      })\n    );\n  }\n\n  public async update(id: TransactionId, transactionEntity: TransactionEntity): Promise<TransactionEntity> {\n    const transactionData = transactionEntity.toPersistence();\n    \n    const transactionInDatabase = await this.repository.findOne({\n      where: { id: id.getValue() },\n    });\n\n    if (!transactionInDatabase) {\n      throw new TransactionNotFoundError(id.getValue().toString());\n    }\n\n    const updatedTransaction = this.repository.merge(transactionInDatabase, {\n      amount: transactionData.amount,\n      description: transactionData.description,\n      type: transactionData.type,\n      sourceAccount: { id: transactionData.sourceAccountId },\n      destinationAccount: { id: transactionData.destinationAccountId },\n    });\n\n    const savedTransaction = await this.repository.save(updatedTransaction);\n\n    return TransactionEntity.reconstruct({\n      id: savedTransaction.id,\n      amount: savedTransaction.amount,\n      description: savedTransaction.description,\n      destinationAccountId: savedTransaction.destinationAccount.id,\n      sourceAccountId: savedTransaction.sourceAccount.id,\n      type: savedTransaction.type,\n    });\n  }\n\n  public async delete(id: TransactionId): Promise<void> {\n    await this.repository.delete(id.getValue());\n  }\n\n  public async exists(id: TransactionId): Promise<boolean> {\n    const count = await this.repository.count({\n      where: { id: id.getValue() },\n    });\n    return count > 0;\n  }\n}","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupança\",\n  CREDITO = \"Crédito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"Débito\",\n  CREDITO = \"Crédito\",\n  TRANSFERENCIA = \"Transferência\",\n}\n","import { z } from \"zod\";\n\nexport class BankSchemas {\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly createBankSchema = z.object({\n    name: this.nameSchema,\n  });\n\n  public static readonly bankEntitySchema = z.object({\n    name: this.nameSchema,\n  });\n}\n\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { BankSchemas } from \"@models/bank/schemas\";\nimport { UserSchemas } from \"@models/user/schemas\";\nimport { z } from \"zod\";\n\nexport class AccountSchemas {\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly accountIdSchema = z\n    .number()\n    .int(\"Account ID must be an integer\")\n    .positive(\"Account ID must be positive\");\n\n  public static readonly accountTypeSchema = z.nativeEnum(AccountType);\n\n  public static readonly balanceSchema = z\n    .number()\n    // .max(9999999999, \"Balance is too high\")\n    // .min(-9999999999, \"Balance is too low\")\n    .refine((val) => Number.isFinite(val), {\n      message: \"Balance must be a finite number\",\n    });\n\n  public static readonly createAccountSchema = z.object({\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    userId: UserSchemas.userIdSchema,\n    bankName: BankSchemas.nameSchema,\n  });\n\n  public static readonly accountEntitySchema = z.object({\n    id: this.accountIdSchema,\n    name: this.nameSchema,\n    type: this.accountTypeSchema,\n    balance: this.balanceSchema,\n    createdAt: z.date(),\n  });\n}\n","import { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { AccountSchemas } from \"@models/account/schemas\";\nimport { z } from \"zod\";\n\nexport class TransactionSchemas {\n  public static readonly transactionIdSchema = z\n    .number()\n    .int(\"Transaction ID must be an integer\")\n    .positive(\"Transaction ID must be positive\");\n\n  public static readonly amountSchema = z\n    .number()\n    .refine((val) => Number.isFinite(val), {\n      message: \"Amount must be a finite number\",\n    });\n\n  public static readonly descriptionSchema = z\n    .string()\n    .min(2, \"Description must have at least 2 characters\")\n    .max(255, \"Description cannot exceed 255 characters\");\n\n  public static readonly accountIdSchema = AccountSchemas.accountIdSchema;\n\n  public static readonly transactionDateSchema = z.date();\n\n  public static readonly transactionTypeSchema = z.nativeEnum(TransactionType);\n\n  public static readonly createTransactionSchema = z.object({\n    amount: this.amountSchema,\n    description: this.descriptionSchema,\n    destinationAccountId: this.accountIdSchema,\n    sourceAccountId: this.accountIdSchema,\n    type: this.transactionTypeSchema,\n  });\n\n  public static readonly transactionEntitySchema = z.object({\n    id: this.transactionIdSchema,\n    amount: this.amountSchema,\n    description: this.descriptionSchema,\n    destinationAccountId: this.accountIdSchema,\n    sourceAccountId: this.accountIdSchema,\n    type: this.transactionTypeSchema,\n  });\n}","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidTransactionIdError extends ValidationError {\n  constructor(id: string) {\n    super(`Invalid transaction id: ${id}`);\n    Object.setPrototypeOf(this, InvalidTransactionIdError.prototype);\n  }\n}","import { InvalidTransactionIdError } from \"@errors/transaction/invalid-transaction-id-error\";\nimport { TransactionSchemas } from \"@models/transaction/schemas\";\n\nexport class TransactionId {\n    private constructor(\n      private readonly value: number | null,\n      private readonly isNewId: boolean = false,\n    ) {}\n  \n    public static create(id: number): TransactionId {\n      const validatedId = TransactionSchemas.transactionIdSchema.parse(id);\n      return new TransactionId(validatedId, false);\n    }\n  \n    public static createNew(): TransactionId {\n      return new TransactionId(null, true);\n    }\n  \n    public static createFromDatabase(id: number): TransactionId {\n      const validatedId = TransactionSchemas.transactionIdSchema.parse(id);\n      return new TransactionId(validatedId, false);\n    }\n  \n    public static createUnsafe(id: number): TransactionId {\n      return new TransactionId(id, false);\n    }\n  \n    public getValue(): number {\n      if (this.value === null) {\n        throw new InvalidTransactionIdError(\"new\");\n      }\n      return this.value;\n    }\n  \n    public isNew(): boolean {\n      return this.isNewId;\n    }\n  \n    public equals(other: TransactionId): boolean {\n      return this.value === other.value;\n    }\n  \n    public toString(): string {\n      return this.value?.toString() ?? \"new\";\n    }\n  }","import { TransactionSchemas } from \"@models/transaction/schemas\";\n\nexport class TransactionAmount {\n  private constructor(private readonly value: number) {}\n\n  public static create(value: number): TransactionAmount {\n    const validatedAmount = TransactionSchemas.amountSchema.parse(value);\n    return new TransactionAmount(validatedAmount);\n  }\n\n  public getValue(): number {\n    return this.value;\n  }\n\n  public equals(other: TransactionAmount): boolean {\n    return this.value === other.value;\n  }\n}","import { TransactionSchemas } from \"@models/transaction/schemas\";\n\nexport class TransactionDescription {\n  private constructor(private readonly value: string) {}\n\n  public static create(value: string): TransactionDescription {\n    const validatedDescription = TransactionSchemas.descriptionSchema.parse(value);\n    return new TransactionDescription(validatedDescription);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: TransactionDescription): boolean {\n    return this.value === other.value;\n  }\n}","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidAccountIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new AccountId before persistence');\n    Object.setPrototypeOf(this, InvalidAccountIdError.prototype);\n  }\n} ","import { AccountSchemas } from \"@models/account/schemas\";\nimport { InvalidAccountIdError } from \"@errors/account/invalid-account-id-error\";\n\nexport class AccountId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n    public static create(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createNew(): AccountId {\n    return new AccountId(null, true);\n  }\n\n  public static createFromDatabase(id: number): AccountId {\n    const validatedId = AccountSchemas.accountIdSchema.parse(id);\n    return new AccountId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): AccountId {\n    return new AccountId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidAccountIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: AccountId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"\";\n  }\n}\n","import { TransactionSchemas } from \"@models/transaction/schemas\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\n\nexport class TransactionTypeVo {\n  private constructor(private readonly value: TransactionType) {}\n\n  public static create(value: TransactionType): TransactionTypeVo {\n    const validatedType = TransactionSchemas.transactionTypeSchema.parse(value);\n    return new TransactionTypeVo(validatedType);\n  }\n\n  public getValue(): TransactionType {\n    return this.value;\n  }\n\n  public equals(other: TransactionTypeVo): boolean {\n    return this.value === other.value;\n  }\n}","\nimport { z } from \"zod\";\nimport { TransactionSchemas } from \"@models/transaction/schemas\";\nimport { TransactionId } from \"@models/transaction/value-objects/id\";\nimport { TransactionAmount } from \"@models/transaction/value-objects/amount\";\nimport { TransactionDescription } from \"@models/transaction/value-objects/description\";\nimport { AccountId } from \"@models/account/value-objects/id\";\nimport { TransactionTypeVo } from \"@models/transaction/value-objects/type\";\nimport { TransactionRawEntity } from \"@models/transaction/entity/types\";\n\nexport class TransactionEntity {\n  private constructor(\n    private readonly id: TransactionId | null,\n    private readonly amount: TransactionAmount,\n    private readonly description: TransactionDescription,\n    private readonly destinationAccountId: AccountId,\n    private readonly sourceAccountId: AccountId,\n    private readonly type: TransactionTypeVo,\n) {}\n\n  public static create(params: z.infer<typeof TransactionSchemas.createTransactionSchema>): TransactionEntity {\n    const validatedData = TransactionSchemas.createTransactionSchema.parse(params);\n    return new TransactionEntity(\n      null,\n      TransactionAmount.create(validatedData.amount),\n      TransactionDescription.create(validatedData.description),\n      AccountId.create(validatedData.destinationAccountId),\n      AccountId.create(validatedData.sourceAccountId),\n      TransactionTypeVo.create(validatedData.type),\n    );\n  }\n\n  public static createFromDatabase(params: z.infer<typeof TransactionSchemas.transactionEntitySchema>): TransactionEntity {\n    const validatedData = TransactionSchemas.transactionEntitySchema.parse(params);\n    return new TransactionEntity(\n      TransactionId.create(validatedData.id),\n      TransactionAmount.create(validatedData.amount),\n      TransactionDescription.create(validatedData.description),\n      AccountId.create(validatedData.destinationAccountId),\n      AccountId.create(validatedData.sourceAccountId),\n      TransactionTypeVo.create(validatedData.type),\n    );\n  }\n\n  public getId(): TransactionId | null {\n    return this.id;\n  }\n\n\n  public getDestinationAccountId(): AccountId {\n    return this.destinationAccountId;\n  }\n\n  public getSourceAccountId(): AccountId {\n    return this.sourceAccountId;\n  }\n  \n  public getAmount(): TransactionAmount {\n    return this.amount;\n  }\n\n  public getDescription(): TransactionDescription {\n    return this.description;\n  }\n\n  public getType(): TransactionTypeVo {\n    return this.type;\n  }\n\n  public toPersistence(): TransactionRawEntity {\n    return {\n      id: this.id?.getValue() ?? 0,\n      amount: this.amount.getValue(),\n      description: this.description.getValue(),\n      destinationAccountId: this.destinationAccountId.getValue(),\n      sourceAccountId: this.sourceAccountId.getValue(),\n      type: this.type.getValue(),\n    };\n  }\n\n  public toJSON(): TransactionRawEntity {\n    return {\n      id: this.id?.getValue() ?? 0,\n      amount: this.amount.getValue(),\n      description: this.description.getValue(),\n      destinationAccountId: this.destinationAccountId.getValue(),\n      sourceAccountId: this.sourceAccountId.getValue(),\n      type: this.type.getValue()\n    };\n  }\n\n  public static reconstruct(params: z.infer<typeof TransactionSchemas.transactionEntitySchema>): TransactionEntity {\n    return new TransactionEntity(\n      TransactionId.create(params.id),\n      TransactionAmount.create(params.amount),\n      TransactionDescription.create(params.description),\n      AccountId.create(params.destinationAccountId),\n      AccountId.create(params.sourceAccountId),\n      TransactionTypeVo.create(params.type),\n    );\n  }\n}\n\n","import \"reflect-metadata\";\nimport \"@config\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport path from \"path\";\nimport { DataSource } from \"typeorm\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\nconst migrationsPath = path.resolve(__dirname, \"../../../../../migrations/\");\n\nexport const AppDataSource = new DataSource({\n  type: \"sqlite\",\n  database: process.env.DATABASE_PATH,\n  synchronize: process.env.NODE_ENV === \"development\",\n  logging: process.env.NODE_ENV !== \"development\",\n  entities: [User, Bank, Account, Transaction],\n  migrations: [migrationsPath + \"/*{.ts,.js}\"],\n  migrationsTableName: \"migrations\",\n});\n","import fs from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\nimport { NODE_ENV } from \"./enums\";\n\nexport class ConfigSchemas {\n  private readonly databasePathSchema = z\n    .string()\n    .min(1)\n    .refine((val) => val.endsWith(\".sqlite\"), {\n      message: \"Database path must end with .sqlite\",\n    })\n    .refine((val) => fs.existsSync(path.resolve(val)), {\n      message: \"Database file does not exist\",\n    });\n\n  public readonly envSchema = z.object({\n    DATABASE_PATH: this.databasePathSchema.default(\"db.sqlite\"),\n    APP_PORT: z.coerce.number().default(8080),\n    APP_HOST: z.string().optional().default(\"0.0.0.0\"),\n    JWT_SECRET: z.string().optional().default(\"keyboard cat\"),\n    NODE_ENV: z.nativeEnum(NODE_ENV).default(NODE_ENV.DEV),\n    SESSION_SECRET: z.string().optional().default(\"keyboard cat\"),\n    OPENAI_API_KEY: z.string().default(\"\"),\n  });\n}\n","export enum NODE_ENV {\n  DEV = \"development\",\n  PROD = \"production\",\n  TEST = \"test\",\n}\n","import winston from \"winston\";\n\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf((info) => {\n    const { timestamp, level, message, stack, ...meta } = info;\n\n    const levelColors: Record<string, string> = {\n      error: \"\\x1b[31m\", // red\n      warn: \"\\x1b[33m\", // yellow\n      info: \"\\x1b[32m\", // green\n      debug: \"\\x1b[36m\", // cyan\n      verbose: \"\\x1b[35m\", // magenta\n    };\n\n    const resetColor = \"\\x1b[0m\";\n    const levelColor = levelColors[level] || \"\";\n\n    let logMessage = `${timestamp} [${levelColor}${level.toUpperCase()}${resetColor}]: ${message}`;\n\n    if (stack) {\n      logMessage += `\\n${stack}`;\n    }\n\n    const excludeFields = [\"timestamp\", \"level\", \"message\", \"stack\"];\n    const filteredMeta = Object.keys(meta)\n      .filter((key) => !excludeFields.includes(key))\n      .reduce(\n        (obj, key) => {\n          obj[key] = meta[key];\n          return obj;\n        },\n        {} as Record<string, unknown>,\n      );\n\n    const metaKeys = Object.keys(filteredMeta);\n    if (metaKeys.length > 0) {\n      const metaString = JSON.stringify(filteredMeta, null, 2);\n      logMessage += `\\n${metaString}`;\n    }\n\n    return logMessage;\n  }),\n);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || (isProduction ? \"warn\" : \"debug\"),\n  defaultMeta: {\n    service: \"tech4humans\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  transports: [\n    new winston.transports.Console({\n      format: consoleFormat,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n  ],\n  exitOnError: false,\n});\n\nexport const morganStream = {\n  write: (message: string) => {\n    logger.info(message.trim(), { component: \"http\" });\n  },\n};\n\nexport const logWithContext = {\n  database: (message: string, meta?: object) => {\n    logger.info(message, { component: \"database\", ...meta });\n  },\n\n  server: (message: string, meta?: object) => {\n    logger.info(message, { component: \"server\", ...meta });\n  },\n\n  auth: (message: string, meta?: object) => {\n    logger.info(message, { component: \"auth\", ...meta });\n  },\n\n  api: (message: string, meta?: object) => {\n    logger.info(message, { component: \"api\", ...meta });\n  },\n\n  error: (message: string, error?: Error, meta?: object) => {\n    logger.error(message, {\n      error: error?.message,\n      stack: error?.stack,\n      ...meta,\n    });\n  },\n};\n","import { ConfigSchemas } from \"./schemas\";\nimport { logger } from \"@infrastructure/logger\";\nimport { ValidationError } from \"@errors/validation-error\";\n\nconst result = new ConfigSchemas().envSchema.safeParse(process.env);\n\nif (!result.success) {\n  throw new ValidationError(\n    \"Invalid environment variables: \" +\n      JSON.stringify(result.error?.format(), null, 2),\n  );\n} else {\n  logger.info(\"Environment variables are valid\");\n}\n\nObject.entries(result.data).forEach(([key, value]) => {\n  if (value !== undefined) {\n    process.env[key] = String(value);\n  }\n});\n","import { Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"banks\" })\nexport class Bank {\n  @PrimaryColumn({ type: \"text\", unique: true })\n  name!: string;\n\n  @OneToMany(() => Account, (account) => account.bank, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n}\n","import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\n@Entity({ name: \"accounts\" })\nexport class Account {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\", enum: AccountType, default: AccountType.CORRENTE })\n  type!: AccountType;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2, default: 0 })\n  balance!: number;\n\n  @ManyToOne(() => User, (user) => user.accounts)\n  user!: User;\n\n  @ManyToOne(() => Bank, (bank) => bank.accounts)\n  bank!: Bank;\n\n  @OneToMany(() => Transaction, (t) => t.sourceAccount)\n  transactions!: Transaction[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"users\" })\nexport class User {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\" })\n  name!: string;\n\n  @Column({ type: \"text\", unique: true })\n  email!: string;\n\n  @Column({ type: \"text\", name: \"password_hash\" })\n  passwordHash!: string;\n\n  @OneToMany(() => Account, (account) => account.user, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import {\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"transactions\" })\nexport class Transaction {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({\n    type: \"text\",\n    enum: TransactionType,\n    default: TransactionType.DEBITO,\n  })\n  type!: TransactionType;\n\n  @ManyToOne(() => Account, { nullable: true })\n  sourceAccount!: Account;\n\n  @ManyToOne(() => Account, { nullable: true })\n  destinationAccount!: Account;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2 })\n  amount!: number;\n\n  @Column({ type: \"text\", nullable: true })\n  description!: string;\n\n  @Column({ type: \"datetime\", default: () => \"CURRENT_TIMESTAMP\" })\n  transactionDate!: Date;\n}\n","import { DomainError } from \"./domain-error\";\n\nexport class NotFoundError extends DomainError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, NotFoundError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 404;\n  }\n} ","import { NotFoundError } from \"../not-found-error\";\n\nexport class TransactionNotFoundError extends NotFoundError {\n  constructor(id: string) {\n    super(`Transaction not found: ${id}`);\n    Object.setPrototypeOf(this, TransactionNotFoundError.prototype);\n  }\n} "],"mappings":"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","names":["import_typeorm","AccountType","TransactionType","BankSchemas","nameSchema","z","string","min","max","regex","createBankSchema","object","name","bankEntitySchema","import_zod","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","import_zod","AccountSchemas","nameSchema","z","string","min","max","regex","accountIdSchema","number","int","positive","accountTypeSchema","nativeEnum","AccountType","balanceSchema","refine","val","Number","isFinite","message","createAccountSchema","object","type","balance","userId","UserSchemas","userIdSchema","bankName","BankSchemas","accountEntitySchema","id","name","createdAt","date","import_zod","TransactionSchemas","transactionIdSchema","z","number","int","positive","amountSchema","refine","val","Number","isFinite","message","descriptionSchema","string","min","max","accountIdSchema","AccountSchemas","transactionDateSchema","date","transactionTypeSchema","nativeEnum","TransactionType","createTransactionSchema","object","amount","description","destinationAccountId","sourceAccountId","type","transactionEntitySchema","id","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","InvalidTransactionIdError","ValidationError","constructor","id","Object","setPrototypeOf","prototype","TransactionId","value","isNewId","create","id","validatedId","TransactionSchemas","transactionIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidTransactionIdError","isNew","equals","other","toString","TransactionAmount","value","create","validatedAmount","TransactionSchemas","amountSchema","parse","getValue","equals","other","TransactionDescription","value","create","validatedDescription","TransactionSchemas","descriptionSchema","parse","getValue","equals","other","InvalidAccountIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","AccountId","value","isNewId","create","id","validatedId","AccountSchemas","accountIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidAccountIdError","isNew","equals","other","toString","TransactionTypeVo","value","create","validatedType","TransactionSchemas","transactionTypeSchema","parse","getValue","equals","other","TransactionEntity","id","amount","description","destinationAccountId","sourceAccountId","type","create","params","validatedData","TransactionSchemas","createTransactionSchema","parse","TransactionAmount","TransactionDescription","AccountId","TransactionTypeVo","createFromDatabase","transactionEntitySchema","TransactionId","getId","getDestinationAccountId","getSourceAccountId","getAmount","getDescription","getType","toPersistence","getValue","toJSON","reconstruct","import_zod","NODE_ENV","ConfigSchemas","databasePathSchema","z","string","min","refine","val","endsWith","message","fs","existsSync","path","resolve","envSchema","object","DATABASE_PATH","default","APP_PORT","coerce","number","APP_HOST","optional","JWT_SECRET","NODE_ENV","nativeEnum","DEV","SESSION_SECRET","OPENAI_API_KEY","consoleFormat","winston","format","combine","timestamp","errors","stack","printf","info","level","message","meta","levelColors","error","warn","debug","verbose","resetColor","levelColor","logMessage","toUpperCase","excludeFields","filteredMeta","Object","keys","filter","key","includes","reduce","obj","metaKeys","length","metaString","JSON","stringify","isProduction","process","env","NODE_ENV","logger","createLogger","LOG_LEVEL","defaultMeta","service","environment","transports","Console","handleExceptions","handleRejections","exitOnError","result","ConfigSchemas","envSchema","safeParse","process","env","success","ValidationError","JSON","stringify","error","format","logger","info","Object","entries","data","forEach","key","value","undefined","String","import_typeorm","import_typeorm","User","id","name","email","passwordHash","accounts","createdAt","type","unique","Account","account","user","onDelete","import_typeorm","Transaction","id","type","sourceAccount","destinationAccount","amount","description","transactionDate","enum","TransactionType","default","DEBITO","Account","nullable","precision","scale","name","Account","id","type","balance","user","bank","transactions","createdAt","enum","AccountType","default","CORRENTE","precision","scale","User","accounts","Bank","Transaction","t","sourceAccount","name","Bank","name","accounts","type","unique","Account","account","bank","onDelete","import_path","import_typeorm","migrationsPath","path","resolve","__dirname","AppDataSource","DataSource","type","database","process","env","DATABASE_PATH","synchronize","NODE_ENV","logging","entities","User","Bank","Account","Transaction","migrations","migrationsTableName","NotFoundError","DomainError","constructor","message","Object","setPrototypeOf","prototype","getStatusCode","TransactionNotFoundError","NotFoundError","constructor","id","Object","setPrototypeOf","prototype","TypeOrmTransactionRepository","constructor","repository","AppDataSource","getRepository","Transaction","findAll","transactions","find","relations","map","transaction","TransactionEntity","reconstruct","id","amount","description","destinationAccountId","destinationAccount","sourceAccountId","sourceAccount","type","findByUserId","userId","where","user","getValue","create","transactionEntity","transactionData","toPersistence","savedTransaction","save","findById","findOne","findByAccountId","accountId","order","transactionDate","findByDateRange","startDate","endDate","Between","update","transactionInDatabase","TransactionNotFoundError","toString","updatedTransaction","merge","delete","exists","count"]}