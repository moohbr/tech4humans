{"version":3,"sources":["../../../../../../../node_modules/tsup/assets/esm_shims.js","../../../../../../../app/infrastructure/datasources/databases/typeorm/index.ts","../../../../../../../app/config/schemas.ts","../../../../../../../app/config/enums.ts","../../../../../../../app/infrastructure/logger/index.ts","../../../../../../../app/domain/errors/domain-error.ts","../../../../../../../app/domain/errors/validation-error.ts","../../../../../../../app/config/index.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/models/bank.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/models/account.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/models/enums.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/models/user.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/models/transactions.ts","../../../../../../../app/domain/errors/user/invalid-email-error.ts","../../../../../../../app/domain/models/user/value-objects/email.ts","../../../../../../../app/domain/models/user/schemas/index.ts","../../../../../../../app/domain/models/user/value-objects/name.ts","../../../../../../../app/domain/errors/user/invalid-user-id-error.ts","../../../../../../../app/domain/models/user/value-objects/id.ts","../../../../../../../app/domain/errors/user/invalid-password-error.ts","../../../../../../../app/domain/models/user/value-objects/password.ts","../../../../../../../app/domain/models/user/entity/index.ts","../../../../../../../app/domain/errors/not-found-error.ts","../../../../../../../app/domain/errors/user/user-not-found-error.ts","../../../../../../../app/infrastructure/datasources/databases/typeorm/repositories/user/index.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","import \"reflect-metadata\";\nimport \"@config\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport path from \"path\";\nimport { DataSource } from \"typeorm\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\nconst migrationsPath = path.resolve(__dirname, \"../../../../../migrations/\");\n\nexport const AppDataSource = new DataSource({\n  type: \"sqlite\",\n  database: process.env.DATABASE_PATH,\n  synchronize: process.env.NODE_ENV === \"development\",\n  logging: process.env.NODE_ENV !== \"development\",\n  entities: [User, Bank, Account, Transaction],\n  migrations: [migrationsPath + \"/*{.ts,.js}\"],\n  migrationsTableName: \"migrations\",\n});\n","import fs from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\nimport { NODE_ENV } from \"./enums\";\n\nexport class ConfigSchemas {\n  private readonly databasePathSchema = z\n    .string()\n    .min(1)\n    .refine((val) => val.endsWith(\".sqlite\"), {\n      message: \"Database path must end with .sqlite\",\n    })\n    .refine((val) => fs.existsSync(path.resolve(val)), {\n      message: \"Database file does not exist\",\n    });\n\n  public readonly envSchema = z.object({\n    DATABASE_PATH: this.databasePathSchema.default(\"db.sqlite\"),\n    APP_PORT: z.coerce.number().default(8080),\n    APP_HOST: z.string().optional().default(\"0.0.0.0\"),\n    JWT_SECRET: z.string().optional().default(\"keyboard cat\"),\n    NODE_ENV: z.nativeEnum(NODE_ENV).default(NODE_ENV.DEV),\n    SESSION_SECRET: z.string().optional().default(\"keyboard cat\"),\n    OPENAI_API_KEY: z.string().default(\"\"),\n  });\n}\n","export enum NODE_ENV {\n  DEV = \"development\",\n  PROD = \"production\",\n  TEST = \"test\",\n}\n","import winston from \"winston\";\n\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf((info) => {\n    const { timestamp, level, message, stack, ...meta } = info;\n\n    const levelColors: Record<string, string> = {\n      error: \"\\x1b[31m\", // red\n      warn: \"\\x1b[33m\", // yellow\n      info: \"\\x1b[32m\", // green\n      debug: \"\\x1b[36m\", // cyan\n      verbose: \"\\x1b[35m\", // magenta\n    };\n\n    const resetColor = \"\\x1b[0m\";\n    const levelColor = levelColors[level] || \"\";\n\n    let logMessage = `${timestamp} [${levelColor}${level.toUpperCase()}${resetColor}]: ${message}`;\n\n    if (stack) {\n      logMessage += `\\n${stack}`;\n    }\n\n    const excludeFields = [\"timestamp\", \"level\", \"message\", \"stack\"];\n    const filteredMeta = Object.keys(meta)\n      .filter((key) => !excludeFields.includes(key))\n      .reduce(\n        (obj, key) => {\n          obj[key] = meta[key];\n          return obj;\n        },\n        {} as Record<string, unknown>,\n      );\n\n    const metaKeys = Object.keys(filteredMeta);\n    if (metaKeys.length > 0) {\n      const metaString = JSON.stringify(filteredMeta, null, 2);\n      logMessage += `\\n${metaString}`;\n    }\n\n    return logMessage;\n  }),\n);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || (isProduction ? \"warn\" : \"debug\"),\n  defaultMeta: {\n    service: \"tech4humans\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  transports: [\n    new winston.transports.Console({\n      format: consoleFormat,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n  ],\n  exitOnError: false,\n});\n\nexport const morganStream = {\n  write: (message: string) => {\n    logger.info(message.trim(), { component: \"http\" });\n  },\n};\n\nexport const logWithContext = {\n  database: (message: string, meta?: object) => {\n    logger.info(message, { component: \"database\", ...meta });\n  },\n\n  server: (message: string, meta?: object) => {\n    logger.info(message, { component: \"server\", ...meta });\n  },\n\n  auth: (message: string, meta?: object) => {\n    logger.info(message, { component: \"auth\", ...meta });\n  },\n\n  api: (message: string, meta?: object) => {\n    logger.info(message, { component: \"api\", ...meta });\n  },\n\n  error: (message: string, error?: Error, meta?: object) => {\n    logger.error(message, {\n      error: error?.message,\n      stack: error?.stack,\n      ...meta,\n    });\n  },\n};\n","export abstract class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, DomainError.prototype);\n  }\n\n  public abstract getStatusCode(): number;\n} ","import { DomainError } from \"./domain-error\";\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, private readonly errors: string[] = []) {\n    super(message);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 400;\n  }\n\n  public getErrors(): string[] {\n    return this.errors;\n  }\n} ","import { ConfigSchemas } from \"./schemas\";\nimport { logger } from \"@infrastructure/logger\";\nimport { ValidationError } from \"@errors/validation-error\";\n\nconst result = new ConfigSchemas().envSchema.safeParse(process.env);\n\nif (!result.success) {\n  throw new ValidationError(\n    \"Invalid environment variables: \" +\n      JSON.stringify(result.error?.format(), null, 2),\n  );\n} else {\n  logger.info(\"Environment variables are valid\");\n}\n\nObject.entries(result.data).forEach(([key, value]) => {\n  if (value !== undefined) {\n    process.env[key] = String(value);\n  }\n});\n","import { Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"banks\" })\nexport class Bank {\n  @PrimaryColumn({ type: \"text\", unique: true })\n  name!: string;\n\n  @OneToMany(() => Account, (account) => account.bank, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n}\n","import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { AccountType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { Bank } from \"@infrastructure/datasources/databases/typeorm/models/bank\";\nimport { Transaction } from \"@infrastructure/datasources/databases/typeorm/models/transactions\";\n\n@Entity({ name: \"accounts\" })\nexport class Account {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\", enum: AccountType, default: AccountType.CORRENTE })\n  type!: AccountType;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2, default: 0 })\n  balance!: number;\n\n  @ManyToOne(() => User, (user) => user.accounts)\n  user!: User;\n\n  @ManyToOne(() => Bank, (bank) => bank.accounts)\n  bank!: Bank;\n\n  @OneToMany(() => Transaction, (t) => t.sourceAccount)\n  transactions!: Transaction[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","export enum AccountType {\n  CORRENTE = \"Corrente\",\n  POUPANCA = \"Poupança\",\n  CREDITO = \"Crédito\",\n  INVESTIMENTO = \"Investimento\",\n} \n\nexport enum TransactionType {\n  DEBITO = \"Débito\",\n  CREDITO = \"Crédito\",\n  TRANSFERENCIA = \"Transferência\",\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"users\" })\nexport class User {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({ type: \"text\" })\n  name!: string;\n\n  @Column({ type: \"text\", unique: true })\n  email!: string;\n\n  @Column({ type: \"text\", name: \"password_hash\" })\n  passwordHash!: string;\n\n  @OneToMany(() => Account, (account) => account.user, { onDelete: \"CASCADE\" })\n  accounts!: Account[];\n\n  @CreateDateColumn()\n  createdAt!: Date;\n}\n","import {\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { TransactionType } from \"@infrastructure/datasources/databases/typeorm/models/enums\";\nimport { Account } from \"@infrastructure/datasources/databases/typeorm/models/account\";\n\n@Entity({ name: \"transactions\" })\nexport class Transaction {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column({\n    type: \"text\",\n    enum: TransactionType,\n    default: TransactionType.DEBITO,\n  })\n  type!: TransactionType;\n\n  @ManyToOne(() => Account, { nullable: true })\n  sourceAccount!: Account;\n\n  @ManyToOne(() => Account, { nullable: true })\n  destinationAccount!: Account;\n\n  @Column({ type: \"decimal\", precision: 12, scale: 2 })\n  amount!: number;\n\n  @Column({ type: \"text\", nullable: true })\n  description!: string;\n\n  @Column({ type: \"datetime\", default: () => \"CURRENT_TIMESTAMP\" })\n  transactionDate!: Date;\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidEmailError extends ValidationError {\n  constructor(email: string) {\n    super(`Invalid email format: ${email}`);\n    Object.setPrototypeOf(this, InvalidEmailError.prototype);\n  }\n} ","import { InvalidEmailError } from \"@errors/user/invalid-email-error\";\n\nexport class UserEmail {\n  private constructor(private readonly value: string) {\n    this.validateEmail();\n  }\n\n  public static create(email: string): UserEmail {\n    return new UserEmail(email);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  private validateEmail(): void {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(this.value)) {\n      throw new InvalidEmailError(this.value);\n    }\n  }\n\n  public equals(other: UserEmail): boolean {\n    return this.value === other.value;\n  }\n}\n","import { z } from \"zod\";\n\nexport class UserSchemas {\n  public static readonly emailSchema = z\n    .string()\n    .email(\"Invalid email format\")\n    .min(1, \"Email is required\")\n    .max(255, \"Email cannot exceed 255 characters\");\n\n  public static readonly nameSchema = z\n    .string()\n    .min(2, \"Name must have at least 2 characters\")\n    .max(100, \"Name cannot exceed 100 characters\")\n    .regex(/^[a-zA-ZÀ-ÿ\\s]+$/, \"Name can only contain letters and spaces\");\n\n  public static readonly userIdSchema = z\n    .number()\n    .int(\"User ID must be an integer\")\n    .positive(\"User ID must be positive\");\n\n  public static readonly passwordSchema = z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    );\n\n  public static readonly createUserSchema = z.object({\n    name: this.nameSchema,\n    email: this.emailSchema,\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n\n  public static readonly userEntitySchema = z.object({\n    id: this.userIdSchema,\n    name: this.nameSchema,\n    email: this.emailSchema,\n    createdAt: z.date(),\n    passwordHash: z.string().min(8, \"Password hash is required\"),\n  });\n}\n","import { UserSchemas } from \"@models/user/schemas\";\n\nexport class UserName {\n  private constructor(private readonly value: string) {}\n\n  public static create(name: string): UserName {\n    const validatedName = UserSchemas.nameSchema.parse(name);\n    return new UserName(validatedName);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public equals(other: UserName): boolean {\n    return this.value === other.value;\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidUserIdError extends ValidationError {\n  constructor() {\n    super('Cannot get value of new UserId before persistence');\n    Object.setPrototypeOf(this, InvalidUserIdError.prototype);\n  }\n} ","import { UserSchemas } from \"@models/user/schemas\";\nimport { InvalidUserIdError } from \"@errors/user/invalid-user-id-error\";\n\nexport class UserId {\n  private constructor(\n    private readonly value: number | null,\n    private readonly isNewId: boolean = false,\n  ) {}\n\n  public static create(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createNew(): UserId {\n    return new UserId(null, true);\n  }\n\n  public static createFromDatabase(id: number): UserId {\n    const validatedId = UserSchemas.userIdSchema.parse(id);\n    return new UserId(validatedId, false);\n  }\n\n  public static createUnsafe(id: number): UserId {\n    return new UserId(id, false);\n  }\n\n  public getValue(): number {\n    if (this.value === null) {\n      throw new InvalidUserIdError();\n    }\n    return this.value;\n  }\n\n  public isNew(): boolean {\n    return this.isNewId;\n  }\n\n  public equals(other: UserId): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return this.value?.toString() ?? \"new\";\n  }\n}\n","import { ValidationError } from \"../validation-error\";\n\nexport class InvalidPasswordError extends ValidationError {\n  constructor(message: string) {\n    super(message, []);\n    Object.setPrototypeOf(this, InvalidPasswordError.prototype);\n  }\n} ","import { InvalidPasswordError } from \"@errors/user/invalid-password-error\";\nimport bcrypt from \"bcryptjs\";\n\nexport class UserPassword {\n  private constructor(\n    private readonly value: string,\n    private readonly isHashed: boolean = false,\n  ) {\n    if (!isHashed) {\n      this.validatePassword();\n    }\n  }\n\n  public static create(plainPassword: string): UserPassword {\n    return new UserPassword(plainPassword, false);\n  }\n\n  public static createFromHash(hashedPassword: string): UserPassword {\n    return new UserPassword(hashedPassword, true);\n  }\n\n  public async hash(): Promise<UserPassword> {\n    if (this.isHashed) {\n      return this;\n    }\n    const hashedValue = await bcrypt.hash(this.value, 10);\n    return new UserPassword(hashedValue, true);\n  }\n\n  public async compare(plainPassword: string): Promise<boolean> {\n    if (!this.isHashed) {\n      throw new InvalidPasswordError(\"Cannot compare with unhashed password\");\n    }\n    return bcrypt.compare(plainPassword, this.value);\n  }\n\n  public getValue(): string {\n    return this.value;\n  }\n\n  public isHashedPassword(): boolean {\n    return this.isHashed;\n  }\n\n  private validatePassword(): void {\n    if (\n      !this.value.match(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n      )\n    ) {\n      throw new InvalidPasswordError(\n        \"Password must contain at least 8 characters with uppercase, lowercase, number and special character\",\n      );\n    }\n  }\n}\n","import { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserName } from \"@models/user/value-objects/name\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { UserPassword } from \"@models/user/value-objects/password\";\nimport { UserSchemas } from \"@models/user/schemas\";\n\nexport class UserEntity {\n  private constructor(\n    private readonly id: UserId,\n    private readonly name: UserName,\n    private readonly email: UserEmail,\n    private readonly createdAt: Date,\n    private readonly password: UserPassword,\n  ) {}\n\n  public static create(\n    name: string,\n    email: string,\n    passwordHash: string,\n  ): UserEntity {\n    const validatedData = UserSchemas.createUserSchema.parse({\n      name,\n      email,\n      passwordHash,\n    });\n    return new UserEntity(\n      UserId.createNew(),\n      UserName.create(validatedData.name),\n      UserEmail.create(validatedData.email),\n      new Date(),\n      UserPassword.createFromHash(passwordHash),\n    );\n  }\n\n  public static reconstruct(\n    id: number,\n    name: string,\n    email: string,\n    createdAt: Date,\n    passwordHash: string,\n  ): UserEntity {\n    const validatedData = UserSchemas.userEntitySchema.parse({\n      id,\n      name,\n      email,\n      createdAt,\n      passwordHash,\n    });\n    return new UserEntity(\n      UserId.createFromDatabase(validatedData.id),\n      UserName.create(validatedData.name),\n      UserEmail.create(validatedData.email),\n      validatedData.createdAt,\n      UserPassword.createFromHash(passwordHash),\n    );\n  }\n\n  public getId(): UserId {\n    return this.id;\n  }\n\n  public getName(): UserName {\n    return this.name;\n  }\n\n  public getEmail(): UserEmail {\n    return this.email;\n  }\n\n  public getCreatedAt(): Date {\n    return this.createdAt;\n  }\n\n  public getPasswordHash(): string {\n    return this.password.getValue();\n  }\n\n  public toPersistence(): UserRawEntity {\n    return {\n      id: this.id.isNew() ? null : this.id.getValue(),\n      name: this.name.getValue(),\n      email: this.email.getValue(),\n      createdAt: this.createdAt,  \n      passwordHash: this.password.getValue(),\n    };\n  }\n\n  public toJSON(): Omit<UserRawEntity, \"passwordHash\"> {\n    return {\n      id: this.id.isNew() ? null : this.id.getValue(),\n      name: this.name.getValue(),\n      email: this.email.getValue(),\n      createdAt: this.createdAt,\n    };\n  }\n}\n","import { DomainError } from \"./domain-error\";\n\nexport class NotFoundError extends DomainError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, NotFoundError.prototype);\n  }\n\n  public getStatusCode(): number {\n    return 404;\n  }\n} ","import { NotFoundError } from \"../not-found-error\";\n\nexport class UserNotFoundError extends NotFoundError {\n  constructor(userId?: string) {\n    super(userId ? `User with ID ${userId} not found` : 'User not found');\n    Object.setPrototypeOf(this, UserNotFoundError.prototype);\n  }\n} ","import { EntityManager, Repository } from \"typeorm\";\nimport { UserEmail } from \"@models/user/value-objects/email\";\nimport { UserId } from \"@models/user/value-objects/id\";\nimport { AppDataSource } from \"@infrastructure/datasources/databases/typeorm\";\nimport { User } from \"@infrastructure/datasources/databases/typeorm/models/user\";\nimport { UserRepositoryInterface } from \"@models/user/repository/interfaces\";\nimport { UserEntity } from \"@models/user/entity\";\nimport { UserNotFoundError } from \"@errors/user/user-not-found-error\";\nimport { logger } from \"@infrastructure/logger\";\n\nexport class TypeOrmUserRepository implements UserRepositoryInterface {\n  constructor(\n    private readonly repository: Repository<User> = AppDataSource.getRepository(User)\n  ) {}\n\n  withTransaction(manager: EntityManager): this {\n    return new TypeOrmUserRepository(manager.getRepository(User)) as this;\n  }\n  \n  public async create(userEntity: UserEntity): Promise<UserEntity> {\n    logger.info(\"Creating user\", { userEntity });\n    const userData = userEntity.toPersistence();\n    logger.info(\"User data\", { userData });\n    const user = this.repository.create({\n      name: userData.name,\n      email: userData.email,\n      createdAt: userData.createdAt,\n      passwordHash: userData.passwordHash,\n    });\n\n    logger.info(\"User created\", { user });\n    const savedUser = await this.repository.save(user);\n    logger.info(\"User saved\", { savedUser });\n    return UserEntity.reconstruct(\n      savedUser.id,\n      savedUser.name,\n      savedUser.email,\n      savedUser.createdAt,\n      savedUser.passwordHash,\n    );\n  }\n\n  public async findByEmail(email: UserEmail): Promise<UserEntity | null> {\n    const user = await this.repository.findOne({\n      where: { email: email.getValue() },\n    });\n\n    if (!user) {\n      return null;\n    }\n\n    return UserEntity.reconstruct(\n      user.id,\n      user.name,\n      user.email,\n      user.createdAt,\n      user.passwordHash,\n    );\n  }\n\n  public async findById(id: UserId): Promise<UserEntity | null> {\n    const user = await this.repository.findOne({\n      where: { id: id.getValue() },\n    });\n\n    if (!user) {\n      return null;\n    }\n\n    return UserEntity.reconstruct(\n      user.id,\n      user.name,\n      user.email,\n      user.createdAt,\n      user.passwordHash,\n    );\n  }\n\n  public async exists(email: UserEmail): Promise<boolean> {\n    const count = await this.repository.count({\n      where: { email: email.getValue() },\n    });\n    return count > 0;\n  }\n\n  public async update(id: UserId, userEntity: UserEntity): Promise<UserEntity> {\n    const userData = userEntity.toPersistence();\n    const userInDatabase = await this.repository.findOne({\n      where: { id: id.getValue() },\n    });\n\n    if (!userInDatabase) {\n        throw new UserNotFoundError(id.getValue().toString());\n    }\n\n    const updatedUser = this.repository.merge(userInDatabase, {\n      name: userData.name,\n      email: userData.email,\n      passwordHash: userData.passwordHash,\n    });\n\n    const savedUser = await this.repository.save(updatedUser);\n\n    return UserEntity.reconstruct(\n      savedUser.id,\n      savedUser.name,\n      savedUser.email,\n      savedUser.createdAt,\n      savedUser.passwordHash,\n    );\n  }\n\n  public async delete(id: UserId): Promise<void> {\n    await this.repository.delete(id.getValue());\n  }\n}\n"],"mappings":";;;;AACA,OAAOA,UAAU;AACjB,SAASC,qBAAqB;AAE9B,IAAMC,cAAc,6BAAMC,cAAc,YAAYC,GAAG,GAAnC;AACpB,IAAMC,aAAa,6BAAMC,KAAKC,QAAQL,YAAAA,CAAAA,GAAnB;AAEZ,IAAMM,YAA4BH,2BAAAA;;;ACPzC,OAAO;;;ACAP,OAAOI,QAAQ;AACf,OAAOC,WAAU;AACjB,SAASC,SAAS;;;ACFX,IAAKC,WAAAA,yBAAAA,WAAAA;;;;SAAAA;;;;ADKL,IAAMC,gBAAN,MAAMA;EALb,OAKaA;;;EACMC,qBAAqBC,EACnCC,OAAM,EACNC,IAAI,CAAA,EACJC,OAAO,CAACC,QAAQA,IAAIC,SAAS,SAAA,GAAY;IACxCC,SAAS;EACX,CAAA,EACCH,OAAO,CAACC,QAAQG,GAAGC,WAAWC,MAAKC,QAAQN,GAAAA,CAAAA,GAAO;IACjDE,SAAS;EACX,CAAA;EAEcK,YAAYX,EAAEY,OAAO;IACnCC,eAAe,KAAKd,mBAAmBe,QAAQ,WAAA;IAC/CC,UAAUf,EAAEgB,OAAOC,OAAM,EAAGH,QAAQ,IAAA;IACpCI,UAAUlB,EAAEC,OAAM,EAAGkB,SAAQ,EAAGL,QAAQ,SAAA;IACxCM,YAAYpB,EAAEC,OAAM,EAAGkB,SAAQ,EAAGL,QAAQ,cAAA;IAC1CO,UAAUrB,EAAEsB,WAAWD,QAAAA,EAAUP,QAAQO,SAASE,GAAG;IACrDC,gBAAgBxB,EAAEC,OAAM,EAAGkB,SAAQ,EAAGL,QAAQ,cAAA;IAC9CW,gBAAgBzB,EAAEC,OAAM,EAAGa,QAAQ,EAAA;EACrC,CAAA;AACF;;;AEzBA,OAAOY,aAAa;AAEpB,IAAMC,gBAAgBC,QAAQC,OAAOC,QACnCF,QAAQC,OAAOE,UAAU;EAAEF,QAAQ;AAAsB,CAAA,GACzDD,QAAQC,OAAOG,OAAO;EAAEC,OAAO;AAAK,CAAA,GACpCL,QAAQC,OAAOK,OAAO,CAACC,SAAAA;AACrB,QAAM,EAAEJ,WAAWK,OAAOC,SAASJ,OAAO,GAAGK,KAAAA,IAASH;AAEtD,QAAMI,cAAsC;IAC1CC,OAAO;IACPC,MAAM;IACNN,MAAM;IACNO,OAAO;IACPC,SAAS;EACX;AAEA,QAAMC,aAAa;AACnB,QAAMC,aAAaN,YAAYH,KAAAA,KAAU;AAEzC,MAAIU,aAAa,GAAGf,SAAAA,KAAcc,UAAAA,GAAaT,MAAMW,YAAW,CAAA,GAAKH,UAAAA,MAAgBP,OAAAA;AAErF,MAAIJ,OAAO;AACTa,kBAAc;EAAKb,KAAAA;EACrB;AAEA,QAAMe,gBAAgB;IAAC;IAAa;IAAS;IAAW;;AACxD,QAAMC,eAAeC,OAAOC,KAAKb,IAAAA,EAC9Bc,OAAO,CAACC,QAAQ,CAACL,cAAcM,SAASD,GAAAA,CAAAA,EACxCE,OACC,CAACC,KAAKH,QAAAA;AACJG,QAAIH,GAAAA,IAAOf,KAAKe,GAAAA;AAChB,WAAOG;EACT,GACA,CAAC,CAAA;AAGL,QAAMC,WAAWP,OAAOC,KAAKF,YAAAA;AAC7B,MAAIQ,SAASC,SAAS,GAAG;AACvB,UAAMC,aAAaC,KAAKC,UAAUZ,cAAc,MAAM,CAAA;AACtDH,kBAAc;EAAKa,UAAAA;EACrB;AAEA,SAAOb;AACT,CAAA,CAAA;AAGF,IAAMgB,eAAeC,QAAQC,IAAIC,aAAa;AAEvC,IAAMC,SAAStC,QAAQuC,aAAa;EACzC/B,OAAO2B,QAAQC,IAAII,cAAcN,eAAe,SAAS;EACzDO,aAAa;IACXC,SAAS;IACTC,aAAaR,QAAQC,IAAIC,YAAY;EACvC;EACAO,YAAY;IACV,IAAI5C,QAAQ4C,WAAWC,QAAQ;MAC7B5C,QAAQF;MACR+C,kBAAkB;MAClBC,kBAAkB;IACpB,CAAA;;EAEFC,aAAa;AACf,CAAA;;;AC9DO,IAAeC,cAAf,MAAeA,qBAAoBC,MAAAA;EAA1C,OAA0CA;;;EACxCC,YAAYC,SAAiB;AAC3B,UAAMA,OAAAA;AACN,SAAKC,OAAO,KAAKF,YAAYE;AAC7BC,WAAOC,eAAe,MAAMN,aAAYO,SAAS;EACnD;AAGF;;;ACNO,IAAMC,kBAAN,MAAMA,yBAAwBC,YAAAA;EAFrC,OAEqCA;;;;EACnCC,YAAYC,SAAkCC,SAAmB,CAAA,GAAI;AACnE,UAAMD,OAAAA,GAAAA,KADsCC,SAAAA;AAE5CC,WAAOC,eAAe,MAAMN,iBAAgBO,SAAS;EACvD;EAEOC,gBAAwB;AAC7B,WAAO;EACT;EAEOC,YAAsB;AAC3B,WAAO,KAAKL;EACd;AACF;;;ACXA,IAAMM,SAAS,IAAIC,cAAAA,EAAgBC,UAAUC,UAAUC,QAAQC,GAAG;AAElE,IAAI,CAACL,OAAOM,SAAS;AACnB,QAAM,IAAIC,gBACR,oCACEC,KAAKC,UAAUT,OAAOU,OAAOC,OAAAA,GAAU,MAAM,CAAA,CAAA;AAEnD,OAAO;AACLC,SAAOC,KAAK,iCAAA;AACd;AAEAC,OAAOC,QAAQf,OAAOgB,IAAI,EAAEC,QAAQ,CAAC,CAACC,KAAKC,KAAAA,MAAM;AAC/C,MAAIA,UAAUC,QAAW;AACvBhB,YAAQC,IAAIa,GAAAA,IAAOG,OAAOF,KAAAA;EAC5B;AACF,CAAA;;;ACnBA,SAASG,UAAAA,SAAQC,aAAAA,YAAWC,qBAAqB;;;ACAjD,SACEC,UAAAA,SACAC,0BAAAA,yBACAC,UAAAA,SACAC,aAAAA,YACAC,aAAAA,YACAC,oBAAAA,yBACK;;;ACPA,IAAKC,cAAAA,yBAAAA,cAAAA;;;;;SAAAA;;AAOL,IAAKC,kBAAAA,yBAAAA,kBAAAA;;;;SAAAA;;;;ACPZ,SACEC,QACAC,kBACAC,QACAC,WACAC,8BACK;;;;;;;;;;;;AAIA,IAAMC,OAAN,MAAMA;SAAAA;;;EAEXC;EAGAC;EAGAC;EAGAC;EAGAC;EAGAC;AACF;;;;;;;IAdYC,MAAM;;;;;;IAGNA,MAAM;IAAQC,QAAQ;;;;;;IAGtBD,MAAM;IAAQL,MAAM;;;;;kBAGbO,SAAAA,CAAUC,YAAYA,QAAQC,MAAI;IAAIC,UAAU;;;;;;;;;;IAdzDV,MAAM;;;;;ACThB,SACEW,UAAAA,SACAC,UAAAA,SACAC,WACAC,0BAAAA,+BACK;;;;;;;;;;;;AAKA,IAAMC,cAAN,MAAMA;SAAAA;;;EAEXC;EAOAC;EAGAC;EAGAC;EAGAC;EAGAC;EAGAC;AACF;;;;;;;IApBIL,MAAM;IACNM,MAAMC;IACNC,SAASD,gBAAgBE;;;;;kBAIVC,SAAAA;IAAWC,UAAU;;;;;kBAGrBD,SAAAA;IAAWC,UAAU;;;;;;IAG5BX,MAAM;IAAWY,WAAW;IAAIC,OAAO;;;;;;IAGvCb,MAAM;IAAQW,UAAU;;;;;;IAGxBX,MAAM;IAAYQ,SAAS,6BAAM,qBAAN;;;;;;IAxB7BM,MAAM;;;;;;;;;;;;;;;;AHKT,IAAMC,UAAN,MAAMA;SAAAA;;;EAEXC;EAGAC;EAGAC;EAGAC;EAGAC;EAGAC;EAGAC;AACF;;;;;;;IAjBYL,MAAM;IAAQM,MAAMC;IAAaC,SAASD,YAAYE;;;;;;IAGtDT,MAAM;IAAWU,WAAW;IAAIC,OAAO;IAAGH,SAAS;;;;;mBAG5CI,MAAAA,CAAOV,SAASA,KAAKW,QAAQ;;;;mBAG7BC,MAAAA,CAAOX,SAASA,KAAKU,QAAQ;;;;mBAG7BE,aAAAA,CAAcC,MAAMA,EAAEC,aAAa;;;;;;;;;IAjB5CC,MAAM;;;;;;;;;;;;;;;;ADTT,IAAMC,OAAN,MAAMA;SAAAA;;;EAEXC;EAGAC;AACF;;;IALmBC,MAAM;IAAQC,QAAQ;;;;;mBAGtBC,SAAAA,CAAUC,YAAYA,QAAQC,MAAI;IAAIC,UAAU;;;;;;IALzDP,MAAM;;;;;APAhB,OAAOQ,WAAU;AACjB,SAASC,kBAAkB;AAK3B,IAAMC,iBAAiBC,MAAKC,QAAQC,WAAW,4BAAA;AAExC,IAAMC,gBAAgB,IAAIC,WAAW;EAC1CC,MAAM;EACNC,UAAUC,QAAQC,IAAIC;EACtBC,aAAaH,QAAQC,IAAIG,aAAa;EACtCC,SAASL,QAAQC,IAAIG,aAAa;EAClCE,UAAU;IAACC;IAAMC;IAAMC;IAASC;;EAChCC,YAAY;IAACnB,iBAAiB;;EAC9BoB,qBAAqB;AACvB,CAAA;;;AYjBO,IAAMC,oBAAN,MAAMA,2BAA0BC,gBAAAA;EAFvC,OAEuCA;;;EACrCC,YAAYC,OAAe;AACzB,UAAM,yBAAyBA,KAAAA,EAAO;AACtCC,WAAOC,eAAe,MAAML,mBAAkBM,SAAS;EACzD;AACF;;;ACLO,IAAMC,YAAN,MAAMA,WAAAA;EAFb,OAEaA;;;;EACX,YAAqCC,OAAe;SAAfA,QAAAA;AACnC,SAAKC,cAAa;EACpB;EAEA,OAAcC,OAAOC,OAA0B;AAC7C,WAAO,IAAIJ,WAAUI,KAAAA;EACvB;EAEOC,WAAmB;AACxB,WAAO,KAAKJ;EACd;EAEQC,gBAAsB;AAC5B,UAAMI,aAAa;AACnB,QAAI,CAACA,WAAWC,KAAK,KAAKN,KAAK,GAAG;AAChC,YAAM,IAAIO,kBAAkB,KAAKP,KAAK;IACxC;EACF;EAEOQ,OAAOC,OAA2B;AACvC,WAAO,KAAKT,UAAUS,MAAMT;EAC9B;AACF;;;ACzBA,SAASU,KAAAA,UAAS;AAEX,IAAMC,cAAN,MAAMA;EAFb,OAEaA;;;EACX,OAAuBC,cAAcC,GAClCC,OAAM,EACNC,MAAM,sBAAA,EACNC,IAAI,GAAG,mBAAA,EACPC,IAAI,KAAK,oCAAA;EAEZ,OAAuBC,aAAaL,GACjCC,OAAM,EACNE,IAAI,GAAG,sCAAA,EACPC,IAAI,KAAK,mCAAA,EACTE,MAAM,oBAAoB,0CAAA;EAE7B,OAAuBC,eAAeP,GACnCQ,OAAM,EACNC,IAAI,4BAAA,EACJC,SAAS,0BAAA;EAEZ,OAAuBC,iBAAiBX,GACrCC,OAAM,EACNE,IAAI,GAAG,wCAAA,EACPG,MACC,wEACA,0EAAA;EAGJ,OAAuBM,mBAAmBZ,GAAEa,OAAO;IACjDC,MAAM,KAAKT;IACXH,OAAO,KAAKH;IACZgB,cAAcf,GAAEC,OAAM,EAAGE,IAAI,GAAG,2BAAA;EAClC,CAAA;EAEA,OAAuBa,mBAAmBhB,GAAEa,OAAO;IACjDI,IAAI,KAAKV;IACTO,MAAM,KAAKT;IACXH,OAAO,KAAKH;IACZmB,WAAWlB,GAAEmB,KAAI;IACjBJ,cAAcf,GAAEC,OAAM,EAAGE,IAAI,GAAG,2BAAA;EAClC,CAAA;AACF;;;ACvCO,IAAMiB,WAAN,MAAMA,UAAAA;EAFb,OAEaA;;;;EACX,YAAqCC,OAAe;SAAfA,QAAAA;EAAgB;EAErD,OAAcC,OAAOC,MAAwB;AAC3C,UAAMC,gBAAgBC,YAAYC,WAAWC,MAAMJ,IAAAA;AACnD,WAAO,IAAIH,UAASI,aAAAA;EACtB;EAEOI,WAAmB;AACxB,WAAO,KAAKP;EACd;EAEOQ,OAAOC,OAA0B;AACtC,WAAO,KAAKT,UAAUS,MAAMT;EAC9B;AACF;;;ACfO,IAAMU,qBAAN,MAAMA,4BAA2BC,gBAAAA;EAFxC,OAEwCA;;;EACtCC,cAAc;AACZ,UAAM,mDAAA;AACNC,WAAOC,eAAe,MAAMJ,oBAAmBK,SAAS;EAC1D;AACF;;;ACJO,IAAMC,SAAN,MAAMA,QAAAA;EAHb,OAGaA;;;;;EACX,YACmBC,OACAC,UAAmB,OACpC;SAFiBD,QAAAA;SACAC,UAAAA;EAChB;EAEH,OAAcC,OAAOC,IAAoB;AACvC,UAAMC,cAAcC,YAAYC,aAAaC,MAAMJ,EAAAA;AACnD,WAAO,IAAIJ,QAAOK,aAAa,KAAA;EACjC;EAEA,OAAcI,YAAoB;AAChC,WAAO,IAAIT,QAAO,MAAM,IAAA;EAC1B;EAEA,OAAcU,mBAAmBN,IAAoB;AACnD,UAAMC,cAAcC,YAAYC,aAAaC,MAAMJ,EAAAA;AACnD,WAAO,IAAIJ,QAAOK,aAAa,KAAA;EACjC;EAEA,OAAcM,aAAaP,IAAoB;AAC7C,WAAO,IAAIJ,QAAOI,IAAI,KAAA;EACxB;EAEOQ,WAAmB;AACxB,QAAI,KAAKX,UAAU,MAAM;AACvB,YAAM,IAAIY,mBAAAA;IACZ;AACA,WAAO,KAAKZ;EACd;EAEOa,QAAiB;AACtB,WAAO,KAAKZ;EACd;EAEOa,OAAOC,OAAwB;AACpC,WAAO,KAAKf,UAAUe,MAAMf;EAC9B;EAEOgB,WAAmB;AACxB,WAAO,KAAKhB,OAAOgB,SAAAA,KAAc;EACnC;AACF;;;AC3CO,IAAMC,uBAAN,MAAMA,8BAA6BC,gBAAAA;EAF1C,OAE0CA;;;EACxCC,YAAYC,SAAiB;AAC3B,UAAMA,SAAS,CAAA,CAAE;AACjBC,WAAOC,eAAe,MAAML,sBAAqBM,SAAS;EAC5D;AACF;;;ACNA,OAAOC,YAAY;AAEZ,IAAMC,eAAN,MAAMA,cAAAA;EAHb,OAGaA;;;;;EACX,YACmBC,OACAC,WAAoB,OACrC;SAFiBD,QAAAA;SACAC,WAAAA;AAEjB,QAAI,CAACA,UAAU;AACb,WAAKC,iBAAgB;IACvB;EACF;EAEA,OAAcC,OAAOC,eAAqC;AACxD,WAAO,IAAIL,cAAaK,eAAe,KAAA;EACzC;EAEA,OAAcC,eAAeC,gBAAsC;AACjE,WAAO,IAAIP,cAAaO,gBAAgB,IAAA;EAC1C;EAEA,MAAaC,OAA8B;AACzC,QAAI,KAAKN,UAAU;AACjB,aAAO;IACT;AACA,UAAMO,cAAc,MAAMC,OAAOF,KAAK,KAAKP,OAAO,EAAA;AAClD,WAAO,IAAID,cAAaS,aAAa,IAAA;EACvC;EAEA,MAAaE,QAAQN,eAAyC;AAC5D,QAAI,CAAC,KAAKH,UAAU;AAClB,YAAM,IAAIU,qBAAqB,uCAAA;IACjC;AACA,WAAOF,OAAOC,QAAQN,eAAe,KAAKJ,KAAK;EACjD;EAEOY,WAAmB;AACxB,WAAO,KAAKZ;EACd;EAEOa,mBAA4B;AACjC,WAAO,KAAKZ;EACd;EAEQC,mBAAyB;AAC/B,QACE,CAAC,KAAKF,MAAMc,MACV,sEAAA,GAEF;AACA,YAAM,IAAIH,qBACR,qGAAA;IAEJ;EACF;AACF;;;ACjDO,IAAMI,aAAN,MAAMA,YAAAA;EANb,OAMaA;;;;;;;;EACX,YACmBC,IACAC,MACAC,OACAC,WACAC,UACjB;SALiBJ,KAAAA;SACAC,OAAAA;SACAC,QAAAA;SACAC,YAAAA;SACAC,WAAAA;EAChB;EAEH,OAAcC,OACZJ,MACAC,OACAI,cACY;AACZ,UAAMC,gBAAgBC,YAAYC,iBAAiBC,MAAM;MACvDT;MACAC;MACAI;IACF,CAAA;AACA,WAAO,IAAIP,YACTY,OAAOC,UAAS,GAChBC,SAASR,OAAOE,cAAcN,IAAI,GAClCa,UAAUT,OAAOE,cAAcL,KAAK,GACpC,oBAAIa,KAAAA,GACJC,aAAaC,eAAeX,YAAAA,CAAAA;EAEhC;EAEA,OAAcY,YACZlB,IACAC,MACAC,OACAC,WACAG,cACY;AACZ,UAAMC,gBAAgBC,YAAYW,iBAAiBT,MAAM;MACvDV;MACAC;MACAC;MACAC;MACAG;IACF,CAAA;AACA,WAAO,IAAIP,YACTY,OAAOS,mBAAmBb,cAAcP,EAAE,GAC1Ca,SAASR,OAAOE,cAAcN,IAAI,GAClCa,UAAUT,OAAOE,cAAcL,KAAK,GACpCK,cAAcJ,WACda,aAAaC,eAAeX,YAAAA,CAAAA;EAEhC;EAEOe,QAAgB;AACrB,WAAO,KAAKrB;EACd;EAEOsB,UAAoB;AACzB,WAAO,KAAKrB;EACd;EAEOsB,WAAsB;AAC3B,WAAO,KAAKrB;EACd;EAEOsB,eAAqB;AAC1B,WAAO,KAAKrB;EACd;EAEOsB,kBAA0B;AAC/B,WAAO,KAAKrB,SAASsB,SAAQ;EAC/B;EAEOC,gBAA+B;AACpC,WAAO;MACL3B,IAAI,KAAKA,GAAG4B,MAAK,IAAK,OAAO,KAAK5B,GAAG0B,SAAQ;MAC7CzB,MAAM,KAAKA,KAAKyB,SAAQ;MACxBxB,OAAO,KAAKA,MAAMwB,SAAQ;MAC1BvB,WAAW,KAAKA;MAChBG,cAAc,KAAKF,SAASsB,SAAQ;IACtC;EACF;EAEOG,SAA8C;AACnD,WAAO;MACL7B,IAAI,KAAKA,GAAG4B,MAAK,IAAK,OAAO,KAAK5B,GAAG0B,SAAQ;MAC7CzB,MAAM,KAAKA,KAAKyB,SAAQ;MACxBxB,OAAO,KAAKA,MAAMwB,SAAQ;MAC1BvB,WAAW,KAAKA;IAClB;EACF;AACF;;;AC7FO,IAAM2B,gBAAN,MAAMA,uBAAsBC,YAAAA;EAFnC,OAEmCA;;;EACjCC,YAAYC,SAAiB;AAC3B,UAAMA,OAAAA;AACNC,WAAOC,eAAe,MAAML,eAAcM,SAAS;EACrD;EAEOC,gBAAwB;AAC7B,WAAO;EACT;AACF;;;ACTO,IAAMC,oBAAN,MAAMA,2BAA0BC,cAAAA;EAFvC,OAEuCA;;;EACrCC,YAAYC,QAAiB;AAC3B,UAAMA,SAAS,gBAAgBA,MAAAA,eAAqB,gBAAA;AACpDC,WAAOC,eAAe,MAAML,mBAAkBM,SAAS;EACzD;AACF;;;ACGO,IAAMC,wBAAN,MAAMA,uBAAAA;EAPb,OAOaA;;;;EACXC,YACmBC,aAA+BC,cAAcC,cAAcC,IAAAA,GAC5E;SADiBH,aAAAA;EAChB;EAEHI,gBAAgBC,SAA8B;AAC5C,WAAO,IAAIP,uBAAsBO,QAAQH,cAAcC,IAAAA,CAAAA;EACzD;EAEA,MAAaG,OAAOC,YAA6C;AAC/DC,WAAOC,KAAK,iBAAiB;MAAEF;IAAW,CAAA;AAC1C,UAAMG,WAAWH,WAAWI,cAAa;AACzCH,WAAOC,KAAK,aAAa;MAAEC;IAAS,CAAA;AACpC,UAAME,OAAO,KAAKZ,WAAWM,OAAO;MAClCO,MAAMH,SAASG;MACfC,OAAOJ,SAASI;MAChBC,WAAWL,SAASK;MACpBC,cAAcN,SAASM;IACzB,CAAA;AAEAR,WAAOC,KAAK,gBAAgB;MAAEG;IAAK,CAAA;AACnC,UAAMK,YAAY,MAAM,KAAKjB,WAAWkB,KAAKN,IAAAA;AAC7CJ,WAAOC,KAAK,cAAc;MAAEQ;IAAU,CAAA;AACtC,WAAOE,WAAWC,YAChBH,UAAUI,IACVJ,UAAUJ,MACVI,UAAUH,OACVG,UAAUF,WACVE,UAAUD,YAAY;EAE1B;EAEA,MAAaM,YAAYR,OAA8C;AACrE,UAAMF,OAAO,MAAM,KAAKZ,WAAWuB,QAAQ;MACzCC,OAAO;QAAEV,OAAOA,MAAMW,SAAQ;MAAG;IACnC,CAAA;AAEA,QAAI,CAACb,MAAM;AACT,aAAO;IACT;AAEA,WAAOO,WAAWC,YAChBR,KAAKS,IACLT,KAAKC,MACLD,KAAKE,OACLF,KAAKG,WACLH,KAAKI,YAAY;EAErB;EAEA,MAAaU,SAASL,IAAwC;AAC5D,UAAMT,OAAO,MAAM,KAAKZ,WAAWuB,QAAQ;MACzCC,OAAO;QAAEH,IAAIA,GAAGI,SAAQ;MAAG;IAC7B,CAAA;AAEA,QAAI,CAACb,MAAM;AACT,aAAO;IACT;AAEA,WAAOO,WAAWC,YAChBR,KAAKS,IACLT,KAAKC,MACLD,KAAKE,OACLF,KAAKG,WACLH,KAAKI,YAAY;EAErB;EAEA,MAAaW,OAAOb,OAAoC;AACtD,UAAMc,QAAQ,MAAM,KAAK5B,WAAW4B,MAAM;MACxCJ,OAAO;QAAEV,OAAOA,MAAMW,SAAQ;MAAG;IACnC,CAAA;AACA,WAAOG,QAAQ;EACjB;EAEA,MAAaC,OAAOR,IAAYd,YAA6C;AAC3E,UAAMG,WAAWH,WAAWI,cAAa;AACzC,UAAMmB,iBAAiB,MAAM,KAAK9B,WAAWuB,QAAQ;MACnDC,OAAO;QAAEH,IAAIA,GAAGI,SAAQ;MAAG;IAC7B,CAAA;AAEA,QAAI,CAACK,gBAAgB;AACjB,YAAM,IAAIC,kBAAkBV,GAAGI,SAAQ,EAAGO,SAAQ,CAAA;IACtD;AAEA,UAAMC,cAAc,KAAKjC,WAAWkC,MAAMJ,gBAAgB;MACxDjB,MAAMH,SAASG;MACfC,OAAOJ,SAASI;MAChBE,cAAcN,SAASM;IACzB,CAAA;AAEA,UAAMC,YAAY,MAAM,KAAKjB,WAAWkB,KAAKe,WAAAA;AAE7C,WAAOd,WAAWC,YAChBH,UAAUI,IACVJ,UAAUJ,MACVI,UAAUH,OACVG,UAAUF,WACVE,UAAUD,YAAY;EAE1B;EAEA,MAAamB,OAAOd,IAA2B;AAC7C,UAAM,KAAKrB,WAAWmC,OAAOd,GAAGI,SAAQ,CAAA;EAC1C;AACF;","names":["path","fileURLToPath","getFilename","fileURLToPath","url","getDirname","path","dirname","__dirname","fs","path","z","NODE_ENV","ConfigSchemas","databasePathSchema","z","string","min","refine","val","endsWith","message","fs","existsSync","path","resolve","envSchema","object","DATABASE_PATH","default","APP_PORT","coerce","number","APP_HOST","optional","JWT_SECRET","NODE_ENV","nativeEnum","DEV","SESSION_SECRET","OPENAI_API_KEY","winston","consoleFormat","winston","format","combine","timestamp","errors","stack","printf","info","level","message","meta","levelColors","error","warn","debug","verbose","resetColor","levelColor","logMessage","toUpperCase","excludeFields","filteredMeta","Object","keys","filter","key","includes","reduce","obj","metaKeys","length","metaString","JSON","stringify","isProduction","process","env","NODE_ENV","logger","createLogger","LOG_LEVEL","defaultMeta","service","environment","transports","Console","handleExceptions","handleRejections","exitOnError","DomainError","Error","constructor","message","name","Object","setPrototypeOf","prototype","ValidationError","DomainError","constructor","message","errors","Object","setPrototypeOf","prototype","getStatusCode","getErrors","result","ConfigSchemas","envSchema","safeParse","process","env","success","ValidationError","JSON","stringify","error","format","logger","info","Object","entries","data","forEach","key","value","undefined","String","Entity","OneToMany","PrimaryColumn","Entity","PrimaryGeneratedColumn","Column","ManyToOne","OneToMany","CreateDateColumn","AccountType","TransactionType","Column","CreateDateColumn","Entity","OneToMany","PrimaryGeneratedColumn","User","id","name","email","passwordHash","accounts","createdAt","type","unique","Account","account","user","onDelete","Column","Entity","ManyToOne","PrimaryGeneratedColumn","Transaction","id","type","sourceAccount","destinationAccount","amount","description","transactionDate","enum","TransactionType","default","DEBITO","Account","nullable","precision","scale","name","Account","id","type","balance","user","bank","transactions","createdAt","enum","AccountType","default","CORRENTE","precision","scale","User","accounts","Bank","Transaction","t","sourceAccount","name","Bank","name","accounts","type","unique","Account","account","bank","onDelete","path","DataSource","migrationsPath","path","resolve","__dirname","AppDataSource","DataSource","type","database","process","env","DATABASE_PATH","synchronize","NODE_ENV","logging","entities","User","Bank","Account","Transaction","migrations","migrationsTableName","InvalidEmailError","ValidationError","constructor","email","Object","setPrototypeOf","prototype","UserEmail","value","validateEmail","create","email","getValue","emailRegex","test","InvalidEmailError","equals","other","z","UserSchemas","emailSchema","z","string","email","min","max","nameSchema","regex","userIdSchema","number","int","positive","passwordSchema","createUserSchema","object","name","passwordHash","userEntitySchema","id","createdAt","date","UserName","value","create","name","validatedName","UserSchemas","nameSchema","parse","getValue","equals","other","InvalidUserIdError","ValidationError","constructor","Object","setPrototypeOf","prototype","UserId","value","isNewId","create","id","validatedId","UserSchemas","userIdSchema","parse","createNew","createFromDatabase","createUnsafe","getValue","InvalidUserIdError","isNew","equals","other","toString","InvalidPasswordError","ValidationError","constructor","message","Object","setPrototypeOf","prototype","bcrypt","UserPassword","value","isHashed","validatePassword","create","plainPassword","createFromHash","hashedPassword","hash","hashedValue","bcrypt","compare","InvalidPasswordError","getValue","isHashedPassword","match","UserEntity","id","name","email","createdAt","password","create","passwordHash","validatedData","UserSchemas","createUserSchema","parse","UserId","createNew","UserName","UserEmail","Date","UserPassword","createFromHash","reconstruct","userEntitySchema","createFromDatabase","getId","getName","getEmail","getCreatedAt","getPasswordHash","getValue","toPersistence","isNew","toJSON","NotFoundError","DomainError","constructor","message","Object","setPrototypeOf","prototype","getStatusCode","UserNotFoundError","NotFoundError","constructor","userId","Object","setPrototypeOf","prototype","TypeOrmUserRepository","constructor","repository","AppDataSource","getRepository","User","withTransaction","manager","create","userEntity","logger","info","userData","toPersistence","user","name","email","createdAt","passwordHash","savedUser","save","UserEntity","reconstruct","id","findByEmail","findOne","where","getValue","findById","exists","count","update","userInDatabase","UserNotFoundError","toString","updatedUser","merge","delete"]}