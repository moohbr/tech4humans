{"version":3,"sources":["../../../app/infrastructure/logger/index.ts"],"sourcesContent":["import winston from \"winston\";\n\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf((info) => {\n    const { timestamp, level, message, stack, ...meta } = info;\n\n    const levelColors: Record<string, string> = {\n      error: \"\\x1b[31m\", // red\n      warn: \"\\x1b[33m\", // yellow\n      info: \"\\x1b[32m\", // green\n      debug: \"\\x1b[36m\", // cyan\n      verbose: \"\\x1b[35m\", // magenta\n    };\n\n    const resetColor = \"\\x1b[0m\";\n    const levelColor = levelColors[level] || \"\";\n\n    let logMessage = `${timestamp} [${levelColor}${level.toUpperCase()}${resetColor}]: ${message}`;\n\n    if (stack) {\n      logMessage += `\\n${stack}`;\n    }\n\n    const excludeFields = [\"timestamp\", \"level\", \"message\", \"stack\"];\n    const filteredMeta = Object.keys(meta)\n      .filter((key) => !excludeFields.includes(key))\n      .reduce(\n        (obj, key) => {\n          obj[key] = meta[key];\n          return obj;\n        },\n        {} as Record<string, unknown>,\n      );\n\n    const metaKeys = Object.keys(filteredMeta);\n    if (metaKeys.length > 0) {\n      const metaString = JSON.stringify(filteredMeta, null, 2);\n      logMessage += `\\n${metaString}`;\n    }\n\n    return logMessage;\n  }),\n);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || (isProduction ? \"warn\" : \"debug\"),\n  defaultMeta: {\n    service: \"tech4humans\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  transports: [\n    new winston.transports.Console({\n      format: consoleFormat,\n      handleExceptions: true,\n      handleRejections: true,\n    }),\n  ],\n  exitOnError: false,\n});\n\nexport const morganStream = {\n  write: (message: string) => {\n    logger.info(message.trim(), { component: \"http\" });\n  },\n};\n\nexport const logWithContext = {\n  database: (message: string, meta?: object) => {\n    logger.info(message, { component: \"database\", ...meta });\n  },\n\n  server: (message: string, meta?: object) => {\n    logger.info(message, { component: \"server\", ...meta });\n  },\n\n  auth: (message: string, meta?: object) => {\n    logger.info(message, { component: \"auth\", ...meta });\n  },\n\n  api: (message: string, meta?: object) => {\n    logger.info(message, { component: \"api\", ...meta });\n  },\n\n  error: (message: string, error?: Error, meta?: object) => {\n    logger.error(message, {\n      error: error?.message,\n      stack: error?.stack,\n      ...meta,\n    });\n  },\n};\n"],"mappings":";;;;AAAA,OAAOA,aAAa;AAEpB,IAAMC,gBAAgBC,QAAQC,OAAOC,QACnCF,QAAQC,OAAOE,UAAU;EAAEF,QAAQ;AAAsB,CAAA,GACzDD,QAAQC,OAAOG,OAAO;EAAEC,OAAO;AAAK,CAAA,GACpCL,QAAQC,OAAOK,OAAO,CAACC,SAAAA;AACrB,QAAM,EAAEJ,WAAWK,OAAOC,SAASJ,OAAO,GAAGK,KAAAA,IAASH;AAEtD,QAAMI,cAAsC;IAC1CC,OAAO;IACPC,MAAM;IACNN,MAAM;IACNO,OAAO;IACPC,SAAS;EACX;AAEA,QAAMC,aAAa;AACnB,QAAMC,aAAaN,YAAYH,KAAAA,KAAU;AAEzC,MAAIU,aAAa,GAAGf,SAAAA,KAAcc,UAAAA,GAAaT,MAAMW,YAAW,CAAA,GAAKH,UAAAA,MAAgBP,OAAAA;AAErF,MAAIJ,OAAO;AACTa,kBAAc;EAAKb,KAAAA;EACrB;AAEA,QAAMe,gBAAgB;IAAC;IAAa;IAAS;IAAW;;AACxD,QAAMC,eAAeC,OAAOC,KAAKb,IAAAA,EAC9Bc,OAAO,CAACC,QAAQ,CAACL,cAAcM,SAASD,GAAAA,CAAAA,EACxCE,OACC,CAACC,KAAKH,QAAAA;AACJG,QAAIH,GAAAA,IAAOf,KAAKe,GAAAA;AAChB,WAAOG;EACT,GACA,CAAC,CAAA;AAGL,QAAMC,WAAWP,OAAOC,KAAKF,YAAAA;AAC7B,MAAIQ,SAASC,SAAS,GAAG;AACvB,UAAMC,aAAaC,KAAKC,UAAUZ,cAAc,MAAM,CAAA;AACtDH,kBAAc;EAAKa,UAAAA;EACrB;AAEA,SAAOb;AACT,CAAA,CAAA;AAGF,IAAMgB,eAAeC,QAAQC,IAAIC,aAAa;AAEvC,IAAMC,SAAStC,QAAQuC,aAAa;EACzC/B,OAAO2B,QAAQC,IAAII,cAAcN,eAAe,SAAS;EACzDO,aAAa;IACXC,SAAS;IACTC,aAAaR,QAAQC,IAAIC,YAAY;EACvC;EACAO,YAAY;IACV,IAAI5C,QAAQ4C,WAAWC,QAAQ;MAC7B5C,QAAQF;MACR+C,kBAAkB;MAClBC,kBAAkB;IACpB,CAAA;;EAEFC,aAAa;AACf,CAAA;AAEO,IAAMC,eAAe;EAC1BC,OAAO,wBAACzC,YAAAA;AACN6B,WAAO/B,KAAKE,QAAQ0C,KAAI,GAAI;MAAEC,WAAW;IAAO,CAAA;EAClD,GAFO;AAGT;AAEO,IAAMC,iBAAiB;EAC5BC,UAAU,wBAAC7C,SAAiBC,SAAAA;AAC1B4B,WAAO/B,KAAKE,SAAS;MAAE2C,WAAW;MAAY,GAAG1C;IAAK,CAAA;EACxD,GAFU;EAIV6C,QAAQ,wBAAC9C,SAAiBC,SAAAA;AACxB4B,WAAO/B,KAAKE,SAAS;MAAE2C,WAAW;MAAU,GAAG1C;IAAK,CAAA;EACtD,GAFQ;EAIR8C,MAAM,wBAAC/C,SAAiBC,SAAAA;AACtB4B,WAAO/B,KAAKE,SAAS;MAAE2C,WAAW;MAAQ,GAAG1C;IAAK,CAAA;EACpD,GAFM;EAIN+C,KAAK,wBAAChD,SAAiBC,SAAAA;AACrB4B,WAAO/B,KAAKE,SAAS;MAAE2C,WAAW;MAAO,GAAG1C;IAAK,CAAA;EACnD,GAFK;EAILE,OAAO,wBAACH,SAAiBG,OAAeF,SAAAA;AACtC4B,WAAO1B,MAAMH,SAAS;MACpBG,OAAOA,OAAOH;MACdJ,OAAOO,OAAOP;MACd,GAAGK;IACL,CAAA;EACF,GANO;AAOT;","names":["winston","consoleFormat","winston","format","combine","timestamp","errors","stack","printf","info","level","message","meta","levelColors","error","warn","debug","verbose","resetColor","levelColor","logMessage","toUpperCase","excludeFields","filteredMeta","Object","keys","filter","key","includes","reduce","obj","metaKeys","length","metaString","JSON","stringify","isProduction","process","env","NODE_ENV","logger","createLogger","LOG_LEVEL","defaultMeta","service","environment","transports","Console","handleExceptions","handleRejections","exitOnError","morganStream","write","trim","component","logWithContext","database","server","auth","api"]}