import { DeleteUserUseCase } from "./index";
import { DeleteUserRequest } from "./request";
import { UserRepositoryInterface } from "@models/user/repository/interfaces";
import { UserEntity } from "@models/user/entity";
import { UserNotFoundError } from "@errors/user/user-not-found-error";
import { AppDataSource } from "@infrastructure/datasources/databases/typeorm";

jest.mock("@infrastructure/datasources/databases/typeorm");

describe("DeleteUserUseCase", () => {
  let useCase: DeleteUserUseCase;
  let userRepository: jest.Mocked<UserRepositoryInterface>;
  let mockRequest: DeleteUserRequest;

  beforeEach(() => {
    userRepository = {
      findById: jest.fn(),
      delete: jest.fn(),
      withTransaction: jest.fn().mockReturnThis(),
    } as any;

    useCase = new DeleteUserUseCase(userRepository);

    mockRequest = {
      getId: jest.fn().mockReturnValue(1),
    };

    (AppDataSource.transaction as jest.Mock).mockImplementation(async (cb) => {
      return cb({});
    });
  });

  it("should successfully delete a user", async () => {
    // Arrange
    const mockUser = {} as UserEntity;
    userRepository.findById.mockResolvedValue(mockUser);
    userRepository.delete.mockResolvedValue(undefined);

    // Act
    const result = await useCase.execute(mockRequest);

    // Assert
    expect(result.isSuccess()).toBe(true);
    expect(result.getMessage()).toBe("User deleted successfully");
    expect(userRepository.findById).toHaveBeenCalled();
    expect(userRepository.delete).toHaveBeenCalled();
  });

  it("should fail if user not found", async () => {
    // Arrange
    userRepository.findById.mockResolvedValue(null);

    // Act
    const result = await useCase.execute(mockRequest);

    // Assert
    expect(result.isSuccess()).toBe(false);
    expect(result.getMessage()).toContain("User not found");
  });
}); 